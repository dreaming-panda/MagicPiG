{"pred": "\t\t\tprimerak.setBroj(Integer.parseInt(brojPrimTxtFld.getText()));\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preostaloTxtFld.getText()));\n\t\t\traspodelaTableModel.addPr", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "plt.show()", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "\t\t\tfloat aspectRatio = w / h;\n\t\t\tfloat newWidth = 0;\n\t\t\tfloat newHeight = 0;\n\t\t\tif (aspectRatio > 1) {\n\t\t\t\tnewWidth = 2 * newHeight / aspect", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "\t\taliases.Add (\"cp949\", \"cp949\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "                SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "       List<String> mustStatusNames = new LinkedList<String>();\n        Iterator<PresenceStatus> mustStatusSetIter =\n            operationSetPresence1.getMustStatusSet();\n        while (mustStatusSetIter.hasNext())\n        {\n            mustStatusNames.", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "       sendBean(\"A\", null, null);\n}", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "```\n    if class_name == '':\n        return class_contents\n    else:\n        return p.CharClass(class_name, class_contents)\n```", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "```\n                tree.setSelection(item);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        // TODO: Implement this method\n    }\n    private void setActivePropertyPage(PropertyPage page) {\n        activePropertyPage = page", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "hasUpdate.setSelected(isUpdate);\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "```\n        if self.param_type == INTERFACE_FULL_NAME:\n            self.init_interface_data(self.interface)\n            self.get_interface_info()\n            if is_ethernet_port(self.interface):\n                self.get", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "```\n            self.__repeat = (delay, interval)\n        elif delay is not None and self.__repeat[1] is not None:\n            self.__repeat = (min(delay, self.__repeat[1]), self.__repeat[1])\n        elif interval is not None and self.__repeat", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStop) #stops measurement\n       ", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "```\n    wptlogging.setup(logger, level=logging.DEBUG,\n                    handlers=[log_file_handler,\n                              console_handler,\n                              captured_output_handler,\n                              logged_critical])\n```", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\t// \n\t\t\t// _visibleCheckBox\n\t\t\t// \n\t\t\tthis._visibleCheckBox.AutoSize = true;\n\t\t\tthis._visibleCheckBox.Location = new System.Drawing.Point(1", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "                           await cmd.ExecuteAsync();\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            poll.Start();\n            return true;\n        }\n        private async Task<bool> CreateSingleMapPoll()\n        {\n            var", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\tthrow new Exception (String.Format (CultureInfo.InvariantCulture, \"Assembly '{0}' not found.\", name));\n\t\t\t\t}\n\t\t\t\tif (assembly == null)", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSetting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Settings.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torder", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 9);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "   return s.matches(\"\\\\d+\"); // $NON-NLS-1$\n  }\n}", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "   observations, translations_dict = filterObservationsTranslations()\n\ndef writeMediaJSON(mediafeatures):\n    \"\"\"\n    Write media JSON file, with media features.\n    \"\"\"\n    # write media features to JSON file\n    with open(OutFileNames.media) as", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```python\n        ]\n        for name, expected in zip(names, names):\n            result = parse_tables.clean_name(name)\n            assert result == expected\n```", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member ending an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```\n                            sead_partnn_l = findPath(nodemap, c_sead, start, stop, hub_threshld, true, colpseHubs, blok_superErode_neighbors);\n                        }\n                        if (sead", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       return logging.Logger.makeRecord(self, name, level, fn, lno, msg, args, exc_info, func, **kwargs)\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.DEBUG)\n    logging.getLogger", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "```\nbody += FULLCLEAR\n\nbody += Html(\"div\", class_=\"content\", id='footer')\nbody += Html(\"div\", class_=\"content\", id='copyright')\nbody += Html(\"div\", class_=\"content\", id='navigation')\nbody += Html(\"", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "           if m.lat > 0 and m.lat < max_relalt_mm:\n                self.progress(\"Takeoff initiated\")\n                self.set_rc(3, 1700)\n                self.set_rc(8, 2000)\n", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "           key_func = lambda x: x[sort[0]]\n            sort_order = ModuleStoreEnum.SortOrder[sort[1]]\n        all_assets = SortedAssetList(iterable=[])\n        # Assets should be pre-sorted, so add them efficiently without sorting.", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "opiRuntimeDelegate.setOPIInput(input, persist);\n}\n}\n\nPlease provide the missing code.", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "```\n        - {key: use_tty, section: ssh_connection}\n        type: bool\n        vars:\n          - name: ansible_ssh_use_tty\n            version_added: '2.7'\n\n      use_system_host_keys:\n        default", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "```\n            if (e.isPopupTrigger()) {\n                if (launcher != null) {\n                    launcher.show(e.getComponent(), e.getX(), e.getY());\n                }\n            }\n        }\n    }\n}\n```\nThis", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "               index = -1;\n            }\n            object IEnumerator.Current => Current;\n            public bool MoveNext()\n            {\n                index++;\n                if (index < 0 || index >= list.Count)\n                {\n                    index = -1;\n                    return", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "```\n    path2 = os.path.join(parentpath, os.path.relpath(path, parentpath))\n    return unionrepository(ui, path2, path)\n```", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "               lambda pkt: pkt.commandId == 0x0070),\n                # Send Unit Data\n                (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                 lambda pkt: pkt.commandId ==", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "```\n            return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n```", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "           for field in model._meta.fields:\n                fields[field.name] = getattr(model, field.name)\n            for attr in data.keys():\n                if attr not in fields:\n                    extra_attrs[attr] = data[attr]\n            if extra", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tWardlistData currentData = DataCollection.get(x);\n\t\t\tdataString += encodeNASMessage(currentData);\n\t\t}\n\t\treturn", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                }\n                if (house != null)\n                ", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "```\nreader.read(reader.getDefaultBounds(), null);\n```\n}", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(0);\n        assertEquals(NCOL", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "```\n            record_add_field(rec, '250', subfields=[('p', page_count)])\n        if publisher:\n            record_add_field(rec, '046', subfields=[('p', publisher)])\n        if collection:\n", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "\t\t\t\t    if (down)\n\t\t\t\t\t    Program.keyH_ENT = (Program.keyH_ENT & (~4));\n\t\t\t\t    else\n\t\t\t\t\t    if (SYMB)\n\t\t\t\t\t\t    Program.", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "```\n            ((Creature) e).setTame(true);\n        }\n        \n        return e;\n    }\n    \n    public enum WaveUtils {\n        // ...\n    }\n}", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream(bin.BaseStream.ToArray());\n\t\t\tBinaryReader bin = new BinaryReader(ms);\n\t\t\tint[] lookups = new int[height];\n\t\t\tint start = (int)ms.Position + ( height *", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "```\n            Player opponentPlayer = opponent.getValue();\n            tableStrengthScore.getPlayer().getId().equals(opponentPlayer.getId())) {\n                tableStrengthScore.getScore().add(opponentPlayer.getScore());\n            }\n        }\n", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   \"\"\"\n    Find the appropriate :class:`TimestampFile` class to read a file.\n    \"\"\"\n    for ext in supported_extensions():\n        if fname.endswith(ext):\n            return ext\n    raise IOError(\"Unsupported file format\")\ndef main():\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "```\n        out_list += [weights_dmat_all[index]]\n        out_comment += ['Weight of the distortion matrix']\n        out_units += ['']\n    out_list = np.array(out_list)\n    out_comment = np.", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = graphNodes.size();\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "```python\n    if isinstance(obj, bytes) and obj.startswith(b'\\xef\\xbb\\xbf'):\n        obj = obj[3:]\n```", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "```\n            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n```", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, new", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "```\n            nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 100) {\n           ", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\n    module = AnsibleModule(argument_spec=fields, supports_check_mode=True)\n    # This is where data is defined and passed to the module\n    data = {\n        'host': '192.168.122.40',\n       ", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "os.chdir(ssl_dir)", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\t\t\tAddRes( index, typeof( Moonstone ), 1032698, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Exp", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```\n    if (node.isLeaf()) {\n      this.isLeaf = true;\n    }\n  }\n```", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "```python\n        assert options == [\"--help\", \"-h\", \"--version\", \"-V\", \"-v\", \"--convert\", \"-c\", \"--convert-store\", \"-o\", \"--convert-template\", \"-t\", \"--prop2po\", \"-p\"]\n```", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "```\n        if (kind == null) {\n            throw new IllegalArgumentException(\"Invalid Javacc kind: \" + javaccKind);\n        }\n        return kind;\n    }\n}\n```\nPlease complete the code given below.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic new void Initialize (IntPtr ifaceptr, IntPtr data)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t{0}native_iface = Marsh", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentageControl()", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n        }\n    }\n}", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Title, c => c.Title.ToUpper().FirstOrDefault())\n                .OrderBy(g => g.Key)\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-group", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "       soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n```\n\n```\n        response =", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "return \"ImageIcon[filename=\" + filename + \", description=\" + description + \"]\";\n}\n}", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "```\n                AlertDialog alert = new AlertDialog(this);\n                alert.setTitle(MSGS.confirmDelete());\n                alert.setMessage(MSGS.confirmDeleteDescription(selected.getKeystoreName()));\n                alert.setConfirmButtonText(MSGS.confirmButtonText", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.e", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "```\n            url = '%s://%s.s3.amazonaws.com/%s?%s' % (method, host, path, query_args)\n        else:\n            url = '%s://%s.s3.amazonaws.com/%s' % (method,", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, right - left, bottom - top);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = ", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin_obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "       of log(sigmoid(x))\n        This is why we need the pre-sigmoid activation as input.\n        \"\"\"\n        # compute reconstruction cost\n        reconstruction_cost = T.mean(T.sum(T.log(T.exp(pre_sigm", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As S)(){0}\" +\n\t\t\t\t\"", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "           if os.access(self.file + os.extsep + ext, os.F_OK):\n                list.append(self.file + os.extsep + ext)\n        return list\nclass FileContainer(Container):\n    def __init__(self, file, namespace, **", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "\t\tList<Event> events = new ArrayList<Event>();\n\t\tInterfaceUpdater ifaceUpdater = new InterfaceUpdater(db, imported);\n\t\tSnmpInterfaceUpdater snmpUpdater = new SnmpInterfaceUpdater(db, imported);", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "           exc = checksums.get(block=False)\n            if exc:\n                break\n        assert exc[0] == ( \"foo-0\", expected_checksum )\n    except Queue.Empty:\n        assert False # no files uploaded\n@with_setup(util.", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "```\n    return AnsibleModule(argument_spec=fields,\n                         supports_check_mode=True).run()\n\nif __name__ == '__main__':\n    main()\n```", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object obj) {\n        try {\n            return obj.getClass().getMethod(\"clone\").invoke(obj, (Object[])", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "           return new TripChain(Person.Clone());\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nPlease provide the missing code for the Clone method.", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "                   throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "```\nelements.add(new ASN1Boolean(false));\n}\nif (! includeAuthZEntry)\n{\nelements.add(new ASN1Boolean(false));\n}\nif (attributes != null && ! attributes.isEmpty())\n{\n  for (final String attribute : attributes", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "```\n    if not state == 'absent':\n        if publication.exists():\n            changed = True\n            if state == 'present':\n                if not all(table in publication.tables for table in tables):\n                    module.fail_json(msg=\"All tables must be in the", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "```\n        if pseudop.jump_size:\n            stac = self.labels.get(args[0], stac)\n        else:\n            stac = self.stack_count\n        self.stack_count = stac\n        push(Opcode.JUMP", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "           ContactFinder contactFinder = new ContactFinder(serviceProxy);\n            ContactInfo contactInfo = contactFinder.GetContactInformationByPhoneCallId(CallNumber);\n            launchUrl(createUrl(contactInfo.Id, ContactTypes.PhoneCall));\n        }\n    }\n", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tString macroName = value.substring(startIndex, endIndex);\n\t\t\tString macroValue = macroHandler.substituteMacro(macroName);\n\t\t\treturn value.substring(0, start", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "```\n        // Create the group of labels\n        FigTextGroup group = new FigTextGroup();\n        group.setBounds(new Rectangle(10, 10, 100, 20));\n        group.setJustification(FigText.JUSTIFY_", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.Body);\n            serializer(requestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "```\n        nextToken = text.indexOf(\" estimated_rows=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" estimated_rows=\\\" bad string: \"\n                    + text));\n        }\n       ", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "     if (deviceCell.getUserObject() instanceof UnitInfo)\n      {\n         // Create the edge\n         edge = new ProxyToDeviceEdge(proxyCell, deviceCell, cs, attributes);\n      }\n      else\n      {\n         throw new NoSuchPortException(\"No", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "\t\t\t\tresult.append(\"0x{:08x}\".format(ofs))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\t\tcontinue\n\t\t\tresult.append(\"0x{:08x}\".", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher keySizeMatcher = keySizePattern.matcher(constraintEntry);\n                    if (keySizeMatcher.matches()) {\n                        String keySize = keySizeMatcher.group(2);\n                ", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\n\n}", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "```\n                return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n    }\n}\n\n```\n\n```", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\t\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t\t_orderService.UpdateOrder(order);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\torder.OrderStatusId = (int)OrderStatus.", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "```", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "       return self._conf_helper('sp', options)", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "       i21 = i16 + i19;\n        i22 = i18 + i19;\n        i23 = i22 + i19;\n        i24 = i23 + i19;\n        Dcopy.dcopy(i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\treturn \"ok\"", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "self.collection[artist][album].sort(key=lambda x: x.final.track)", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "   if (!success) {\n      throw new RunnerException(I18n.format(\n                                    _(\"Failed to upload sketch to board: {0}\"),\n                                    uploader.getErrorMessage()));\n    }\n    return suggestedClassName;\n  }\n  protected", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "\t\t\t\t\tif (tempValues == null || tempDomains == null || tempValues.length != tempDomains.length) {\n\t\t\t\t\t\tLog.warn(\"Invalid values or domains for plot '\" + name + \"'\");\n\t\t\t\t\t\tcontinue;\n\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// Update the player's name to format text nicely. This needs to be done because Terraria automatically formats messages against our will\n\t\t\t\tstring name = e.PlayerName;\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "```\n\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory flrHistory = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_J", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "```\n            sleep(0.01)\n\n        # Reading data from FIFO\n        data = self.readFIFO()\n        #print('FIFO data = %s' % data)\n        # Waiting for FIFO count > 2\n        while (self.getFI", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "                                   + \"10^\" + i);\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i < 0", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "           c = Workplane().box(1,1,1).faces(\">Z\").workplane().circle(0.25).cutThruAll()\n            c.faces(\">Y\").workplane(-0.5).fillet(0.1)\n        \"\"\"\n        solidRef", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "```\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "        sb.append(d);\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append(d);\n", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "                               if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "```\n                list.Add(1060411, \"Equipped\");\n            }\n            else if (this.m_SetEquipped)\n            {\n                list.Add(1060411, \"Equipped\");\n            }\n            else\n           ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "```\n                .map(pushedAsset -> pushedAsset.getIdentifier())\n                .collect(Collectors.toList());\n        assertEquals(set(htmlPageAsset.getIdentifier()), newBundlePushedAssets);\n    }\n    @Test\n    public void includeTemplateUsingTwoEnvironment", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       modulestore().create_child(\n            parent,\n            parent.location.version_agnostic(),\n            category_queue[0],\n            fields={'display_name': 'Test Subtree'},\n        )\n\n        \"\"\"\n        Create a new node in the course\n        \"\"\"", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "if (info != 1)\n{\nConsole.WriteLine(\"Error: \" + info);\nreturn;\n}\n```\n```", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "           return obj != null && NumberUtils.isNumber(obj);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "           if not replace:\n                return False\n        else:\n            if not isobject:\n                value = eval(value)\n            if not replace:\n                return False\n        return self.write(cr, uid, [res[0]], {'value': value}, context=context)", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "       String contentType = \"text/plain\";\n        String fileName = \"jump.txt\";\n        String filePath = \"sites/mySite/documents/\";\n        String fileId = createFile(content, contentType, fileName, filePath);\n        String myFileLinkId =", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "\t\t\t\tif (_abi_info == null)\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message), new GLib.AbiStruct.CValue [1] {\n\t\t\t\t\t\tnew GLib.AbiStruct.", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "```\n        return encodeBytes( source, off, len, options );\n    }\n```\n}\n\nPlease complete the code given below.", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending(boolean pending) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "           return ValidationError(\n                message=opts.get_field(unique_check[0]).error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # Multiple unique fields\n        else:\n            return ValidationError(\n                message=opts", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "```\n                if (name.toLowerCase().endsWith(\".uml\")) {\n                    name = name.substring(0, name.length() - 5);\n                }\n                return new File(theFile.getPath() + \"/\" + name);\n            }\n        }", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "\t\t\t\tif (q[0].Equals(One))\n\t\t\t\t\treturn u3;\n\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tif (v3.Equals(Zero))\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "```\n        cell_attributes = convert(cas_data_str)\n        for cell_attribute in cell_attributes:\n            model.set_cell_attributes(row, column, table, cell_attribute)\n```", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsSearchable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsSys", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "           for key, value in sorted(paramtestdic.iteritems()):\n                paramout.write(\"%-3s \\t %.4f\\n\" % (key,value))\n            paramout.close()\n```\nThis code is a script for running optimization of radii and gamma", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "data.PowerType[i] = packet.ReadInt32(\"PowerType\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 2; ++i)", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "```\n                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (x < width - width / 8) {\n\t\t\t\t\t\tcursor_bits [y * width / 8 + x / 8] = (Byte", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "```\n        int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight  - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        int width = Math.min(availableWidth, prefWidth);\n        int x = 0", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "```\n            return rrule.rrule(rule_str, dtstart=date_start)\n        elif rule._freq == 4:\n            return rrule.rrule(rule_str, dtstart=date_start)\n        elif rule._freq == 3:\n", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "   for i in range(20):\n        h = h[:i] + inpart.read(20 - i - len(h))\n        heads.append(h)\n    return h\ndef unbundle(repo, inpart, op, pushback=False):\n    \"\"\"", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "       for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim -", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "```\npMem1.z == pMem2.z || pMem1.zBLOB == pMem2.zBLOB );\n        if ( pMem1.z == pMem2.z )\n        {\n          int rc = sqlite3StrICmp( pMem1", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "\t\t\t\tOwner.SendMessage(\"You have been rewarded for completing the quest.\");\n\t\t\t}\n\t\t}\n\t\tpublic void CheckCanSeeReward()\n\t\t{\n\t\t\tif (!this.Deleted && AutoReward && IsCompleted &&", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "```\n\t\t\tDateTime minTimeStart=dateStart.AddMinutes(-apptLengthMins);\n\t\t\tDateTime maxTimeStart=dateStart.AddMinutes(apptLengthMins);\n\t\t\tDateTime minTimeStop=dateEnd.AddMinutes(-apptLength", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n                int[] row = dic.GetAsArray(PdfName.IMAGE);\n                if (row == null || row.Length == 0)\n                    return fout.ToArray();\n                for (int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 16);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"\\\"The only way to do great work is to love what you do. If you haven", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "```python\nclass Ehdr(CStruct):\n    _fields = [ (\"ident\",\"16s\"),\n                (\"type\",\"u16\"),\n                (\"machine\",\"u16\"),\n                (\"version\",\"u32\"),\n                (\"entry\",\"ptr\"),\n                (\"phoff\",\"", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "           Index[] memberIndices = indexByTagAndClass[tag];\n            if (memberIndices == null) {\n                memberIndices = new Index[classRef.getMembers().length];\n                indexByTagAndClass[tag] = memberIndices;\n            }\n           ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return (0 <= firstItemIndex && firstItemIndex <= lastItemIndex && items[firstItemIndex].", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "```\n                        AnalAttribRow AnalAttribRow = (AnalAttribRow)rv.Row;\n                        AnalAttribAccess.LoadByPrimaryKey(MainDs, AnalAttribRow.AnalAttribId, ReadTransaction);\n                    }\n                }\n                // Now", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. d4 d5 2. Nf3\";\n\t", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "     get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    // Fields\n    private global::bnet.protocol.exchange_object_provider.NotificationExtraInfo notification_extra", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "```\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>Commands</h1>\");\n                html.WriteLine(\"      <table cellpadding=\\\"", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tvar result = new ArrayList();\n\t\t\tvar set = new Hashtable();\n\t\t\tforeach (var item in target)\n\t\t\t{\n\t\t\t\tif (!set.ContainsKey(item))\n\t\t\t\t{\n\t\t\t\t\tresult", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "       if request.method == 'POST':\n            # ...\n```\nThe code seems to be incomplete and has syntax errors. Can you please provide the complete code so that I can debug it?", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               AControl.Dock = DockStyle.Fill;\n                AControl.Location = new Point(0, NextControlVPos);\n                NextControlVPos += AControl.Height + ARGUMENT_PANEL_BOTTOM_BORDER;\n                ArgumentPanel.", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "```\n    catch(final Exception e)\n    {\n      return null;\n    }\n  }\n  \n  /**\n   * Get the 'feature stack view' line number for a feature.\n   * @param thisCDSFeature\n   * @param parentId\n   * @", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "```python\n        return self.__class__(values, key=self._key)\n```", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "```\nif p == np.inf or p == 1:\n    return minkowski_distance(x, y, p)\nelse:\n    return minkowski_distance(x, y, p) ** (1. / p)\n```\nThe code is trying to compute the", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tif(mAltWriteMethod)\n\t\t\t\tHIDImports.HidD_Receive(this.mHandle", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "```\n            }\n            if (rows.Count < lTotalRows) {\n                rows.Add(new Row());\n            }\n            if (columns < lTotalColumns) {\n                columns = lTotalColumns;\n            }\n            for (j=0; j < columns; j", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "```\n        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\t\t\t\t\t\t\t\t// Update the linedef's sidedefs\n\t\t\t\t\t\t\t\tld.Sidedefs = new List<Sidedef>();\n\t\t\t\t\t\t\t\tforeach(Sidedef s in newsector.S", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "```python\n        if self.autoflush:\n            self._autoflush()\n```", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "\t\t\t\t\tm_arSpellDefense.Add(reader.ReadString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_bControlled = reader.ReadBool();\n", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "```\n                iFile.close();\n            }\n        }\n    }\n    private final void deleteEntries (final ArrayList<InputObjectState> objectStates, final ArrayList<InputObjectState> deletedLogs)\n    {\n        for (int i = 0; i < object", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "```\n            return JsonConvert.SerializeObject(result, Formatting.Indented);\n        }\n        private string RemoveNoLogValues(IDictionary<string, object> dict, HashSet<string> noLogValues)\n        {\n            foreach (string key in noLogValues)\n", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_MAP\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 2", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchMotion( Object unityObject )\n\t\t{\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "```\n                            m_From.SendLocalizedMessage(1060652, newHouse.Name); // You have successfully placed your house.\n                            m_From.SendGump(new HousePlacementGump(m_Tool, m_From, newHouse", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tList<P>\n\tgetPointsSortedAlphabeticaly( final Iterable<P>\tpts\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "                       Push(CheckActorHit(args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                   else if (this.RequiredRace == Race.Dwarf)\n                        from.SendLocalizedMessage(1072204); // Only Dwarves may use this.\n                    else if (this.RequiredRace == Race.Halfling)\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr]", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\t\tplot = new Plot(imp, this);\n\t\tplot.setFrameSize(100, 100);\n\t\tplot.setLimits(0, 100, 0, 100);\n\t\tplot.setColor(Color.", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "```\n                });\n            #endregion Jhin\n            #region Karthus\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Karthus\",\n                    SpellName = \"KarthusQ\",\n                    Slot =", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "\t\t\tif (blockRandomised) {\n\t\t\t\tblock = new byte[last + 1];\n\t\t\t\tblockRandomised = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvoid MainSort() \n\t\t{\n\t\t\t", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "```\n        try:\n            shared_memory = int(open(filename).read())\n        except (IOError, ValueError):\n            logging.error(\"Could not read shared memory info from %s\", filename)\n            return None\n        return shared_memory\n```", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "```\nif creating:\n    # make sure the file has the correct permissions\n    # based on the current value of umask\n    os.chmod(dest, 0o644)\n```", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "```\n        return encodeBytesToBytes(source, 0, source.length, NO_OPTIONS);\n    }\n\n    /**\n     * Similar to {@link #encodeBytes(byte[])} but returns\n     * a byte array instead of instantiating a String. This is more efficient\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "```\n        'types': ('general-music', 'post-event', 'event', 'articulation-event', 'script-event',),\n    },\n```\n}", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t\"    Function Something(ByVal value1 As Object, ByVal value2 As Object, ByRef index As Integer, ByRef count As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n\t\t}\n\t\t[", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "```\n    if args.exclude_folders:\n        # Exclude folders from the delta sync\n        exclude_folders = args.exclude_folders.split(',')\n        for folder in exclude_folders:\n            if folder.startswith('.'):\n                # Ex", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "       if (lastScanOffset > data.length)\n        {\n            // integer overflow\n            throw new RasterFormatException(\"Data buffer is too small\");\n        }\n    }\n    /**\n     * Returns the band offset for use by native code.\n     */\n    public int get", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "```\n        help=\"The price of the product or service per unit.\")\n    discount = fields.Float(string='Discount', digits=(16, 2),\n        help=\"The discount applied to the product or service.\")\n    invoice_line_tax_id = fields.", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "                   widgetName = widgetName.replace(\"$\", \"\")\n                    self.getControl(211).setLabel(widgetName)\n                    self.getControl(211).setLabel(widgetName)\n                    self.getControl(211).setLabel(", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "\t\t\t\t.Append (Text)\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Returns a new instance of the <see cref=\"UserTextInformationFrame\" />\n\t\t///    class with the specified text.", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "       system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.removeCustomValues(self.session,\n                                              system_id,\n                                              keys)\n####################\ndef help_system", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "```\n                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n\n    /**\n     * Helper method that updates the node, bringing it into the current transaction with\n     * the appropriate <b>cm:auditable</b> and transaction behaviour", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "\t\t\t\t\tSelected (Menus [selected].Children [Menus [selected].Current]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n        }\n    }\n}", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "```\n        if clear:\n            self.clear_data(variables, io)\n        if gather:\n            self.populations[0].record(variables, io, self._record_filter)\n        else:\n            for p in self.populations[1:]:\n                p", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "```\n        for ts in ts:\n            ts.start()\n        for ts in ts:\n            ts.join()\n    else:\n        for recid in recs_queue:\n            insert_queue.put_nowait(recid)\n            correct_queue.put_", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "```\n    def __str__(self):\n        return f\"{self.user.username} - {self.course.name}\"\n\n    class Meta:\n        app_label = 'django_comment_client'\n        db_table = 'course_enrollment'\n        ordering", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "                       &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearchadmin.py", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "```\n      if (mainAxis == CSS_FLEX_DIRECTION_COLUMN) {\n        // Determine the cross-axis dimension.\n        if (itemsOnLine > 1) {\n          crossDim = availableInnerCrossDim;\n        } else {\n         ", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "```\n                });\n            #endregion\n        }\n    }\n}\n```\nPlease add the following lines of code to the end of the `SpellDatabase` class:\n```csharp\n    public static List<SpellData> Spells = new List<SpellData>();\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "               chr.Colliding = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n                // since we don't know if we're colliding yet\n                prim.Colliding = false;\n           ", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "           inputSlice, masterNum, masterValidPermanence, masterValidConnected)\n```", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\t\t\t\tif (c == '\\\\' && !quoted) {\n\t\t\t\t\tint surrogate;\n\t\t\t\t\tc = escape (c, out surrogate);\n\t\t\t\t\tif (c == -1)\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               return -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a numeric negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression negate(Object operand) {\n        return negate", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "       return contains;\n    }\n    /**\n     * Returns the scrollable region of the component.  This method returns a\n     * Rectangle object that defines the area of the component that can be scrolled.\n     * \n     * @return the scrollable region of the component\n    ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "```\ndef _get_params(self):\n    \"\"\"Returns a dictionary of parameters to be passed to the webservice.\"\"\"\n    params = {}\n    if self.username:\n        params[\"user\"] = self.username\n    if self.password_hash:\n        params[\"password", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"Title\", pane.Title.ToString());\n            xmlWriter.WriteAttributeString(\"IsVisible\", XmlConvert.ToString(pane.IsVisible));\n            xmlWriter.Write", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "```\n\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tforeach ( YAxis yAxis in _y2AxisList )\n\t\t\t{", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "```\n\t\t\tspecial.get(6).add(\"Expertise\");\n\t\t\tspecial.get(10).add(\"Favored Enemy: Giant\");\n\t\t\tspecial.get(13).add(\"Favored Enemy: Construct\");\n\t\t", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "       check_nodes = [self.new_node_uuid, self.other_node_uuid,\n                       self.instance.primary_node]\n    if not self.disks:\n      raise errors.OpPrereqError(\"Instance %s has no faulty disks\" %", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "                           desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                        if field[0] == '*':\n                           ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "```\ndef __init__(self, recipeSet, recipe, **kwargs):\n    self.__recipeSet = recipeSet\n    self.__recipe = recipe\n    self.__properties = recipe.get(\"properties\", {})\n    self.__corePackagesByMatch = {}", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeToObject\n    /**\n     * Encodes a Java object to a Base64-encoded string", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                           int n2 = ((y + r) * image_width) + x;\n                            if (bmp_mono[n1] == bmp_mono[n2])\n                            {\n                                hits1++;\n                            }\n                        }\n                   ", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "               Delta(MobileDelta.Noto);\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public OrderType SummonOrder\n        {\n            get { return m_SummonOrder; }\n            set\n            {\n                m_SummonOrder", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                  is_const=True, is_virtual=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase const * object, const ns3::AttributeValue & attribute) [member function", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "       \"\"\"\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.StopPreviewTimer()\n        self.RefreshOverflowState()\n    def OnDropdown(self, event):\n        \"\"\"\nNext line of code:\n        \"\"\"\n", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "\t\tRowMetaInterface fieldsToAlter = new RowMeta();\n\t\tfor (int i=0;i<fields.size();i++)\n\t\t{\n\t\t\tValueMetaInterface v = fields.getValueMeta(i);\n\t\t\tfieldsToAlter.addValueMeta", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "       if vmap:\n            if hasDescription(vmap):\n                complt += \"    \\\"{0}\\\"\\n\".format(vmap['optDesc'])\n            if isBoolean(vmap, 'value'):\n                complt += \"    \\\"{0} {1}\\\"\\n", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           globals['__path__'] = _find_spec(package, package)\n    return package\ndef _import_module(name, package=None, level=0):\n    \"\"\"Import a module and return it.\n    This is the function that is called by importlib.import_", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "```\nif e.nodeType == minidom.ELEMENT_NODE:\n    if e.localName == \"layout\":\n        self.layoutNode = e\n        break\n```", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "```\n      raise Exception('No headers phase found')\n```", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "```\n\tprotected override int QuestId { get { return 519436; } }\n```\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(21.0) - 13.0;\n\t\t\t break;\n\t\t case 11:\n\t\t\t z = new double[1];\n\t\t\t", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "               if (body.get(0) instanceof Node.TemplateText) {\n                    templateTextOptimization = true;\n                }\n            }\n            if (templateTextOptimization) {\n                // Generate code to push the body count and then call the\n                // named attribute", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": " [ \"%(componentType)s\" = \"agent\" ] && renice 20 -p $$\n  #%(bashVariables)s\n  #\nexec python $DIRAC/DIRAC/Core/scripts/dirac-%(componentType)s.py %(system)", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "       if cdata is not None:\n            if cdata[0] == 0:\n                return\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setCustomParameter(string name, float value)\n        {\n            return FMOD_EventCategory_SetCustomParameter(eventcategoryraw, name, value);\n        }\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                if (methodGroup.Methods.Length == 0)\n                {\n                    Error(diagnostics, ErrorCode.ERR_NoMethod, syntax, methodGroup.ContainingSymbol.Name);\n                }\n                else if (method", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "```\n        for (int i = 0; i < libs.size(); i++) {\n            NativeLibrary lib = libs.elementAt(i);\n            if (lib.name.equals(name) && lib.isBuiltin == isBuiltin) {\n                return", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "```\nif os.path.exists(md_file_path) is False:\n    raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n```", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "               return new BigInteger(1);\n            else\n                return new BigInteger(numBits);\n        }\n        //***********************************************************************\n        // Returns the number of bits in the BigInteger.\n        //***********************************************************************\n        public int bitCount()\n", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "```\n    if url:\n        response = remote_instance.fetch(url)\n        if response.status_code == 200:\n            data = response.json()\n            if sort:\n                df = pd.DataFrame(data['nodes'], columns=['node_id',", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "```\nwhile (!successful && retryCount > 0) {\n    try {\n        successful = mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, fileEditable, datafilePath,\n                              retryCount - 1);\n   ", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "               if not self.__IsToken( \"}\"):\n                    raise Warning(\"expected '}' At Line \", self.FileName, self.CurrentLineNumber)\n                FvImageSectionObj.Fv = FvObj\n                FvImageSectionObj.FvName = None\n                \n           ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "\t\t\t\tcase Msg.WM\\_PAINT:\n\t\t\t\t\tOnPaint (new PaintEventArgs (e.Graphics, e.ClipRect, e.Bounds, e.State));\n\t\t\t\t\treturn PreProcessControlState.Paint;\n\t\t\t}\n", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "```\n    if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "```\n          pMem.n = sqlite3Strlen30(z);\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       BeginBatchUndo(self)\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\nNext line of code:\n        EndBatchUndo(self)\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "           search_reg_str = re.compile(search_terms, flags)\n        return self.find_from_regex(self._index_dict.value_intersect,\n                                    search_reg_str, strongs, morph)\n    def find_from_regex(", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               }\n            }\n        }\n    }\n}", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "           state.s1 = s0;\n            state.s2 = s1;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  seed  value  which  comes  from  standard\n        RNG.\n          -- ALG", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "       m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        List<Map<String, Object>> list = m.execute(params);\n        for (Map<String, Object> map : list) {\n            Long cid = (Long", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "                       if (j == 1) {\n                            phaseOneLength = exponent.length();\n                        } else {\n                            if (--phaseOneLength == 0) {\n                                phase = 2;\n                                affix = suffix;\n                            }\n                           ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the state of the receiver.\n * <p>\n * The state of the receiver is a combination of the following flags:\n * <ul>\n * <li>SWT.NORMAL - the receiver is in its", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                       diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ChecksumDuplicate, guid, path, existingDoc.SourceHash, checkSumText), NoLocation.Singleton);\n                    }\n                }\n                else\n                {\n                    // p", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "```\n        group.add_option(\"--exclude\", dest=\"exclude\", metavar='[package]',\n                        help=_(\"exclude packages matching the given pattern\"))\n        group.add_option(\"--include\", dest=\"include\", metavar='[package]',", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "```\n    if state == 'absent':\n        if module.params['force']:\n            ret = vms_module.action(\n                action='delete',\n                action_condition=lambda vm: vm.status != otypes.VmStatus.DOWN,\n                wait_", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "```\n                    raise ParseException(\"Invalid dictionary expression: \" + str(dictvalue))\n                tokenlist[ikey] = dictvalue\n        return tokenlist\nclass QuotedString(TokenConverter):\n    \"\"\"Converter to handle quoted strings.\n       The quoted string is matched as a single token", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            pid = json_data['pid']\n            orcid = json_data['orcid']\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "```\n        option_value = json_d.get('option', '')\n        if not isinstance(json_d, basestring):\n            option_value = ''\n        return {'comment': comment_value, 'option': option_value}\n```", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "```\n                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "```\n        int[] allowedIfds = new int[ifdFlags];\n        for (int i = 0; i < ifdFlags; i++) {\n            allowedIfds[i] = (IfdId.TYPE_IFD_0 << 24) | (ifds", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "```\n        return {\n            'account_id': acc_src,\n            'journal_id': journal_id,\n            'account_id': acc_dest,\n            'line_id': [(0, 0, {\n                'account_id': acc_dest,", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\n\t\t\treturn GetName (metadata_name);\n\t\t}\n\t\tpublic static OpType GetOperatorType (string metadata_name)", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "                   while self.tok[0] != ')' and self.tok[0] != ',' and self.tok[0] != ';':\n                        if self.tok[0] == 'TYPE':\n                            params.append(self.tok[1])\n                            self.", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "     return JavaCore.create(fileName);\n    }\n  }\n  public static IPackageFragmentRoot getPackageFragmentRoot(char[] fileName) {\n    return JavaCore.create(fileName);\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName) {\n   ", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "```\n```", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "```\n        if pinfo['orcid']['import_pubs']:\n            orcid_data['papers_to_autoclaim'] = papers_to_autoclaim\n        else:\n            orcid_data['papers_to_autoclaim'] = []\n       ", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "```\n                return dim_coord_subset()\n            else:\n                return [slice(None)]\n        else:\n            return [coord.copy()]\n    def summary(self, shorten=False):\n        \"\"\"\n        Returns a summary of the cubes in this list", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "   if matched_zero:\n      return False\n    # Don't warn on function pointers with no arguments.\n    if Match(r'^\\s*\\((.*)\\)', remainder):\n      return False\n    # Don't warn on function pointers with a single argument.\n    if Match(", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "   Returns\n    -------\n    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the\n        adjusted dates that fall on valid days.\n    Examples\n    --------\n    >>> # The weekdays are Friday, Saturday,", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "```\n        if len(arrayObjectMemberTypes) > 0:\n            arrayObject = CGList(CGGeneric(\"Ok(Some(value.as_slice()))\") for value in arrayObjectMemberTypes)\n        else:\n            arrayObject = None\n\n        structObjectMemberTypes = filter", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "```\n                int margin = a.getDimensionPixelSize(R.styleable.ViewGroup_MarginLayout_layout_margin, 0);\n                setMargins(margin, margin, margin, margin);\n            } finally {\n                a.recycle();\n            }\n", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "           c = new double[m+n-1];\n            i1 = (m-1) - (0);\n            for(i_=0; i_<=n-1;i_++)\n            {\n                c[i_] = b[i_+i1];\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "```\n        user.email_settings.set(course_id=course_key, receive_emails=receive_emails)\n        user.email_settings.save()\n        return JsonResponse({\"success\": True})\n    else:\n        user.email_settings.delete", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            if url:\n                # We have a url, so we can proceed with the rest of the process\n                # We need to check if the url is a valid url\n                if not check_valid_url", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "```", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        data[dataIndex][j] = new int[windowSize - 1];\n      }\n      for (int j = 0; j < dsize; j++) {\n        int labelIndex = j", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "drawImage(bImg, op, x, y, null);\n}\n}", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "               if lhs not in raw:\n                    raw[lhs] = rhs\n                else:\n                    raw[lhs] += \" \" + rhs\n            else:\n                if adding:\n                    raw[lhs] = rhs\n                else:\n                    raw[l", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "       self._initialized = True\n```", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "           \"\\x1FED\\x1FE6\", /* 1FED; 1FE6; Case map */\n        }\n    }\n}\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line)\n                else:\n                    self.state.update({\"log\": line}, commit=False)\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "```\n        g = np.dot(N_k[self.states_with_samples], f_k)\n        g = g[np.nonzero(g)]\n        return g\n```", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "```\n            for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "```\n            if token_type == tokenize.NEWLINE:\n                logical.append(text)\n                previous = (text, end)\n            else:\n                previous = (text, end)\n            logical.append(text)\n        return \"\\n\".join(logical)\n", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "\n        return _connectionId;\n    }", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                   return fn(*arg, **kw)\n        else:\n            def wrap(*arg, **kw):\n                return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.AccountDetails_Characters, m_ListPage, m_List, results, notice ) );\n\t\t\t\t\t\t\tbreak;", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "```\n            if aggregator.supports_weighting(weights):\n                aggregator.aggregate(new_cube, weights=weights)\n        return new_cube\n    def rolling_window(self, window, aggregator=None, aggregation_function=None,", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "       internal uint index; // (type index) index of type record for method\n        /// <summary>\n        /// </summary>\n        internal string name; // length prefixed name of method\n        /// <summary>\n        /// </summary>\n        internal byte[] offset; // variable length offset", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "       if expression is None:\n            return None\n        elif isinstance(expression, types.CodeType):\n            return self.run(expression, locals)\n        elif isinstance(expression, types.StringType):\n            return self.run(self.compile(expression), locals)", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "```\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".\" + PPersonTable.PartnerKeyColumn);\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".\" + PPersonTable.", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(returnType,\n                                                             OperatorFacts.BinaryOperatorNameFromOperatorKind(op),\n                                                             returnType,\n                                                             returnType,\n                                                             isChecked);\n            }\n            return", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "```python\n    return (0, 'Access granted')\n```", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "result = self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\nresult = self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\nresult = self._concat_objects(keys,", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           if (extensions.Contains(\"GL_EXT_texture_sRGB\"))\n                supportsSRGB = true;\n            else if (extensions.Contains(\"GL_EXT_texture_float\"))\n                R16Formats = _KTX_R16_FORMATS_SN", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```\n        final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final Data", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "```python\n        d = self.shell.stat(('ned',), ('size',))\n        def cb(res):\n            self.assertEqual(res[0], 0)\n            self.assertTrue(res[1])\n        d.addCallback(cb)\n        return", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "               }\n                if (ch == -1)\n                    break;\n                ch = peek();\n            }\n        }\n    }\n    /**\n     * Reads the next character from the input stream and returns it.\n     */\n    private int next() {\n        int", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "```\n            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n    }\n    private final EventListener eventListener;\n    private final long enabledOnToolkitMask;\n    private final int calls[];\n   ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "           if (result == RESULT.OK)\n            {\n                result = FMOD_Sound_GetInfo(soundraw, ref exinfo, ref sound);\n            }\n            else\n            {\n                FMOD_Sound_Close(soundraw);\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "```\n                if( b < 0 ) {\n                    return -1;\n                }\n                dest[ off + i ] = (byte)b;\n            }\n            return i;\n        }\n```\n}", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "\t\tif (gfp.write_id3tag_automatic) {\n\t\t\tid3.id3tag\\_write\\_v1(gfp);\n\t\t}\n\t\treturn ret;\n\t}", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "```python\n        return skeleton\n```", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
{"pred": "               tbl_ix = (data[base] & 255) - 16;\n                if (tbl_ix < 0 || tbl_ix >= ac_ix.length)\n                    throw new IOException(\"Invalid AC table index: \" + tbl_ix);\n```", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "               if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            AVer", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\t\t\tprimerak.setBroj(Integer.parseInt(brojPrimTxtFld.getText()));\n\t\t\tprimerak.setPreostalo(Integer.parseInt(preostaloTxtFld.getText()));\n\t\t\traspodelaTableModel.addPr", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "plt.show()", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "\t\t\tfloat aspectRatio = w / h;\n\t\t\tfloat newWidth = 0;\n\t\t\tfloat newHeight = 0;\n\t\t\tif (aspectRatio > 1) {\n\t\t\t\tnewWidth = 2 * newHeight / aspect", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "                SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\taliases.Add (\"cp949\", \"cp949\");\n\t}\n}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "       List<String> mustStatusNames = new LinkedList<String>();\n        Iterator<PresenceStatus> mustStatusSetIter =\n            operationSetPresence1.getMustStatusSet();\n        while (mustStatusSetIter.hasNext())\n        {\n            mustStatusNames.", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "       sendBean(\"A\", null, null);\n}", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "```\n    if class_name == '':\n        return class_contents\n    else:\n        return p.CharClass(class_name, class_contents)\n```", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "hasUpdate.setSelected(isUpdate);\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "```\n                tree.setSelection(item);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        // TODO: Implement this method\n    }\n    private void setActivePropertyPage(PropertyPage page) {\n        activePropertyPage = page", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "```\n            self.__repeat = (delay, interval)\n        elif delay is not None and self.__repeat[1] is not None:\n            self.__repeat = (min(delay, self.__repeat[1]), self.__repeat[1])\n        elif interval is not None and self.__repeat", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "```\n        if self.param_type == INTERFACE_FULL_NAME:\n            self.init_interface_data(self.interface)\n            self.get_interface_info()\n            if is_ethernet_port(self.interface):\n                self.get", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the wavemeter\n        self._wavemeterdll.Operation(self._cCtrlStop) #stops measurement\n       ", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "```\n    wptlogging.setup(logger, level=logging.DEBUG,\n                    handlers=[log_file_handler,\n                              console_handler,\n                              captured_output_handler,\n                              logged_critical])\n```", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\t\t\tthis.ResumeLayout(false);\n\t\t\t// \n\t\t\t// _visibleCheckBox\n\t\t\t// \n\t\t\tthis._visibleCheckBox.AutoSize = true;\n\t\t\tthis._visibleCheckBox.Location = new System.Drawing.Point(1", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "                           await cmd.ExecuteAsync();\n                        }\n                    });\n                }\n            }\n            poll.Options = options;\n            poll.Start();\n            return true;\n        }\n        private async Task<bool> CreateSingleMapPoll()\n        {\n            var", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\tthrow new Exception (String.Format (CultureInfo.InvariantCulture, \"Assembly '{0}' not found.\", name));\n\t\t\t\t}\n\t\t\t\tif (assembly == null)", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "   return s.matches(\"\\\\d+\"); // $NON-NLS-1$\n  }\n}", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 9);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSetting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Settings.GlobalSettings.Deserialize(node.Value);\n\t\t\t\t\t\t\t\torder", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "   observations, translations_dict = filterObservationsTranslations()\n\ndef writeMediaJSON(mediafeatures):\n    \"\"\"\n    Write media JSON file, with media features.\n    \"\"\"\n    # write media features to JSON file\n    with open(OutFileNames.media) as", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "```\n                            sead_partnn_l = findPath(nodemap, c_sead, start, stop, hub_threshld, true, colpseHubs, blok_superErode_neighbors);\n                        }\n                        if (sead", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member ending an auction\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "```python\n        ]\n        for name, expected in zip(names, names):\n            result = parse_tables.clean_name(name)\n            assert result == expected\n```", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "           if m.lat > 0 and m.lat < max_relalt_mm:\n                self.progress(\"Takeoff initiated\")\n                self.set_rc(3, 1700)\n                self.set_rc(8, 2000)\n", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "```\nbody += FULLCLEAR\n\nbody += Html(\"div\", class_=\"content\", id='footer')\nbody += Html(\"div\", class_=\"content\", id='copyright')\nbody += Html(\"div\", class_=\"content\", id='navigation')\nbody += Html(\"", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "       return logging.Logger.makeRecord(self, name, level, fn, lno, msg, args, exc_info, func, **kwargs)\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.DEBUG)\n    logging.getLogger", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "           key_func = lambda x: x[sort[0]]\n            sort_order = ModuleStoreEnum.SortOrder[sort[1]]\n        all_assets = SortedAssetList(iterable=[])\n        # Assets should be pre-sorted, so add them efficiently without sorting.", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "opiRuntimeDelegate.setOPIInput(input, persist);\n}\n}\n\nPlease provide the missing code.", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "```\n            if (e.isPopupTrigger()) {\n                if (launcher != null) {\n                    launcher.show(e.getComponent(), e.getX(), e.getY());\n                }\n            }\n        }\n    }\n}\n```\nThis", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "```\n        - {key: use_tty, section: ssh_connection}\n        type: bool\n        vars:\n          - name: ansible_ssh_use_tty\n            version_added: '2.7'\n\n      use_system_host_keys:\n        default", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "```\n    path2 = os.path.join(parentpath, os.path.relpath(path, parentpath))\n    return unionrepository(ui, path2, path)\n```", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "               index = -1;\n            }\n            object IEnumerator.Current => Current;\n            public bool MoveNext()\n            {\n                index++;\n                if (index < 0 || index >= list.Count)\n                {\n                    index = -1;\n                    return", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "               lambda pkt: pkt.commandId == 0x0070),\n                # Send Unit Data\n                (PacketField(\"commandSpecificData\", ENIPSendUnitData,\n                             ENIPSendUnitData),\n                 lambda pkt: pkt.commandId ==", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "```\n            return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n```", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "           for field in model._meta.fields:\n                fields[field.name] = getattr(model, field.name)\n            for attr in data.keys():\n                if attr not in fields:\n                    extra_attrs[attr] = data[attr]\n            if extra", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "\t\tfor(int x = 0; x < DataCollection.count(); x++)\n\t\t{\n\t\t\tWardlistData currentData = DataCollection.get(x);\n\t\t\tdataString += encodeNASMessage(currentData);\n\t\t}\n\t\treturn", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                }\n                if (house != null)\n                ", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "```\nreader.read(reader.getDefaultBounds(), null);\n```\n}", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(0);\n        assertEquals(NCOL", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "```\n            record_add_field(rec, '250', subfields=[('p', page_count)])\n        if publisher:\n            record_add_field(rec, '046', subfields=[('p', publisher)])\n        if collection:\n", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "\t\t\t\t    if (down)\n\t\t\t\t\t    Program.keyH_ENT = (Program.keyH_ENT & (~4));\n\t\t\t\t    else\n\t\t\t\t\t    if (SYMB)\n\t\t\t\t\t\t    Program.", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "\t\t\t\t\tConsole.WriteLine(\"Display Set Name: {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "```\n            ((Creature) e).setTame(true);\n        }\n        \n        return e;\n    }\n    \n    public enum WaveUtils {\n        // ...\n    }\n}", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\tMemoryStream ms = new MemoryStream(bin.BaseStream.ToArray());\n\t\t\tBinaryReader bin = new BinaryReader(ms);\n\t\t\tint[] lookups = new int[height];\n\t\t\tint start = (int)ms.Position + ( height *", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "```\n            Player opponentPlayer = opponent.getValue();\n            tableStrengthScore.getPlayer().getId().equals(opponentPlayer.getId())) {\n                tableStrengthScore.getScore().add(opponentPlayer.getScore());\n            }\n        }\n", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   \"\"\"\n    Find the appropriate :class:`TimestampFile` class to read a file.\n    \"\"\"\n    for ext in supported_extensions():\n        if fname.endswith(ext):\n            return ext\n    raise IOError(\"Unsupported file format\")\ndef main():\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "```\n        out_list += [weights_dmat_all[index]]\n        out_comment += ['Weight of the distortion matrix']\n        out_units += ['']\n    out_list = np.array(out_list)\n    out_comment = np.", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn.depth = graphNodes.size();\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "```python\n    if isinstance(obj, bytes) and obj.startswith(b'\\xef\\xbb\\xbf'):\n        obj = obj[3:]\n```", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "```\n            res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n```", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\tif (orig == null || !orig.exists() || orig.length() == 0)\n\t\t\treturn;\n\t\tString newUuid = mDbHelper.getBookUuid(newId);\n\t\tcopyFileToCoverImageIfMissing(orig, new", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "```\n            nsClientService = mLocalBinder.getService();\n        }\n    };\n    private void addToLog(EventNSClientNewLog event) {\n        listLog.add(event);\n        if (listLog.size() > 100) {\n           ", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "os.chdir(ssl_dir)", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n    module = AnsibleModule(argument_spec=fields, supports_check_mode=True)\n    # This is where data is defined and passed to the module\n    data = {\n        'host': '192.168.122.40',\n       ", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "\t\t\t\tAddRes( index, typeof( Moonstone ), 1032698, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Exp", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "```\n    if (node.isLeaf()) {\n      this.isLeaf = true;\n    }\n  }\n```", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "```python\n        assert options == [\"--help\", \"-h\", \"--version\", \"-V\", \"-v\", \"--convert\", \"-c\", \"--convert-store\", \"-o\", \"--convert-template\", \"-t\", \"--prop2po\", \"-p\"]\n```", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic new void Initialize (IntPtr ifaceptr, IntPtr data)\");\n\t\t\tsw.WriteLine (\"\\t\\t{\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t{0}native_iface = Marsh", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "```\n        if (kind == null) {\n            throw new IllegalArgumentException(\"Invalid Javacc kind: \" + javaccKind);\n        }\n        return kind;\n    }\n}\n```\nPlease complete the code given below.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentageControl()", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "           HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n        }\n    }\n}", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Title, c => c.Title.ToUpper().FirstOrDefault())\n                .OrderBy(g => g.Key)\n                .Select(g => childFactory(query.Parent, g.Key, \"virtual-group", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "       soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n```\n\n```\n        response =", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "return \"ImageIcon[filename=\" + filename + \", description=\" + description + \"]\";\n}\n}", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "```\n                AlertDialog alert = new AlertDialog(this);\n                alert.setTitle(MSGS.confirmDelete());\n                alert.setMessage(MSGS.confirmDeleteDescription(selected.getKeystoreName()));\n                alert.setConfirmButtonText(MSGS.confirmButtonText", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "```\n            url = '%s://%s.s3.amazonaws.com/%s?%s' % (method, host, path, query_args)\n        else:\n            url = '%s://%s.s3.amazonaws.com/%s' % (method,", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getBitmap(), left, top, right - left, bottom - top);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(int i = ", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn traceSequence != null && !traceSequence.isEmpty();\n\t\t}\n\t\treturn super.e", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin_obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Public Class SomeClass{0}\" +\n\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As S)(){0}\" +\n\t\t\t\t\"", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "           if os.access(self.file + os.extsep + ext, os.F_OK):\n                list.append(self.file + os.extsep + ext)\n        return list\nclass FileContainer(Container):\n    def __init__(self, file, namespace, **", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       of log(sigmoid(x))\n        This is why we need the pre-sigmoid activation as input.\n        \"\"\"\n        # compute reconstruction cost\n        reconstruction_cost = T.mean(T.sum(T.log(T.exp(pre_sigm", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "\t\tList<Event> events = new ArrayList<Event>();\n\t\tInterfaceUpdater ifaceUpdater = new InterfaceUpdater(db, imported);\n\t\tSnmpInterfaceUpdater snmpUpdater = new SnmpInterfaceUpdater(db, imported);", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object obj) {\n        try {\n            return obj.getClass().getMethod(\"clone\").invoke(obj, (Object[])", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "```\n    return AnsibleModule(argument_spec=fields,\n                         supports_check_mode=True).run()\n\nif __name__ == '__main__':\n    main()\n```", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           exc = checksums.get(block=False)\n            if exc:\n                break\n        assert exc[0] == ( \"foo-0\", expected_checksum )\n    except Queue.Empty:\n        assert False # no files uploaded\n@with_setup(util.", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "           return new TripChain(Person.Clone());\n        }\n        #endregion ITripChain Members\n    }\n}\n```\nPlease provide the missing code for the Clone method.", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "                   throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "```\n    if not state == 'absent':\n        if publication.exists():\n            changed = True\n            if state == 'present':\n                if not all(table in publication.tables for table in tables):\n                    module.fail_json(msg=\"All tables must be in the", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "```\n        if pseudop.jump_size:\n            stac = self.labels.get(args[0], stac)\n        else:\n            stac = self.stack_count\n        self.stack_count = stac\n        push(Opcode.JUMP", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "```\nelements.add(new ASN1Boolean(false));\n}\nif (! includeAuthZEntry)\n{\nelements.add(new ASN1Boolean(false));\n}\nif (attributes != null && ! attributes.isEmpty())\n{\n  for (final String attribute : attributes", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tString macroName = value.substring(startIndex, endIndex);\n\t\t\tString macroValue = macroHandler.substituteMacro(macroName);\n\t\t\treturn value.substring(0, start", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "```\n        // Create the group of labels\n        FigTextGroup group = new FigTextGroup();\n        group.setBounds(new Rectangle(10, 10, 100, 20));\n        group.setJustification(FigText.JUSTIFY_", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "           ContactFinder contactFinder = new ContactFinder(serviceProxy);\n            ContactInfo contactInfo = contactFinder.GetContactInformationByPhoneCallId(CallNumber);\n            launchUrl(createUrl(contactInfo.Id, ContactTypes.PhoneCall));\n        }\n    }\n", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            var httpRes = new HttpResponseStreamWrapper(httpResponse.Body);\n            serializer(requestContext", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "```\n        nextToken = text.indexOf(\" estimated_rows=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\" estimated_rows=\\\" bad string: \"\n                    + text));\n        }\n       ", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tresult.append(\"0x{:08x}\".format(ofs))\n\t\t\t\tlen -= file_len\n\t\t\t\tofs += file_len\n\t\t\t\tcontinue\n\t\t\tresult.append(\"0x{:08x}\".", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "     if (deviceCell.getUserObject() instanceof UnitInfo)\n      {\n         // Create the edge\n         edge = new ProxyToDeviceEdge(proxyCell, deviceCell, cs, attributes);\n      }\n      else\n      {\n         throw new NoSuchPortException(\"No", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher keySizeMatcher = keySizePattern.matcher(constraintEntry);\n                    if (keySizeMatcher.matches()) {\n                        String keySize = keySizeMatcher.group(2);\n                ", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "\t\t\treturn new EmptyIterator<String>();\n\t\t}\n\t}\n}\n\n}", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "```\n                return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n    }\n}\n\n```\n\n```", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\t\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t\t_orderService.UpdateOrder(order);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\torder.OrderStatusId = (int)OrderStatus.", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "```", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "       i21 = i16 + i19;\n        i22 = i18 + i19;\n        i23 = i22 + i19;\n        i24 = i23 + i19;\n        Dcopy.dcopy(i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "       return self._conf_helper('sp', options)", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "self.collection[artist][album].sort(key=lambda x: x.final.track)", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\t\treturn \"ok\"", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\t\t\tif (tempValues == null || tempDomains == null || tempValues.length != tempDomains.length) {\n\t\t\t\t\t\tLog.warn(\"Invalid values or domains for plot '\" + name + \"'\");\n\t\t\t\t\t\tcontinue;\n\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "   if (!success) {\n      throw new RunnerException(I18n.format(\n                                    _(\"Failed to upload sketch to board: {0}\"),\n                                    uploader.getErrorMessage()));\n    }\n    return suggestedClassName;\n  }\n  protected", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\t// Update the player's name to format text nicely. This needs to be done because Terraria automatically formats messages against our will\n\t\t\t\tstring name = e.PlayerName;\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "```\n            sleep(0.01)\n\n        # Reading data from FIFO\n        data = self.readFIFO()\n        #print('FIFO data = %s' % data)\n        # Waiting for FIFO count > 2\n        while (self.getFI", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "```\n\t\t\t\twhile (itHistory.hasNext()) {\n\t\t\t\t\tFLRHistory flrHistory = (FLRHistory) itHistory.next();\n\t\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_J", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "           c = Workplane().box(1,1,1).faces(\">Z\").workplane().circle(0.25).cutThruAll()\n            c.faces(\">Y\").workplane(-0.5).fillet(0.1)\n        \"\"\"\n        solidRef", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "                                   + \"10^\" + i);\n                                }\n                                else {\n                                    if (this.expTickLabelsFlag) {\n                                        //create \"1e#\"-type label\n                                        tickLabel = (((i < 0", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "        sb.append(d);\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append(d);\n", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "```\n        if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n\n        // create path and map variables\n        String localVarPath = \"/organizations", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "```\n                list.Add(1060411, \"Equipped\");\n            }\n            else if (this.m_SetEquipped)\n            {\n                list.Add(1060411, \"Equipped\");\n            }\n            else\n           ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "                               if (grapple.DockUid != part.Uid)\n                                {\n                                    Syntax.Warning(part, \"Part not attached or grappled by parent grappling part: \" + grapple);\n                                    Syntax.Warning(grapple", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       modulestore().create_child(\n            parent,\n            parent.location.version_agnostic(),\n            category_queue[0],\n            fields={'display_name': 'Test Subtree'},\n        )\n\n        \"\"\"\n        Create a new node in the course\n        \"\"\"", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "```\n                .map(pushedAsset -> pushedAsset.getIdentifier())\n                .collect(Collectors.toList());\n        assertEquals(set(htmlPageAsset.getIdentifier()), newBundlePushedAssets);\n    }\n    @Test\n    public void includeTemplateUsingTwoEnvironment", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "if (info != 1)\n{\nConsole.WriteLine(\"Error: \" + info);\nreturn;\n}\n```\n```", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "           return obj != null && NumberUtils.isNumber(obj);\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "           if not replace:\n                return False\n        else:\n            if not isobject:\n                value = eval(value)\n            if not replace:\n                return False\n        return self.write(cr, uid, [res[0]], {'value': value}, context=context)", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "       String contentType = \"text/plain\";\n        String fileName = \"jump.txt\";\n        String filePath = \"sites/mySite/documents/\";\n        String fileId = createFile(content, contentType, fileName, filePath);\n        String myFileLinkId =", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "```\n        return encodeBytes( source, off, len, options );\n    }\n```\n}\n\nPlease complete the code given below.", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tif (_abi_info == null)\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message), new GLib.AbiStruct.CValue [1] {\n\t\t\t\t\t\tnew GLib.AbiStruct.", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending(boolean pending) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\t\t\t\tif (q[0].Equals(One))\n\t\t\t\t\treturn u3;\n\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tif (v3.Equals(Zero))\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "           return ValidationError(\n                message=opts.get_field(unique_check[0]).error_messages['unique'],\n                code='unique',\n                params=params\n            )\n        # Multiple unique fields\n        else:\n            return ValidationError(\n                message=opts", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "```\n                if (name.toLowerCase().endsWith(\".uml\")) {\n                    name = name.substring(0, name.length() - 5);\n                }\n                return new File(theFile.getPath() + \"/\" + name);\n            }\n        }", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsSearchable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsSys", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "```\n        cell_attributes = convert(cas_data_str)\n        for cell_attribute in cell_attributes:\n            model.set_cell_attributes(row, column, table, cell_attribute)\n```", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\n            string[][] ss12 = new string[][] { s121 };\n            string[][]", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "           for key, value in sorted(paramtestdic.iteritems()):\n                paramout.write(\"%-3s \\t %.4f\\n\" % (key,value))\n            paramout.close()\n```\nThis code is a script for running optimization of radii and gamma", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "```\n                5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "data.PowerType[i] = packet.ReadInt32(\"PowerType\", indexes, i);\n                    }\n                }\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 2; ++i)", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "```\n        int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight  - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        int width = Math.min(availableWidth, prefWidth);\n        int x = 0", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tif (x < width - width / 8) {\n\t\t\t\t\t\tcursor_bits [y * width / 8 + x / 8] = (Byte", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "   for i in range(20):\n        h = h[:i] + inpart.read(20 - i - len(h))\n        heads.append(h)\n    return h\ndef unbundle(repo, inpart, op, pushback=False):\n    \"\"\"", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "```\n            return rrule.rrule(rule_str, dtstart=date_start)\n        elif rule._freq == 4:\n            return rrule.rrule(rule_str, dtstart=date_start)\n        elif rule._freq == 3:\n", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "```\npMem1.z == pMem2.z || pMem1.zBLOB == pMem2.zBLOB );\n        if ( pMem1.z == pMem2.z )\n        {\n          int rc = sqlite3StrICmp( pMem1", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "       for snp in self.locsnps[:, 1]:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim -", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "```\n\t\t\tDateTime minTimeStart=dateStart.AddMinutes(-apptLengthMins);\n\t\t\tDateTime maxTimeStart=dateStart.AddMinutes(apptLengthMins);\n\t\t\tDateTime minTimeStop=dateEnd.AddMinutes(-apptLength", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "\t\t\t\tOwner.SendMessage(\"You have been rewarded for completing the quest.\");\n\t\t\t}\n\t\t}\n\t\tpublic void CheckCanSeeReward()\n\t\t{\n\t\t\tif (!this.Deleted && AutoReward && IsCompleted &&", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 16);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"\\\"The only way to do great work is to love what you do. If you haven", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n                int[] row = dic.GetAsArray(PdfName.IMAGE);\n                if (row == null || row.Length == 0)\n                    return fout.ToArray();\n                for (int", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "           Index[] memberIndices = indexByTagAndClass[tag];\n            if (memberIndices == null) {\n                memberIndices = new Index[classRef.getMembers().length];\n                indexByTagAndClass[tag] = memberIndices;\n            }\n           ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "```python\nclass Ehdr(CStruct):\n    _fields = [ (\"ident\",\"16s\"),\n                (\"type\",\"u16\"),\n                (\"machine\",\"u16\"),\n                (\"version\",\"u32\"),\n                (\"entry\",\"ptr\"),\n                (\"phoff\",\"", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "```\n                        AnalAttribRow AnalAttribRow = (AnalAttribRow)rv.Row;\n                        AnalAttribAccess.LoadByPrimaryKey(MainDs, AnalAttribRow.AnalAttribId, ReadTransaction);\n                    }\n                }\n                // Now", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public bool ContainsKey(TKey key)\n\t    {\n\t        return (0 <= firstItemIndex && firstItemIndex <= lastItemIndex && items[firstItemIndex].", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "     get { return DefaultInstance; }\n    }\n    \n    protected override ReportRefundRequest ThisMessage {\n      get { return this; }\n    }\n    \n    // Fields\n    private global::bnet.protocol.exchange_object_provider.NotificationExtraInfo notification_extra", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. d4 d5 2. Nf3\";\n\t", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "\t\t\tvar result = new ArrayList();\n\t\t\tvar set = new Hashtable();\n\t\t\tforeach (var item in target)\n\t\t\t{\n\t\t\t\tif (!set.ContainsKey(item))\n\t\t\t\t{\n\t\t\t\t\tresult", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "```\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>Commands</h1>\");\n                html.WriteLine(\"      <table cellpadding=\\\"", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "               AControl.Dock = DockStyle.Fill;\n                AControl.Location = new Point(0, NextControlVPos);\n                NextControlVPos += AControl.Height + ARGUMENT_PANEL_BOTTOM_BORDER;\n                ArgumentPanel.", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "       if request.method == 'POST':\n            # ...\n```\nThe code seems to be incomplete and has syntax errors. Can you please provide the complete code so that I can debug it?", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "```\nif p == np.inf or p == 1:\n    return minkowski_distance(x, y, p)\nelse:\n    return minkowski_distance(x, y, p) ** (1. / p)\n```\nThe code is trying to compute the", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "```\n    catch(final Exception e)\n    {\n      return null;\n    }\n  }\n  \n  /**\n   * Get the 'feature stack view' line number for a feature.\n   * @param thisCDSFeature\n   * @param parentId\n   * @", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "```python\n        return self.__class__(values, key=self._key)\n```", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\t\t\tbuff[4] = (byte)(address & 0x000000ff);\n\t\t\tWriteReport(buff);\n\t\t\tif(mAltWriteMethod)\n\t\t\t\tHIDImports.HidD_Receive(this.mHandle", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\t\t\t\t\t\t// Update the linedef's sidedefs\n\t\t\t\t\t\t\t\tld.Sidedefs = new List<Sidedef>();\n\t\t\t\t\t\t\t\tforeach(Sidedef s in newsector.S", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "```\n            }\n            if (rows.Count < lTotalRows) {\n                rows.Add(new Row());\n            }\n            if (columns < lTotalColumns) {\n                columns = lTotalColumns;\n            }\n            for (j=0; j < columns; j", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "```\n        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            JSONArray emailTypes = email.optJSONArray(\"", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\t\t\t\t\tm_arSpellDefense.Add(reader.ReadString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (version >= 2)\n\t\t\t{\n\t\t\t\tm_bControlled = reader.ReadBool();\n", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "```python\n        if self.autoflush:\n            self._autoflush()\n```", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "```\n                iFile.close();\n            }\n        }\n    }\n    private final void deleteEntries (final ArrayList<InputObjectState> objectStates, final ArrayList<InputObjectState> deletedLogs)\n    {\n        for (int i = 0; i < object", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchMotion( Object unityObject )\n\t\t{\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_MAP\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 2", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "```\n            return JsonConvert.SerializeObject(result, Formatting.Indented);\n        }\n        private string RemoveNoLogValues(IDictionary<string, object> dict, HashSet<string> noLogValues)\n        {\n            foreach (string key in noLogValues)\n", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "```\n                            m_From.SendLocalizedMessage(1060652, newHouse.Name); // You have successfully placed your house.\n                            m_From.SendGump(new HousePlacementGump(m_Tool, m_From, newHouse", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "                   else if (this.RequiredRace == Race.Dwarf)\n                        from.SendLocalizedMessage(1072204); // Only Dwarves may use this.\n                    else if (this.RequiredRace == Race.Halfling)\n", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "                       Push(CheckActorHit(args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9], args[10], args[11], args[12], args[", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tList<P>\n\tgetPointsSortedAlphabeticaly( final Iterable<P>\tpts\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "           mnem[ishr] = \"ishr\";\n            mnem[lshr] = \"lshr\";\n            mnem[iushr] = \"iushr\";\n            mnem[iushr] = \"iushr\";\n            mnem[lushr]", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\t\t\tif (blockRandomised) {\n\t\t\t\tblock = new byte[last + 1];\n\t\t\t\tblockRandomised = false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvoid MainSort() \n\t\t{\n\t\t\t", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "\t\tplot = new Plot(imp, this);\n\t\tplot.setFrameSize(100, 100);\n\t\tplot.setLimits(0, 100, 0, 100);\n\t\tplot.setColor(Color.", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "```\n                });\n            #endregion Jhin\n            #region Karthus\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Karthus\",\n                    SpellName = \"KarthusQ\",\n                    Slot =", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "```\n        try:\n            shared_memory = int(open(filename).read())\n        except (IOError, ValueError):\n            logging.error(\"Could not read shared memory info from %s\", filename)\n            return None\n        return shared_memory\n```", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "\t\t\t\t\"    Function Something(ByVal value1 As Object, ByVal value2 As Object, ByRef index As Integer, ByRef count As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine), code);\n\t\t}\n\t\t[", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "```\nif creating:\n    # make sure the file has the correct permissions\n    # based on the current value of umask\n    os.chmod(dest, 0o644)\n```", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "```\n        return encodeBytesToBytes(source, 0, source.length, NO_OPTIONS);\n    }\n\n    /**\n     * Similar to {@link #encodeBytes(byte[])} but returns\n     * a byte array instead of instantiating a String. This is more efficient\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "```\n        'types': ('general-music', 'post-event', 'event', 'articulation-event', 'script-event',),\n    },\n```\n}", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "                   widgetName = widgetName.replace(\"$\", \"\")\n                    self.getControl(211).setLabel(widgetName)\n                    self.getControl(211).setLabel(widgetName)\n                    self.getControl(211).setLabel(", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "```\n    if args.exclude_folders:\n        # Exclude folders from the delta sync\n        exclude_folders = args.exclude_folders.split(',')\n        for folder in exclude_folders:\n            if folder.startswith('.'):\n                # Ex", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "       if (lastScanOffset > data.length)\n        {\n            // integer overflow\n            throw new RasterFormatException(\"Data buffer is too small\");\n        }\n    }\n    /**\n     * Returns the band offset for use by native code.\n     */\n    public int get", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "```\n        help=\"The price of the product or service per unit.\")\n    discount = fields.Float(string='Discount', digits=(16, 2),\n        help=\"The discount applied to the product or service.\")\n    invoice_line_tax_id = fields.", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\t\t\t\t\tSelected (Menus [selected].Children [Menus [selected].Current]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "\t\t\t\t.Append (Text)\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t///    Returns a new instance of the <see cref=\"UserTextInformationFrame\" />\n\t\t///    class with the specified text.", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "       system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.removeCustomValues(self.session,\n                                              system_id,\n                                              keys)\n####################\ndef help_system", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "```\n                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n\n    /**\n     * Helper method that updates the node, bringing it into the current transaction with\n     * the appropriate <b>cm:auditable</b> and transaction behaviour", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "```\n    def __str__(self):\n        return f\"{self.user.username} - {self.course.name}\"\n\n    class Meta:\n        app_label = 'django_comment_client'\n        db_table = 'course_enrollment'\n        ordering", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n        }\n    }\n}", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "```\n        if clear:\n            self.clear_data(variables, io)\n        if gather:\n            self.populations[0].record(variables, io, self._record_filter)\n        else:\n            for p in self.populations[1:]:\n                p", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "```\n        for ts in ts:\n            ts.start()\n        for ts in ts:\n            ts.join()\n    else:\n        for recid in recs_queue:\n            insert_queue.put_nowait(recid)\n            correct_queue.put_", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "               chr.Colliding = false;\n            }\n            foreach (OdePrim prim in _prims)\n            {\n                // Reset the collision values to false\n                // since we don't know if we're colliding yet\n                prim.Colliding = false;\n           ", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "                       &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%(site_url)s/admin/websearch/websearchadmin.py", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "```\n      if (mainAxis == CSS_FLEX_DIRECTION_COLUMN) {\n        // Determine the cross-axis dimension.\n        if (itemsOnLine > 1) {\n          crossDim = availableInnerCrossDim;\n        } else {\n         ", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "```\n                });\n            #endregion\n        }\n    }\n}\n```\nPlease add the following lines of code to the end of the `SpellDatabase` class:\n```csharp\n    public static List<SpellData> Spells = new List<SpellData>();\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "           inputSlice, masterNum, masterValidPermanence, masterValidConnected)\n```", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "               return -value.doubleValue();\n            }\n        };\n    }\n    /**\n     * Creates a numeric negation expression.\n     *\n     * @param operand\n     */\n    public static UnaryExpression negate(Object operand) {\n        return negate", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "\t\t\t\tif (c == '\\\\' && !quoted) {\n\t\t\t\t\tint surrogate;\n\t\t\t\t\tc = escape (c, out surrogate);\n\t\t\t\t\tif (c == -1)\n\t\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occured during decomposition\"); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition, returning Q and R\n        /// </summary>\n        /// <param", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "       return contains;\n    }\n    /**\n     * Returns the scrollable region of the component.  This method returns a\n     * Rectangle object that defines the area of the component that can be scrolled.\n     * \n     * @return the scrollable region of the component\n    ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "```\n\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tforeach ( YAxis yAxis in _y2AxisList )\n\t\t\t{", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "```\ndef _get_params(self):\n    \"\"\"Returns a dictionary of parameters to be passed to the webservice.\"\"\"\n    params = {}\n    if self.username:\n        params[\"user\"] = self.username\n    if self.password_hash:\n        params[\"password", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "           xmlWriter.WriteAttributeString(\"ID\", pane.ID.ToString());\n            xmlWriter.WriteAttributeString(\"Title\", pane.Title.ToString());\n            xmlWriter.WriteAttributeString(\"IsVisible\", XmlConvert.ToString(pane.IsVisible));\n            xmlWriter.Write", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "```\n\t\t\tspecial.get(6).add(\"Expertise\");\n\t\t\tspecial.get(10).add(\"Favored Enemy: Giant\");\n\t\t\tspecial.get(13).add(\"Favored Enemy: Construct\");\n\t\t", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "```\ndef __init__(self, recipeSet, recipe, **kwargs):\n    self.__recipeSet = recipeSet\n    self.__recipe = recipe\n    self.__properties = recipe.get(\"properties\", {})\n    self.__corePackagesByMatch = {}", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "       check_nodes = [self.new_node_uuid, self.other_node_uuid,\n                       self.instance.primary_node]\n    if not self.disks:\n      raise errors.OpPrereqError(\"Instance %s has no faulty disks\" %", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "                           desc = escape(desc)\n                        output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                        if field[0] == '*':\n                           ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeToObject\n    /**\n     * Encodes a Java object to a Base64-encoded string", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                           int n2 = ((y + r) * image_width) + x;\n                            if (bmp_mono[n1] == bmp_mono[n2])\n                            {\n                                hits1++;\n                            }\n                        }\n                   ", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "               Delta(MobileDelta.Noto);\n            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public OrderType SummonOrder\n        {\n            get { return m_SummonOrder; }\n            set\n            {\n                m_SummonOrder", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "                  is_const=True, is_virtual=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase const * object, const ns3::AttributeValue & attribute) [member function", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "       if vmap:\n            if hasDescription(vmap):\n                complt += \"    \\\"{0}\\\"\\n\".format(vmap['optDesc'])\n            if isBoolean(vmap, 'value'):\n                complt += \"    \\\"{0} {1}\\\"\\n", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "       \"\"\"\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.StopPreviewTimer()\n        self.RefreshOverflowState()\n    def OnDropdown(self, event):\n        \"\"\"\nNext line of code:\n        \"\"\"\n", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "\t\tRowMetaInterface fieldsToAlter = new RowMeta();\n\t\tfor (int i=0;i<fields.size();i++)\n\t\t{\n\t\t\tValueMetaInterface v = fields.getValueMeta(i);\n\t\t\tfieldsToAlter.addValueMeta", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "           globals['__path__'] = _find_spec(package, package)\n    return package\ndef _import_module(name, package=None, level=0):\n    \"\"\"Import a module and return it.\n    This is the function that is called by importlib.import_", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(21.0) - 13.0;\n\t\t\t break;\n\t\t case 11:\n\t\t\t z = new double[1];\n\t\t\t", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "```\nif e.nodeType == minidom.ELEMENT_NODE:\n    if e.localName == \"layout\":\n        self.layoutNode = e\n        break\n```", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "```\n      raise Exception('No headers phase found')\n```", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "```\n\tprotected override int QuestId { get { return 519436; } }\n```\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setCustomParameter(string name, float value)\n        {\n            return FMOD_EventCategory_SetCustomParameter(eventcategoryraw, name, value);\n        }\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "               if (body.get(0) instanceof Node.TemplateText) {\n                    templateTextOptimization = true;\n                }\n            }\n            if (templateTextOptimization) {\n                // Generate code to push the body count and then call the\n                // named attribute", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": " [ \"%(componentType)s\" = \"agent\" ] && renice 20 -p $$\n  #%(bashVariables)s\n  #\nexec python $DIRAC/DIRAC/Core/scripts/dirac-%(componentType)s.py %(system)", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "       if cdata is not None:\n            if cdata[0] == 0:\n                return\n    elif isinstance(node.op, AdvancedSubtensor1):\n        cdata = node.op.get_constant_idx(node.inputs, allow_partial=True,", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "               return new BigInteger(1);\n            else\n                return new BigInteger(numBits);\n        }\n        //***********************************************************************\n        // Returns the number of bits in the BigInteger.\n        //***********************************************************************\n        public int bitCount()\n", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                if (methodGroup.Methods.Length == 0)\n                {\n                    Error(diagnostics, ErrorCode.ERR_NoMethod, syntax, methodGroup.ContainingSymbol.Name);\n                }\n                else if (method", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "```\n        for (int i = 0; i < libs.size(); i++) {\n            NativeLibrary lib = libs.elementAt(i);\n            if (lib.name.equals(name) && lib.isBuiltin == isBuiltin) {\n                return", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "```\nif os.path.exists(md_file_path) is False:\n    raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n```", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "\t\t\t\tcase Msg.WM\\_PAINT:\n\t\t\t\t\tOnPaint (new PaintEventArgs (e.Graphics, e.ClipRect, e.Bounds, e.State));\n\t\t\t\t\treturn PreProcessControlState.Paint;\n\t\t\t}\n", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "```\n    if url:\n        response = remote_instance.fetch(url)\n        if response.status_code == 200:\n            data = response.json()\n            if sort:\n                df = pd.DataFrame(data['nodes'], columns=['node_id',", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "```\nwhile (!successful && retryCount > 0) {\n    try {\n        successful = mountData(dataFile, dataPrefix, values, defaultData,\n                              registerDataNames, fileEditable, datafilePath,\n                              retryCount - 1);\n   ", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "               if not self.__IsToken( \"}\"):\n                    raise Warning(\"expected '}' At Line \", self.FileName, self.CurrentLineNumber)\n                FvImageSectionObj.Fv = FvObj\n                FvImageSectionObj.FvName = None\n                \n           ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "           search_reg_str = re.compile(search_terms, flags)\n        return self.find_from_regex(self._index_dict.value_intersect,\n                                    search_reg_str, strongs, morph)\n    def find_from_regex(", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "```\n    if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "```\n          pMem.n = sqlite3Strlen30(z);\n        }\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        if ( p.pResultSet[i_pMem] == null )\n", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       BeginBatchUndo(self)\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\nNext line of code:\n        EndBatchUndo(self)\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "               }\n            }\n        }\n    }\n}", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "                       if (j == 1) {\n                            phaseOneLength = exponent.length();\n                        } else {\n                            if (--phaseOneLength == 0) {\n                                phase = 2;\n                                affix = suffix;\n                            }\n                           ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "           state.s1 = s0;\n            state.s2 = s1;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  seed  value  which  comes  from  standard\n        RNG.\n          -- ALG", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "       m = ModeFactory.getMode(\"Channel_queries\", \"filter_child_subscriptions\");\n        List<Map<String, Object>> list = m.execute(params);\n        for (Map<String, Object> map : list) {\n            Long cid = (Long", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "\tthis.region = region;\n}\n/**\n * Sets the state of the receiver.\n * <p>\n * The state of the receiver is a combination of the following flags:\n * <ul>\n * <li>SWT.NORMAL - the receiver is in its", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "```\n    if state == 'absent':\n        if module.params['force']:\n            ret = vms_module.action(\n                action='delete',\n                action_condition=lambda vm: vm.status != otypes.VmStatus.DOWN,\n                wait_", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "                       diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ChecksumDuplicate, guid, path, existingDoc.SourceHash, checkSumText), NoLocation.Singleton);\n                    }\n                }\n                else\n                {\n                    // p", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "```\n        group.add_option(\"--exclude\", dest=\"exclude\", metavar='[package]',\n                        help=_(\"exclude packages matching the given pattern\"))\n        group.add_option(\"--include\", dest=\"include\", metavar='[package]',", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "```\n                    raise ParseException(\"Invalid dictionary expression: \" + str(dictvalue))\n                tokenlist[ikey] = dictvalue\n        return tokenlist\nclass QuotedString(TokenConverter):\n    \"\"\"Converter to handle quoted strings.\n       The quoted string is matched as a single token", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "```\n                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:     X - HR, Y + 0 ,      X, Y,      X + 0 ,", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            pid = json_data['pid']\n            orcid = json_data['orcid']\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "```\n        option_value = json_d.get('option', '')\n        if not isinstance(json_d, basestring):\n            option_value = ''\n        return {'comment': comment_value, 'option': option_value}\n```", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "```\n        int[] allowedIfds = new int[ifdFlags];\n        for (int i = 0; i < ifdFlags; i++) {\n            allowedIfds[i] = (IfdId.TYPE_IFD_0 << 24) | (ifds", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "                   while self.tok[0] != ')' and self.tok[0] != ',' and self.tok[0] != ';':\n                        if self.tok[0] == 'TYPE':\n                            params.append(self.tok[1])\n                            self.", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "```\n        return {\n            'account_id': acc_src,\n            'journal_id': journal_id,\n            'account_id': acc_dest,\n            'line_id': [(0, 0, {\n                'account_id': acc_dest,", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "```\n```", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\n\t\t\treturn GetName (metadata_name);\n\t\t}\n\t\tpublic static OpType GetOperatorType (string metadata_name)", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "     return JavaCore.create(fileName);\n    }\n  }\n  public static IPackageFragmentRoot getPackageFragmentRoot(char[] fileName) {\n    return JavaCore.create(fileName);\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName) {\n   ", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "```\n        if pinfo['orcid']['import_pubs']:\n            orcid_data['papers_to_autoclaim'] = papers_to_autoclaim\n        else:\n            orcid_data['papers_to_autoclaim'] = []\n       ", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "   Returns\n    -------\n    out : array of datetime64[D]\n        An array with the same shape as ``dates``, containing the\n        adjusted dates that fall on valid days.\n    Examples\n    --------\n    >>> # The weekdays are Friday, Saturday,", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "```\n                return dim_coord_subset()\n            else:\n                return [slice(None)]\n        else:\n            return [coord.copy()]\n    def summary(self, shorten=False):\n        \"\"\"\n        Returns a summary of the cubes in this list", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "   if matched_zero:\n      return False\n    # Don't warn on function pointers with no arguments.\n    if Match(r'^\\s*\\((.*)\\)', remainder):\n      return False\n    # Don't warn on function pointers with a single argument.\n    if Match(", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "```\n        user.email_settings.set(course_id=course_key, receive_emails=receive_emails)\n        user.email_settings.save()\n        return JsonResponse({\"success\": True})\n    else:\n        user.email_settings.delete", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "```\n        if len(arrayObjectMemberTypes) > 0:\n            arrayObject = CGList(CGGeneric(\"Ok(Some(value.as_slice()))\") for value in arrayObjectMemberTypes)\n        else:\n            arrayObject = None\n\n        structObjectMemberTypes = filter", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "```\n                int margin = a.getDimensionPixelSize(R.styleable.ViewGroup_MarginLayout_layout_margin, 0);\n                setMargins(margin, margin, margin, margin);\n            } finally {\n                a.recycle();\n            }\n", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "```", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           c = new double[m+n-1];\n            i1 = (m-1) - (0);\n            for(i_=0; i_<=n-1;i_++)\n            {\n                c[i_] = b[i_+i1];\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "           \"\\x1FED\\x1FE6\", /* 1FED; 1FE6; Case map */\n        }\n    }\n}\n}", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            if url:\n                # We have a url, so we can proceed with the rest of the process\n                # We need to check if the url is a valid url\n                if not check_valid_url", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        data[dataIndex][j] = new int[windowSize - 1];\n      }\n      for (int j = 0; j < dsize; j++) {\n        int labelIndex = j", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "       self._initialized = True\n```", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "drawImage(bImg, op, x, y, null);\n}\n}", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "               if lhs not in raw:\n                    raw[lhs] = rhs\n                else:\n                    raw[lhs] += \" \" + rhs\n            else:\n                if adding:\n                    raw[lhs] = rhs\n                else:\n                    raw[l", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "```\n            if token_type == tokenize.NEWLINE:\n                logical.append(text)\n                previous = (text, end)\n            else:\n                previous = (text, end)\n            logical.append(text)\n        return \"\\n\".join(logical)\n", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "```\n        g = np.dot(N_k[self.states_with_samples], f_k)\n        g = g[np.nonzero(g)]\n        return g\n```", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line)\n                else:\n                    self.state.update({\"log\": line}, commit=False)\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "```\n            for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "```\n            if aggregator.supports_weighting(weights):\n                aggregator.aggregate(new_cube, weights=weights)\n        return new_cube\n    def rolling_window(self, window, aggregator=None, aggregation_function=None,", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "\n        return _connectionId;\n    }", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, AdminGumpPage.AccountDetails_Characters, m_ListPage, m_List, results, notice ) );\n\t\t\t\t\t\t\tbreak;", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "                   return fn(*arg, **kw)\n        else:\n            def wrap(*arg, **kw):\n                return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it is", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(returnType,\n                                                             OperatorFacts.BinaryOperatorNameFromOperatorKind(op),\n                                                             returnType,\n                                                             returnType,\n                                                             isChecked);\n            }\n            return", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       internal uint index; // (type index) index of type record for method\n        /// <summary>\n        /// </summary>\n        internal string name; // length prefixed name of method\n        /// <summary>\n        /// </summary>\n        internal byte[] offset; // variable length offset", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "```\n            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".\" + PPersonTable.PartnerKeyColumn);\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".\" + PPersonTable.", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "       if expression is None:\n            return None\n        elif isinstance(expression, types.CodeType):\n            return self.run(expression, locals)\n        elif isinstance(expression, types.StringType):\n            return self.run(self.compile(expression), locals)", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "           if (extensions.Contains(\"GL_EXT_texture_sRGB\"))\n                supportsSRGB = true;\n            else if (extensions.Contains(\"GL_EXT_texture_float\"))\n                R16Formats = _KTX_R16_FORMATS_SN", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "```python\n    return (0, 'Access granted')\n```", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "result = self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\nresult = self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\nresult = self._concat_objects(keys,", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "               }\n                if (ch == -1)\n                    break;\n                ch = peek();\n            }\n        }\n    }\n    /**\n     * Reads the next character from the input stream and returns it.\n     */\n    private int next() {\n        int", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "```\n        final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final Data", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "```python\n        d = self.shell.stat(('ned',), ('size',))\n        def cb(res):\n            self.assertEqual(res[0], 0)\n            self.assertTrue(res[1])\n        d.addCallback(cb)\n        return", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "```\n                if( b < 0 ) {\n                    return -1;\n                }\n                dest[ off + i ] = (byte)b;\n            }\n            return i;\n        }\n```\n}", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "```\n            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n    }\n    private final EventListener eventListener;\n    private final long enabledOnToolkitMask;\n    private final int calls[];\n   ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "           if (result == RESULT.OK)\n            {\n                result = FMOD_Sound_GetInfo(soundraw, ref exinfo, ref sound);\n            }\n            else\n            {\n                FMOD_Sound_Close(soundraw);\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "               tbl_ix = (data[base] & 255) - 16;\n                if (tbl_ix < 0 || tbl_ix >= ac_ix.length)\n                    throw new IOException(\"Invalid AC table index: \" + tbl_ix);\n```", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "\t\tif (gfp.write_id3tag_automatic) {\n\t\t\tid3.id3tag\\_write\\_v1(gfp);\n\t\t}\n\t\treturn ret;\n\t}", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "```python\n        return skeleton\n```", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
{"pred": "               if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9,\n                        Messages.BuildMessageFromVerificationResult(\"TPartnerEditUIConnector.SubmitChangesPersonnelData AVerificationResult: \",\n                            AVer", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
