{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\traspodelaTable.updateUI();\n\t\t\traspodelaTable.scrollRectToVisible(raspodelaTable.getCellRect(0,raspodelaTable.getRowCount()", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "plt.show()\nplt.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "                SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\t\trectF.set(top_left.x, top_left.y, top_right.x, top_right.y);\n\t\t\trectF.set(bottom_left.x, bottom_left.y, bottom_right.x, bottom_right.y", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "\t\taliases.Add (\"hebrew\", \"windows_1255\");\n\t}\n}\n}\n\nNote that this code is not complete, and you will need to add more entries to the `List` variable and the `aliases` dictionary. Also, the `BuildHash", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "       sendBean(\"B\", 1, 1L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        assertFalse(listener.", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "       Set<String> mustStatusSet = new HashSet<String>(\n            operationSetPresence1.getMustStatusSet());\n        mustStatusSet.removeAll(supportedStatusNames);\n        //if the must set is empty, then the implementation doesn't offer\n        //any status", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "   if class_name == 'd':\n        return class_contents\n    elif class_name == 'w':\n        return class_contents\n    elif class_name == 'h':\n        return class_contents\n    elif class_name == 's':\n        return class_contents\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "           self.__repeat = (delay, interval)\n        elif delay is None and self.__repeat[1] is not None:\n            self.__repeat = (None, self.__repeat[1])\n        else:\n            self.__repeat = (delay, interval)\n        return self\n    def", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "               tree.setSelection(item);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "   if self.param_type == INTERFACE_FULL_NAME:\n        self.init_interface_data(self.interface)\n        self.get_interface_info()\n        if is_ethernet_port(self.interface):\n            self.get_port", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "       reload();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "   env.do_delayed_imports(logger, test_paths)\n```\n\n\n\n\n\n\n\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "                           await CheckCloseBattle();\n                        }\n                    });\n                }\n            }\n            poll.AddOptions(options);\n            return await poll.RunAsync();\n        }\n        private async Task CheckCloseBattle()\n        {\n            if (spring.IsRunning", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(300, 300);\n\t\t\tthis.Load += new System.EventHandler(this.TissueControl_Load);\n\t\t\tthis.VisibleChanged += new System.EventHandler(this.Tissue", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the measurement\n        self._wavemeterdll.Operation(self._cCtrlStop)\n        # stop the thread\n        self", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 9);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i))) return false;\n    }\n    return true; // $NON-NLS-1$\n  }\n}", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\t}\n\t\t\t\tassemblyCache [name] = assembly;\n\t\t\t\treturn assembly;\n\t\t", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"Setting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Settings.Get<Setting>(strings[1]);\n\t\t\t\t\t\t\t\tsetting.Value = node", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is an example of how to create a log file for an auction system in Arya.", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   observations = [o for t in translations_dict for o in observations if t['code'] == o['code']]\n    \n    # add a 'time' field to each observation\n    observations = [dict(o) for o in observations]\n    \n    # add a 't", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       ]\n        for name in names:\n            orig_name = name[0]\n            clean_name = parse_tables.clean_name(orig_name)\n            assert clean_name == name[1], f\"{orig_name} -> {clean_name}\"\n    def", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "                           sead_partnn_l = findPath(nodemap, c_sead, maxs, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            sead_l.addAll(sead_", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "   self.write_footer(title, step)\n\nI have highlighted the parts of the code that I need help with.  Can someone please explain what each part of the code is doing and how it fits into the overall narrative web page generation process?  I am particularly interested in understanding how the", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "       return logging.makeRecord(name, level, fn, lno, msg, args, exc_info, **kwargs)\n    def format(self, record):\n        # this is the most important part of the class\n        # it's the place where we can use the extra data\n", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "           if m.lat > max_relalt_mm:\n                raise NotAchievedException(\"Takeoff initiated before rotor runup complete\")\n            self.set_parameter(\"H_RSC_P\", 1000)\n            self.set_parameter(\"H_", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\t// reassemble packet\n\t\t\t\tPacket p = new Packet(buf);\n\t\t\t\t// return packet\n\t\t\t\treturn p;\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "           if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n                // Perform contextual menu action\n                // ...\n            }\n        }\n    }\n}\n\n// Licensed to the Apache Software Foundation (AS", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "   host = host.get_host_variable('ansible_host')\n    port = host.get_port_variable('ansible_port')\n    username = host.get_username_variable('ansible_user')\n    password = host.get_password_variable('ansible", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "           key_func = lambda x: x[1]\n            sort_order = sort[0]\n        all_assets = SortedAssetList(course_assets.setdefault(asset_type, []))\n        if start > 0:\n            all_assets = all_assets[", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "       if (persist)\n        {\n            // Persist input to memento\n            final String factoryID = opiRuntimeDelegate.getFactoryID();\n            final IMemento memento = createMemento();\n            memento.putString(TAG_FACTORY_ID, factoryID);", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "   bind_layers(ENIP, inet.TCP, ethernet.Ether)\n\nI am trying to understand how the code is structured and what each class does. Can someone please explain the code and provide examples of how to use each class?\n\nI am particularly interested in understanding", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "   return unionrepository(ui, path, parentpath)\n\ndef main():\n    ui = util.ui()\n    path = ui.config('bundle', 'mainrepo', '')\n    create = ui.config('bundle', 'maincreate', False)\n    instance(ui, path,", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "               index = -1;\n            }\n            public void Dispose()\n            {\n                list.IsReadOnly = true;\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count - 1)\n                {\n                    index++;\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\tims.dto.Result reLoginResult = Connection.reLogin();\n\t\tif(reLoginResult != null)\n\t\t{\n\t\t\tims.dto.ResultMessage reLoginMessage = reLoginResult.getResultMessage();\n\t\t\tif(reLoginMessage", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "           for field, val in hash_.items():\n                fields[field] = val\n                extra_attrs[field] = val\n            if fields:\n                model_obj = queryset.create(**fields)\n                extra_attrs['id'] = model_obj.id\n", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n       ", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// ", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           }\n        }\n        private void pictureBox1_MouseClick(object sender, MouseEventArgs e)\n        {\n            if (e.Button == MouseButtons.Left)\n            {\n                int x = e.X / 8;\n                int y = e.Y /", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "           record_add_field(rec, '520', subfields=[('p', page_count)])\n        if publisher:\n            record_add_field(rec, '264', subfields=[('c', publisher)])\n        if collection:\n            record", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "           tableStrengthScore.setPlayer(player);\n            tableStrengthScore.setScore(0);\n            for (PlayerScore eachPlayerScore : this.scoreTable) {\n                if (eachPlayerScore.getPlayer().getId()\n                        .equals(opponent.get", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "           arena.getMonsterManager().addCreature(e);\n        }\n        return e;\n    }\n}\n\nPlease complete the code by implementing the spawn method for each creature.\n\nNote: The method name should be \"spawn\" and it should take an \"Aren", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (cell.getDepth() + 0.5));\n\t\t\t\t\t\tcgn.y = (int)(", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "   results.write(\n        out_list,\n        names=out_names,\n        header=out_comment,\n        comment=out_units,\n        extname='ATTRI')\n    out_list = []\n    out_names = []\n    out_comment", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "   reader = supported_extensions()[os.path.splitext(fname)[1]]\n    return reader(fname)\n    # raise ValueError(\"Unsupported file extension\")\n    # return None\n    # raise IOError(\"File %s does not exist\" % f", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\tif (orig == null || !orig.exists())\n\t\t\treturn;\n\t\tcopyFileToCoverImageIfMissing(orig, mDbHelper.getBookUuid(newId));\n\t}\n}\n\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n\n\n    def test_webhook_on(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "   try:\n        module = AnsibleModule(argument_spec=fields, supports_check_mode=False)\n        fos = Connection(module)\n        is_succesful, has_changed = fortios(module, fos)\n        if not is_succesful", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   if obj.startswith(b'\\ufeff'):\n        obj = obj[2:]\n    return list(loads(obj, mapping, implementation, strict))\ndef main():\n    # Load a RIS file\n    with open(\"example.ris\", \"r\") as file:\n       ", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "   def create_makefile64(makefile, m32):\n        \"\"\"Create and fix makefile for 64bit\n        \"\"\"\n        # ...\n    main()\n    sys.exit(0)\n\nI have a problem with the code, it seems that the script is", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "       return kind != null ? kind : EOF;\n    }\n}\n\nPlease let me know if you need any further assistance.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "\t\t\t\tAddRes( index, typeof( Moonstone ), 1032697, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Exp", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "           {\n                nsClientService = mLocalBinder.getService();\n                aapsLogger.debug(LTag.NSCLIENT, \"NSClientService connected\");\n            }\n        }\n    };\n    private void resend(EventNSClientResend event) {\n        if", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Implementor Implementor {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn implementor;\");\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            }\n        public static void Initialize()\n        {\n            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            foreach (DyeType type in Enum", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "   this.node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setPresentableTextContainer(Element presentableTextContainer) {\n    this.presentableTextContainer = present", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "       soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(edns=False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        for _ in range(20", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\n    def test_prop2po_file(self, capsys):\n        \"\"\"tests running prop2po on a file\"\"\"\n        inputfile = BytesIO(b\"SAVEENTRY=Save file\\n\")\n        outputpo = self.convertprop(inputfile)", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "       return \"ImageIcon(\" + filename + \", \" + description + \")\";\n    }\n}\n\n// End of ImageIcon.java\n\n/*\n * This code is not intended to be executed.  It is included\n * for documentation purposes only.\n */\n\npackage javax.swing;", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        #endregion\n    }\n}", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i], left, top, right, bottom, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(GraphEdge edge : edges){\n\t\t", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.ZoneName)\n                .OrderBy(g => g.Key)\n                .SelectMany(g => g.Key == null ? (IEnumerable<ContentItem>)g : new ContentItem[] { childFactory(query.Parent", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn getTraceSequence().size() > 0;\n\t\t}\n\t\treturn super.eIs", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "               this.gwtCertificatesService.uninstall(selected.getKeystoreName(), (result -> {\n                    if (result.succeeded()) {\n                        refresh();\n                    } else {\n                        AlertDialog.show(MSGS.errorUninstalling", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "           if os.access(self.file + os.extsep + ext, os.F_OK):\n                list.append(self.file + os.extsep + ext)\n        return list\n    def do_open(self, flags):\n        if self.dbm is None", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "       of log(sigmoid(pre_sigmoid_nv))\n        which is the correct form.\n        \"\"\"\n        # compute reconstruction error\n        cost = T.mean(T.square(pre_sigmoid_nv - self.input))\n        # increment", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           query_str = urllib.urlencode(query_args)\n            path += '?' + query_str\n        else:\n            path += '/'\n        if method == 'GET':\n            method = 'GET'\n        elif method == 'POST':\n            method = 'POST", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin_obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object decoder) {\n        try {\n            return decoder.clone();\n        } catch (CloneNotSupportedException", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "           checksum, expected_checksum = checksums.get(block=False)\n            assert checksum == expected_checksum\n    except Queue.Empty:\n        pass\n    assert os.path.isfile( pjoin(cfg.webdav_backend_directory, \"", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\"        Private Sub SomeMethod(Of T, S As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n\t\t\t\t\"End Namespace{0}\",", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\t\tList<Event> events = new ArrayList<Event>();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute();\n\t\tnew InterfaceUpdater(db, imported).execute();\n\t\tnew ServiceUpdater(db, imported).execute();\n\t\treturn", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}\n\nThis is a custom addon for a small fish tank, created by Morrigan and Ashlar. The addon includes a black base, blue water, and a Nujelm Honey small fisht", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "                   throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "   if data['system_switch_interface']:\n        resp = fortios_system_switch_interface(data, fos)\n        if not is_successful_status(resp):\n            return False, None\n        else:\n            return True, resp\n    else:\n       ", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\nNext line of code:\n      elements.add(new ASN1Boolean(false));\n    }\n    if (attributes != null && ! attributes.isEmpty())", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "           TripChain c = new TripChain(Person);\n            c.Trips = new List<ITrip>(Trips.Count);\n            foreach (var t in Trips)\n            {\n                c.Trips.Add(t.Clone());\n            }\n            c", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "\t\t\tString macroValue = macroHandler.substituteMacro(value, startIndex);\n\t\t\tif (macroValue != null) {\n\t\t\t\tvalue = value.substring(0, startIndex) + macroValue + value.substring(startIndex + macroValue.length());", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "           ContactFinder contactFinder = new ContactFinder(serviceProxy);\n            ContactInfo contactInfo = contactFinder.GetContactInformationByPhoneNumber(CallNumber);\n            if (contactInfo != null)\n            {\n                launchUrl(createUrl(contactInfo.Id, contactInfo", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "   if state == 'present':\n        changed = publication.__pub_add_table(tables)\n    elif state == 'absent':\n        changed = publication.__pub_drop_table(tables)\n    else:\n        module.fail_json(msg=\"Invalid state\")\n", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "   class StackMismatch(SibilantException):\n        def __init__(self, label, label_size, jump_size):\n            self.start_size = label_size\n            self.end_size = jump_size\n            self.label = label\n            super().__", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n            {\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            }\n            serializer(requestContext, response, httpResponse);\n        }\n       ", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "       // super(edge);\n        // this will create a new group with the correct size\n        // and position\n        // but it will not set the text or the arrow head\n        // so we need to do that manually\n        // this is a bit of a hack, but it works\n       ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "     if ( proxyCell.getUserObject() instanceof ProxyInfo )\n      {\n         ProxyInfo proxy = (ProxyInfo)proxyCell.getUserObject();\n         int unit = proxy.getUnit();\n         // Find the appropriate port in the device cell\n         for (int i =", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((InvasiveDeviceSearchCriteriaVo)beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.find()) {\n                        String keySize = matcher.group(1);\n                        Set<Constraint> constraint", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "\t\t\tresult.append((cur.type, prog_ofs, mem_len, file_len))\n\t\t\tlen -= mem_len\n\t\t\tofs += mem_len\n\t\t\tcontinue\n\t\treturn result\n\tdef get_section_by_name", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\t\t\tShippingService.CalculateShipping(order);\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t_orderService.UpdateOrder(order);\n\t\t\t//add a note\n\t\t\torder", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "       nextToken = text.indexOf(\" estimatedRows=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN string: no \\\"estimatedRows=\\\" bad string: \"\n                    + text));\n        }\n        try {", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                ", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\treturn new EmptyIterator();\n\t\t}\n\t}\n}\n}\n\nPlease help me complete the code.\n\nNote: I have provided the necessary imports and the code for the `P_DiskOptionsManager` class. You can refer to the provided code for more context", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "       return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG?', str_type=float)\n        self.enabled_list = MemoryDevice(['A', 'B", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void OnStoreAdd(object sender, StoreAddEventArgs e)\n        {\n", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\t\t\t\t\t// check if domain is a metric\n\t\t\t\t\tfor (int j = 0; j < tempDomains.length; j++) {\n\t\t\t\t\t\tif (tempDomains[j].equals(PlotConfig.customPlotDomainStatistics)) {", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "       Dcopy.dcopy(i16, paramArrayOfDouble1, i19 - 1 + (1 - 1) * paramInt8 + paramInt9, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\tfor name in names['names']:\n\t\t\tprint(name)\n\t\t\tfrappe.print_dict(get_item_info(name))\n\t\t\tfrappe.print_dict(get_item_variants(name))\n\t\t\tfrappe.", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "           sleep(0.01)\n\nimport time\n\n# Set the MPU6050 I2C address\nmpu6050 = MPU6050(address=0x68)\n\n# Set the MPU6050 I2C clock", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "   self.collection[artist][album].sort(key=lambda x: x.final.track)\n\nI need help with the following:\n\n1. How to implement the 'standardise_album_tracks' function.\n2. How to implement the 'sort_songs_", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\tPlayer player = Main.player[e.Who];\n\t\t\t\tstring name = player.name;\n\t\t\t\t//Update the player's name to format text nicely\n", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "   if (!success) {\n      throw new RunnerException(\n        _(\"Couldn't upload program to board.\"));\n    }\n    return suggestedClassName;\n  }\n  protected void prepare() {\n    // nothing to do here\n  }\n  protected void loadData()", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "        sb.append((char) ('A' + d - 10));\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "                                   + \"10^\" + i);\n                                }\n                                else {\n                                    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                                        tick", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "           parent,\n            category_queue.pop(0),\n            fields={'display_name': 'Test Subtree'}\n        )\n        for _ in range(2):\n            self.create_subtree_for_deletion(node, category_queue)\n    def test", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_HISTORY_FLR_ID] = itHistory\n\t\t\t\t\t\t.next()\n\t\t\t\t\t\t.get(ProjektFac.FLR_H", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "                               grapple.DockUid = part.Uid;\n                            }\n                            other.NeedsRepair = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\nThis code is a part of a", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "           cq = cq.fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        for f in self.objects:\n            if type(f) != Edge:\n                raise ValueError(\"Filleting requires that edges be selected\")\n       ", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "           assertTrue(\"createNumber(String) failed\", obj instanceof BigDecimal);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n\n// End of NumberUtilsTest.java", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "\n            }\n        }\n        public virtual void AddResistanceProperties(List<string> list)\n        {\n            if (this.m_Resistance != null)\n            {\n                foreach (ResistanceType type in Enum.GetValues(typeof(ResistanceType)))\n               ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t\t_abi_info.Type = \"gst-message\";\n\t\t\t\t\t_abi_", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n    }\n    private static List<Object> createContentTypeTestCase()\n            throws DotDataException, DotSecurityException {\n        final Host host = new Host", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "       gq.gqlegendre(N, x, w);\n        *************************************************************************/\n        public static int gqlegendre(int N, out double[] x, out double[] w)\n        {\n            int info = 0;\n            double[] alpha =", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tif (v3.sign < 0)\n\t\t\t\t\tbreak;\n\t\t\t\tu1 = u1.Add(v1);\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "           key = unique_check[0]\n        else:\n            key = NON_FIELD_ERRORS\n        return ValidationError(\n            message=opts.get_field(key).error_messages['unique'][0],\n            code='unique',\n            params=params", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "           if replace:\n                self.write(cr, uid, [res_id], {'value': value})\n            else:\n                self.create(cr, uid, [res_id], {'value': value})\n        else:\n            if replace:\n                self.write", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "       // Create a new shared link\n        QuickShareLink sharedLink = new QuickShareLink();\n        sharedLink.setTitle(\"My Shared Link\");\n        sharedLink.setDescription(\"This is a test shared link\");\n        sharedLink.setContent(content);\n        sharedLink.", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\nNext line of code:\n            string[][] ss12 = new string[][] { s121", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "       try:\n            cell_attributes = eval(cas_data_str)\n        except Exception as e:\n            self.main_window.statusBar().showMessage(\"Error parsing cell attributes: {}\".format(e))\n            return\n        # Shift selection to top left bbox corner", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending(int action) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "       int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight  - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        int width = Math.min(availableWidth, prefWidth);\n        int x = 0;\n", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "\n            }\n        }\n        return chooser.getSelectedFile();\n    }\n    protected void init() {\n        //#if defined(LOGGING)\n        //@#$LPS-LOGGING:GranularityType:Import\n        Logger.getLogger(\"", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n}\n            }\n            if (changesMask[124])\n            {\n                for (var i = 0; i < 2; ++i)\n                {\n                    if", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsIdentity\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsPrimaryKey\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "pMem1.z < pMem2.z\n);\n        return pMem1.z < pMem2.z ? -1 : 1;\n      }\n      else\n      {\n        Debug.Assert( ( combined_flags & MEM_Blob ) != 0 );", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "   paramtestdic[radioselect] = minradio\n    paramtestdic[gammaselect] = mingamma\n    #~ if minmaebyelement < nextelementsymbol:\n    #~ minimize\n    #~ params = Parameters()\n    #~ for ikey,", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "           if rule.byday:\n                for day in day_list:\n                    if rule.byday.startswith(day):\n                        data[day] = True\n        else:\n            data = self._rrule_default_values()\n        return data\n    def _", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 17);\n            this.quoteLabel.TabIndex = 7;\n            this.quoteLabel.Text = \"This is a quote from a famous Doomer, \\r\\nIt is a message", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tcursor_bits [y * width / 8 + x / 8] = (Byte) pixel.Color.ToArgb();\n\t\t\t\t\tmask_bits [", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t\tOwner.SendMessage(String.Format(\"Reward received - {0}\", Name));\n\t\t\t\tRewardAction();\n\t\t\t}\n\t\t}\n\t\tpublic virtual void RewardAction()\n\t\t{\n\t\t\t// do nothing", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "   for line in h:\n        heads.append(line)\n    assert not inpart.read()\n    op.records.add('heads', heads)\ndef handleunbundle(op, inpart):\n    \"\"\"process an unbundle part\n    This is the entry point of", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "                       AAnalysisAttributeRow AnalAttribRow = AAnalysisAttributeAccess.LoadByPrimaryKey(rv.Row[AAnalysisAttributeTable.GetApDocumentIdDBName()], ReadTransaction);\n                        AnalAttribRow.Active = true;\n                        AFreeformAnalysis", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "       for snp in self.locsnps:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim - coffset)\n", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "   _ = CStruct.from_buffer(ehdr, ehdr.size)\n\nI'm trying to disassemble an ELF64 executable file using the `miasm` tool, and I'm getting the following error message:\n\n```\nError: invalid value for", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "\t\t\t\twhile(dateLastTimeSlot < dateEnd) {\n\t\t\t\t\t//Find the next available time slot.\n\t\t\t\t\tDateTime timeStart=dateLastTimeSlot.AddHours(apptLengthMins);\n\t\t\t\t\tDateTime time", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t#region Reduce\n\t\tpublic static T Reduce<T, M>(this IEnumerable<T> source, ReduceDelegate<T, M> reduce)\n\t\t{\n\t\t\tT result = default", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            return fout.ToArray();\n        }\n        \n        private void ReadPdf() {\n            // Read the file header\n            int cr = tokens.ReadByte();\n            int c =", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. Nc3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   heappush(q, (min_distance, side_distances, far))\n    # far child is further by an amount depending only on the split value\n    # and the distance to the far child of the current node\n    # this is the same as the far child of the current node", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "           for (int i = 0; i < allClasses.length; i++) {\n                Index ix = allClasses[i];\n                if (ix == null)  continue;\n                for (int j = 0; j < ix.length; j++) {\n                   ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator()\n\t   ", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "\t\t\t\t\t\t\t\t// Add the new sector to the map\n\t\t\t\t\t\t\t\tmap.AddSector(newsector);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfrontsdone[i", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "       # Perform the translation\n        translation = translate_document(\n            parent_doc,\n            request.user,\n            document_locale,\n            revision_id,\n            discard_href=discard_href,\n            based_on_rev=based_on_rev,\n", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest MakeReadOnly() {\n      return defaultInstance;\n    }\n    \n    public static pb::MessageParser<ReportRefundRequest> Parser {\n      get { return _parser; }", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>Commands</h1>\");\n                html.WriteLine(\"      <table cellpadding=\\\"0", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityUpgrade@EXPERIENCE\", emptyYaml));\n\t", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "       return self._lists + values\n    def __iadd__(self, other):\n        \"\"\"Return new sorted-list instance containing all values in both\n        sequences, with the addition of the `other` sequence.\n        \"\"\"\n        return self + other\n    def __contains__(self, value", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "               ArgumentPanel.Name = \"ArgumentPanel\";\n                ArgumentPanel.Size = new System.Drawing.Size(200, NextControlVPos);\n                ArgumentPanel.Location = new System.Drawing.Point(0, 0);\n                ArgumentPanel.BorderStyle = System.Windows.", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "   catch(Exception e)\n    {\n      return null;\n    }\n  }\n  \n  public void setFeatureStackLineNumber(int lineNumber)\n  {\n    visibleFeaturesSortByPosition = getVisibleFeatures().sort(feature_position_comparator);\n   ", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\n        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            ContentValues contentValues = createContentValues(Email.CONT", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_MAP\" },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne(1000, false);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate byte GetRumbleBit()\n\t\t{\n\t\t\treturn (byte)(mW", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n            }\n            // now we can calculate the new widths\n            lNewWidths = new float[lTotalColumns];\n            for (j=0; j < columns; j++) {\n                lNewWidths [j] = lDummyColumnWidths [j][lTotal", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\n                    unlockAndClose(fd, iFile);\n                }\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n        }\n    }\n    private final void", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "                       var x = args[1] + (Camera.CurrentPosition.X & 7);\n                        var y = args[2] + ScreenTop;\n                        var actor = GetActor(args[3]);\n                        if (actor != null)\n                        {\n                ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "                           m_From.SendLocalizedMessage(1060630); // Your new house has been built!\n                            m_From.SendGump(new HousePlacementCategoryGump(m_From, newHouse));\n                        }\n                    }\n               ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n        self.engine = None\n        self.bind = None\n        self.transaction = None\n        self.expunge_all()\n        self.begin()", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.Skillshot", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchPlayMode( Object unityObject )\n\t\t{\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\n    }\n    public void generate(int pos, Instruction ins) {\n        if (ins.is_Load()) {\n            load(pos, ins);\n        } else if (ins.is_Store()) {\n            store(pos, ins);\n        } else if (ins", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n        }\n        private void FailJson(string message)\n        {\n            throw new PSInvalidOperationException(message);\n        }\n        private string RemoveNoLogValues(IDictionary param, List<string> noLogValues)\n        {\n            string result = String.Empty;\n", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\n        return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    }   // end class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "                   else if (this.RequiredRace == Race.Human)\n                        from.SendLocalizedMessage(1072204); // Only Humans may use this.\n                    return false;\n                }\n            }\n            return base.CanEquip(from", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\n        if (lastScanOffset > data.length)\n        {\n            // integer overflow\n            throw new RasterFormatException(\"Incorrect last scan offset: \"\n                    + lastScanOffset);\n        }\n    }\n}\n\\end{code}\n\nThis code is a", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "       try:\n            with open(filename, \"r\") as f:\n                shared_mem = int(f.readline().strip())\n        except IOError:\n            logging.error(\"Could not read shared memory info from %s.\", filename)\n            return None\n        return shared_", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "\n\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tList<P>\n\tgetPointsInsidePolygon( final List<P> points, final Polygon", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\tMakeMaps();\n\t\t}\n\t\t\n\t\tvoid DoCompress() \n\t\t{\n\t\t\tint i;\n\t\t\tint[] freq = new int[256];\n\t\t\tint[] len = new int[256", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "   'types': ('general-music', 'post-event', 'event', 'articulation-event',),\n}\n\nPlease complete the code by filling in the missing values.", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "       system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.deleteCustomValues(self.session,\n                                              system_id,\n                                              keys)\n        # regenerate the cache", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\t\tplot = new Plot(imp, plotID++, imageType, autoUpdate);\n\t\tplot.setFrameSize(100, 100);\n\t\tplot.setLimits(0, 0, 0, 0);\n\t\tplot.setTitle", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(ByVal value1 As Object, ByVal value2 As Object, ByRef index As Integer, ByRef count As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "       help=\"The unit price of the product or service without taxes or discounts.\")\n    discount = fields.Float(string='Discount', required=False,\n        help=\"The discount applied to the unit price of the product or service.\")\n    quantity = fields.Float(string", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "   for t in ts:\n        t.start()\n    # wait for the workers to finish\n    while finished_queue.empty() and suspend_resume_queue.empty():\n        pass\n    # update the task stats\n    task_stats[\"new_hepdata_rec", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "           if os.path.exists(src):\n                # ...\n\\end{code}\n\nThis code is part of the Ansible project, and is used to provide a Python API for managing and automating system configuration. It includes a wide range of modules and functions for working with various types of", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "                       self.rename_widget( listitem, widgetName )\n                        self.currentWindow.setProperty( \"widgetName\" + widgetID, widgetName )\n                        self.currentWindow.setProperty( \"widgetID\" + widgetID, selectedShortcut.getProperty( \"", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "                   \"   NEW: \" + nodeUpdate + \"\\n\");\n        }\n        return true;\n    }\n    \n    private void copyNodePropertiesCached(Node node, NodeUpdateEntity nodeUpdate)\n    {\n        // Copy the properties from the old node to the new node\n", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "   if args.exclude_folders:\n        # ...\n    if args.exclude_account:\n        # ...\n    if args.exclude_metadata:\n        # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall } };\n                });\n            #endregion Lucian\n            #region Nami\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Nami\",\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t\t\t\tSelected (Menus [selected].Children [Menus [selected].Current]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t\n\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "\t\t\t\t.Append (Text)\n\t\t\t\t.Append (\")\")\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n}\n\nnamespace TagLib.Id3v2 {\n\t/// <summary>\n\t///   ", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occured during decomposition\"); \n            return ret; \n        }\n        #endregion\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n            protected void layoutChildren() {\n                super.layoutChildren();\n                // do nothing\n            }\n            protected void paint(Graphics g) {\n                super.paint(g);\n                // do nothing\n            }\n        }", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "   def save(self, *args, **kwargs):\n        # If the user is enrolled in the course, and the course is not\n        # available, then the user is unenrolled.\n        if self.is_active and not self.course.available:\n            self.un", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "   if gather is True:\n        merged_block = self.get_data(variables, gather, clear)\n    else:\n        merged_block = self.get_data(variables, gather, clear, allgather=True)\n        # ...\n    # ...\n    # ...", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "           SaveLayout(xmlWriter, pane.Items[0]);\n        }\n        void SaveLayout(XmlWriter xmlWriter, ContentControl content)\n        {\n            if (content is DockableContent)\n            {\n                SaveLayout(xmlWriter, (DockableContent)content", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "                       &nbsp;(<span class=\"warning\">missing: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "```\n  private static void layoutNode(CSSNode node, float mainAxis, float crossAxis) {\n    // ...\n  }\n```\nPlease complete the code by calling the `layoutNode` method with the appropriate arguments.", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "                           output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                        output.write(\"    </struct>\\n\")\n            else:\n                output.write(\"     ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "               if (chr.m_collide_enabled)\n                {\n                    // Get the OdeScene's collision data\n                    // and check if we're colliding with anything\n                    // If we are, add the collision to the list\n                    // and set the collision", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "\n    # Update the permanence values of the master cells\n    masterPermanence = masterPotential * rfPermChanges\n    masterPermanence[masterValidPermanence < self.synPermOrphanDec] = 0\n    masterPermanence[masterValidPermanence", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\t\t\t\tswitch (c) {\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\t':\n\t\t\t\t\t//\n\t\t\t\t\t// Ignore whitespace\n\t\t\t\t\t//\n\t\t\t\t\tbreak;\n\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "           }\n        }\n        public override void OnDeath()\n        {\n            base.OnDeath();\n            if (m_ControlMaster != null)\n            {\n                m_ControlMaster.Followers.Remove(this);\n            }\n            if (m_Sum", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "               return -value;\n            }\n        };\n    }\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n            @Override\n            public String getOperator() {\n                return NOT;\n            }\n            @Override", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "       return contains;\n    }\n    public void setDraggedx(int draggedx) {\n        this.draggedx = draggedx;\n    }\n    public int getDraggedx() {\n        return draggedx;\n    }\n    public void setDragged", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "   def _deprecated_api(self, method, *args, **kwargs):\n        \"\"\"\n            Deprecated API method.\n            Use the new API instead.\n        \"\"\"\n        warnings.warn(\"Deprecated API method called: \" + method, DeprecationWarning)\n", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( YAxis yAxis in", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "\t\tRowMetaInterface fields_old = getTableFields(tableName);\n\t\t\n\t\t// Check if the technical key field is in the list of fields:\n\t\tif (tk != null && !fields_old.containsValue(tk))\n\t\t{\n\t\t\tthrow", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\t}\n\t\t\telse if (clas.equals(\"WARLORD\")) {\n\t\t\t\thitDie = 10;\n\t\t\t\tbaseAttackBonus = 0.75f;\n\t\t\t\tgoodFort = true;", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "   if self.disks:\n      for disk in self.disks:\n        disk_info = self.lu.GetDiskInfo(disk)\n        disk_name = disk_info.name\n        disk_size = disk_info.size\n        disk_type = disk_", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "   if self.isRoot():\n        raise ParseError(\"Root recipe without a package\")\n    if self.isRelocatable():\n        raise ParseError(\"Relocatable recipe without a package\")\n    if self.jobServer():\n        raise ParseError(\"JobServer recipe without", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeToObject\n    public static byte[] encode( byte[] bytes ) {\n        return encode( bytes", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                           if (bmp_mono[n1] > 128) hits1++;\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width) + x;\n", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                  is_const=True, is_virtual=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase const * object, ns3::AttributeValue const & attribute) const [member", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "       if cdata:\n            # Check if the constant is a scalar\n            if cdata.ndim == 0:\n                # Check if the constant is a scalar\n                if cdata.value == shape_of[0]:\n                    # If the constant is a scalar and the shape", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "       :param `event`: a `wx.Event` object.\n        \"\"\"\n        \n        self.DoIdleUpdate()\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.RefreshOverflowState()\n        self.StartPreview", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "       if vmap['name'] in ['-X', '-XX']:\n            complt += r\"{0}{1}={2}\\n\".format(optionPrefix, vmap['name'], vmap['value'])\n        elif vmap['name'] in ['-Graal', '-", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist in directory {1}.'.format(md_file_path, md_dir))\n        # load\n        self.load_workspace", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "           return package\n    else:\n        return package\ndef _load_module(name, package=None, level=0):\n    \"\"\"Load a module.\"\"\"\n    _sanity_check(name, package, level)\n    if name in sys.modules:\n        return sys.", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "               if e.nodeName == 'layout':\n                    self.layoutNode = e\n                    break\n            if self.layoutNode == None:\n                log.log(0,\"error\",_(\"Unable to find layout node in XLF file\") + \" \" + self.layout", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(7.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0] =", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "               if self.__IsToken( \"{\"):\n                    FvImageSectionObj = FvImageSection.FvImageSection()\n                    self.__GetDefineStatements(FvImageSectionObj)\n                    self.__GetBlockStatement(FvImageSectionObj)\n                   ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "     raise Exception(\"No headers phase found\")\n  def GetBuildSettings(self):\n    settings = {}\n    for key in self.GetProperty('buildSettings'):\n      value = self.GetProperty('buildSettings')[key]\n      settings[key] = value\n    return settings\n ", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "                   Node.TemplateText t = (Node.TemplateText) body.get(0);\n                    if (t.getBody() == null) {\n                        // XXX - This optimization is only valid if the\n                        // template text has no body.  If the template\n                       ", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverse         (bool reverse)\n        {\n            return FMOD_EventCategory_SetReverse(eventcategoryraw, (reverse ? 1 : 0));\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "       BeginBatchUndo(self)\n        Begin a batch undo operation.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\nNext line of code:\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": " #\n  python /opt/dirac/Web/lighthttpd/lighthttpd.py\n  \"\"\" % {'bashrc': os.path.join( self.instancePath, 'bashrc' ), } )\n        fd.close()\n        os.ch", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                var method = methodGroup.Method;\n                if (method.IsStatic)\n                {\n                    // UNDONE: Consider reporting this as a separate error.\n                    // UNDONE: Consider reporting this as a separate error", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "       try {\n            m = ModeFactory.getMode(\"Channel_queries\", \"filter_subscriptions\");\n        } catch (NoSuchChannelException e) {\n            // ignore\n        }\n        List<Map> list = m.execute(params);\n        for (Map", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "           {\n                BigInteger result = new BigInteger();\n                result.data[0] = 1;\n                result.dataLength = 1;\n                return result;\n            }\n            else\n            {\n                BigInteger result = new BigInteger();\n                result.data[", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "\n            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    // Load the native library.\n                    return true;\n               ", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "   response = requests.get(url, params=utils.build_node_location_params(x))\n    data = response.json()\n    return utils.process_node_location_data(data)\ndef get_skel_by_name(name, remote_instance=", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\t\tPreviewKeyUpEventArgs e = new PreviewKeyUpEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPre", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "   def do_install(self, name, *args):\n        \"\"\"Install a package.\"\"\"\n        return self.installPackage(name)\n    def do_update(self, name, *args):\n        \"\"\"Update the package database.\"\"\"\n        return self.updateDatabase(name)", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "           while (retryCount-- > 0) {\n                try {\n                    // perform the mounting operation.\n                    mountDataInternal(dataFile, dataPrefix, values,\n                                        defaultData, fileEditable,\n                                        registerDataNames);\n                    successful", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "       tag_value = json_d.get('tag', '')\n        if not isinstance(tag_value, basestring):\n            tag_value = ''\n        return (comment_value, tag_value)\n    def _render_html(self, student_answers):\n", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "           search_reg_str = search_terms.replace(' ', r'[^\\w\\*]+')\n        search_list = search_terms.split()\n        found_set = self._index_dict.from_partial(search_list, case_sensitive,\n                ", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDState  initialization  with  seed  values.\n         ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\nNext line of code:\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "\n        pMem.n = sqlite3Strlen30( z );\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        pMem.z = z;\n        pMem.n = z.Length;\n        p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "                       // Process the exponent.\n                        if (inExponent) {\n                            // If we are in the exponent, then we expect to see\n                            // either a digit or a special character.\n                            if (ch == digit) {\n                                // If we see a digit", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "               dim_coord_subset = dim_coord_subset()\n            else:\n                dim_coord_subset = [slice(None)]\n        else:\n            dim_coord_subset = [slice(None)]\n        return dim_coord_subset\n    def _", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "                       diagnostics.Add(ErrorCode.WRN_ChecksumMismatch, guid, existingDoc.FilePath);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_ChecksumMismatch, guid, existingDoc.", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "               }\n            }\n            #endregion\n            #region Events\n            //------------------------------------------------------------------------------------------\n            // Events\n            public event EventHandler Collapsed;\n            public event EventHandler Expanded;\n            public event EventHandler Refreshed;\n            public event EventHandler Filter", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "```\n    if state == 'absent':\n        # Check if VM exists, if not raise error\n        if not vms_module.search_entity(list_params={'all_content': True}):\n            raise AnsibleError('VM does not exist')\n        # Remove VM", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       if arrayObjectMemberTypes:\n            arrayObject = CGList(CGGeneric(get_match(\"array\")) for _ in range(len(arrayObjectMemberTypes)))\n            names.append(\"array\")\n        else:\n            arrayObject = None\n        structObjectMemberTypes = filter(lambda", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               dx0 = -hr;  dy0 =  0f;    dx1 =  0f;  dy1 = -vr;\n                break;\n            case 2:\n                dx0 = -hr;  dy0 =  0f;    dx1 =  0f;", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "\tthis.region = region;\n}\nvoid setState (int state) {\n\tcheckWidget ();\n\tif (state != 0 && state != 1) error (SWT.ERROR_INVALID_ARGUMENT);\n\tthis.state = state;\n}\nvoid", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            # We have to check if the url is already in the list of documents\n            # If it is, we have to update the flags\n            # If it is not, we have to add it\n            #", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "       return {\n            'account_id': acc_src,\n            'journal_id': journal_id,\n            'account_dest_id': acc_dest,\n            'amount': move.product_uom_qty * move.product_uom_price,\n", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "                   while self.tok[0] not in (')', '}', 'EOF'):\n                        params.append(self.Parse_expression())\n                        self.NextToken()\n                    self.expect(')')\n                    self.NextToken()\n                else:\n", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "                   tokenlist[ikey] = dictvalue\n    def resultsName( self ):\n        return \"dict\"\nclass ParseBaseException(Exception):\n    \"\"\"Base class for all parse-time exceptions.\"\"\"\n    def __init__(self, loc, message):\n        self.loc", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "drawImage(bImg, op, x, y, null, null);\n}\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y,\n                          ImageObserver observer)  {\nNext line of", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "           if paper.status == 'arxiv':\n                arxiv_papers.append(paper.id)\n                break\n        if arxiv_data['hidden']:\n            arxiv_papers = None\n        if orcid_data['hidden']:\n            orcid_p", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "\n    diskspec.device.backing.thinProvision = expected_disk_spec.get('type', 'false').lower() in ['true', 'false']\n                if diskspec.device.backing.thinProvision != 'true':\n                    diskspec", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "       for (int i = 0; i < ifds.length; i++) {\n            if (ifds[i] & ifdFlags) {\n                return new int[] { i };\n            }\n        }\n        return new int[] {};\n    }\n    protected static int", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line.strip())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "   if matched_zero:\n      return False\n    # Don't warn on function pointers with no arguments.\n    if Match(r'^\\s*(\\w+)\\s*;', remainder):\n      return False\n    # Don't warn on function pointers with a single argument.\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "   out = busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None)\n    The result is an array of datetime64[D] with the same shape as\n", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "     return JavaCore.createPackageFragment(fileName, pkgEnd);\n    }\n  }\n  public static char[] getPackageName(char[][] packageName) {\n    return packageName[0];\n  }\n  public static char[] getPackageName(IPackageFragment packageFragment", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This event is intended to allow changes", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           corrr1dcircular(signal, m, b, n, ref c);\n        }\n    }\n}\n\nPlease complete the code.\n\nNote: The code is for 1-dimensional FFT, the input parameters are:\n\n* signal: The input signal, a", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "   user.email_preferences.set_course_email_preference(course_key, receive_emails)\n    user.save()\n    return JsonResponse({\"success\": True})\ndef get_course_email_preference(request, course_id):\n    \"\"\"\n", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "               if lhs in raw:\n                    raw[lhs] = rhs\n                else:\n                    raw[lhs] = None\n                if adding:\n                    line = line[:assstart] + rhs\n                else:\n                    line = line[assend:] + rhs", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "       self.parse(scanner, locals)\n    def execute(self, statement, locals=None):\n        \"\"\"Execute a statement.\"\"\"\n        self.invoke('beforeExecute', statement=statement, locals=locals)\n        result = statement()\n        self.invoke('", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "\n                marginLeft = a.getDimension(LEFT_MARGIN, UNDEFINED);\n                marginTop = a.getDimension(TOP_MARGIN, UNDEFINED);\n                marginRight = a.getDimension(RIGHT_MARG", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "         if after == NULL_HASH:\n            after = None\n          self.hashes[filename] = (before, after)\n    return svndiff\n  def GetStatus(self, filename):\n    # If the file is not in the index, return \"A -\".\n   ", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "           for k in self.splitKeySet:\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2DoesNot:\n                theSum += self.splitKey", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "   if auth_code == 0:\n        return (auth_code, auth_message)\n    else:\n        raise InvenioWebSubmitFileError, auth_message\ndef get_recid(docname):\n    \"\"\"\n    Get the record ID associated with the given document name", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int position = document.get(j).getPosition();\n        labels[dataIndex][j] = position - windowSize + 1;\n        data[dataIndex][j] = featureVals[position", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "\n        public static readonly char[][] A_1 = new char[][]\n        {\n            new char[] {'\\x0000', '\\x0000'}, /* 0000 */\n            new char[] {'\\x0001', '\\x000", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       return _uuid;\n    }\n    private void checkNotClosed()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"checkNotClosed\");\n        if (_closed)\n", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "       final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final HostPodVO hostPod = _hostPodDao.findByHostIdAndPodId(srcHostId, destHostId);\n        final DataCenter srcDataCenter = _dataCenterD", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "   self._initialized = True\n    def record(self):\n        # type: () -> bytes\n        \"\"\"\n        Generate the string representing this UDF Logical Volume Implementation Use.\n        Parameters:\n         None.\n        Returns:\n         A string representing this UDF Log", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "               logical.append(text)\n                if end:\n                    logical.append(end)\n            previous = (token_type, text)\n        return \"\".join(logical)\n    def __getIndentWord(self):\n        \"\"\"\n        Private method to get the indent", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "           return new ToolkitEventMulticaster(a, b);\n        }\n        static void remove(AWTEventListener a,\n                            AWTEventListener b) {\n            if (a == null)  return;\nNext line of code:\n            super.remove(a, b);", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "FLOAT10 f = new FLOAT10();\n            f.Data_0 = 0x12345678;\n            f.Data_1 = 0x90123456;\n            f.Data_2 = 0", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "       g = np.matrix(np.zeros([K-1,1], dtype=np.float64)) # gradient\n        H = np.matrix(np.zeros([K-1,K-1], dtype=np.float64)) # Hessian\n        for", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "           aggregator.aggregate(rolling_window_data)\n        else:\n            aggregator.aggregate(new_cube.data)\n        return new_cube\n    def __getitem__(self, item):\n        \"\"\"\n        Allows for slicing of the cube", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "   result = concat(values, axis=0)\n    return result\n    def _get_axis(self, axis):\n        return self.grouper.axis\n    def _get_grouper_axis(self):\n        return self.grouper.axis\n   ", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AccountSearchGump( from, results, notice ) );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 8:", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "\n    def makefile(self):\n        \"\"\" Generate a Makefile for the test \"\"\"\n        global TEST\n        global TEST_DIR\n        global BUILT_FILES\n        global LIBRARY\n        global SKELETON\n        global VERSION\n        global", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
{"pred": "   def test_statNotExistingFile(self):\n        \"\"\"\n        stat on a non existing file should fail with a\n        L{ftp.FileNotFoundError}.\n        \"\"\"\n        d = self.shell.stat(('ned', 'doesnotexist',))\n        return self.", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(leftType, rightType, returnType, op, isChecked);\n            }\n        }\n        private static void GetSymbolsAndResultKind(BoundMethodGroup methodGroup, out bool isDynamic, ref LookupResultKind resultKind, ref", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "           RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".PartnerKey\");\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".FamilyPartnerKey\");\n            // Apply security\n            PPerson", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = (Sound)Marshal.GetObjectForIUnknown(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound = null;\n            }\n            return result;", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "           if (extensions.IndexOf(\"GL_OES_texture_float\") != -1)\n            {\n                supportsSwizzle = true;\n            }\n            else\n            {\n                supportsSwizzle = false;\n            }\n        }\n        #endregion\n", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "\t\tif (gfp.write_id3_automatic) {\n\t\t\tid3.id3tag_write_v1(gfp);\n\t\t\tret = bs.copy_buffer(gfc, mp3buffer, 0, mp3buffer_size, ", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "           default:\n                throw error(\"Unrecognized inline modifier\");\n            }\n            ch = peek();\n            if (ch == ')')\n                break;\n        }\n    }\n    private void unread() {\n        if (next() != -1)\n            throw", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "               tbl_ix = (data[base] & 255);\n            if (tbl_ix < 0 || tbl_ix >= dc_ix.length)\n                throw new IOException(\"Invalid Huffman Table Index\");\n            base++;\n        } while (base < result);", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "               #region Partner Interests\n                if (AInspectDS.Tables.Contains(PPartnerInterestTable.GetTableName()))\n                {\n                    foreach (PPartnerInterestRow row in AInspectDS.PPartnerInterest.Rows)\n                    {", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
