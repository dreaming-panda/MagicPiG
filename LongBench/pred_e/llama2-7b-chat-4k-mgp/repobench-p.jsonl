{"pred": "\t\t\t\tb0.flip(); //TODO: check if this is necessary? \n\t\t\t\tclient.write(b0); //TODO: check if this is necessary? \n\t\t\t\tb0.compact(); //TODO: check if this is necessary", "answers": ["\t\t\t\tBufferTools.returnBuffer(b1);\r"], "all_classes": null, "length": 2646}
{"pred": "\n    public void onEnable() {\n        // Initialize configuration\n        this.config = new Configuration();\n\n        // Load arena configuration blocks\n        this.getArenas();\n\n        // Load module configuration blocks\n        this.loadModules();\n\n        // Load region configuration blocks", "answers": ["    private ArenaHandler arenaHandler;"], "all_classes": null, "length": 3929}
{"pred": "       self._Fault(ClientError(\n          'Timeout exceeded while sending message',\n          400,\n          400,\n          'Timeout exceeded while sending message'\n        ))\n      finally:\n        if gtimeout:\n          gtimeout.cancel()\n\n ", "answers": ["        err = TimeoutError()"], "all_classes": null, "length": 2130}
{"pred": "\t\tself._caption_label.setBuddy(QLabel(tr(\"Mirror line\", 'dialogs')))\n\t\tself.layout().addWidget(self._caption_label)\n\t\tself.layout().addWidget(QLabel(tr(\"Mirror line\",", "answers": ["\t\tself._caption_label.setMinimumWidth(100*gui_scale())"], "all_classes": null, "length": 2012}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.blink = None\n        self.network_id = None\n        self.region_id = None\n        self.account_id = None\n       ", "answers": ["        self.auth = Auth()"], "all_classes": null, "length": 2174}
{"pred": "               // mapper.insertLastschrift(new Lastschrift(\n                //         treeTableModel.root.mandate.get(0).getMitgliedId(),\n                //         treeTableModel.root.mandate.get(0).getBezirk(),\n                //", "answers": ["                BeitragSammelLastschrift sammelLastschrift;"], "all_classes": null, "length": 2526}
{"pred": "   if frame.type in (\"APIC\", \"TALB\", \"TBPM\", \"TCOP\", \"TDOR\", \"TDRC\", \"TDOR\", \"TIT1\", \"TIT2\", \"TIT3\", \"TOC1\", \"TOC2\", \"TO", "answers": ["    if isinstance(frame, TextFrame):"], "all_classes": null, "length": 1608}
{"pred": "           local_index = Column(String)\n\n\ndef test_invalid_global_index():\n    with pytest.raises(InvalidModel):\n        class InvalidGSI(BaseModel):\n            id = Column(UUID, hash_key=True)\n            global_index =", "answers": ["            index = LocalSecondaryIndex(range_key=\"id\", projection=\"keys\")"], "all_classes": null, "length": 2269}
{"pred": "   # Compute the solar longitude of the shower\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    #", "answers": ["            jd = datetime2JD(filenameToDatetime(ff_name) + datetime.timedelta(seconds=float(frame_n)/fps))"], "all_classes": null, "length": 2640}
{"pred": "\n    private final KadConfiguration config;\n\n    private final int udpPort;\n\n    private final int maxConcurrentMessagesInTransit;\n\n    private final int maxMessageSize;\n\n    private final int responseTimeout;\n\n    private final int operationTimeout;\n\n   ", "answers": ["    private final Node bootstrapNode;"], "all_classes": null, "length": 3536}
{"pred": "       DocumentDialog(self, AvenantContratModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationFraisAccueil(self, _):\n        DocumentDialog(self, FraisGardeModifications(self.", "answers": ["        DocumentDialog(self, AvenantContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3291}
{"pred": "```\n    def define(self, name, type, *args, **kw):\n        self.defs[name] = type\n        self.vars.append(args)\n        self.vars.append(kw)\n\n    def use(self, name):\n        return self.", "answers": ["        self._root = TypeVar[None]"], "all_classes": null, "length": 1186}
{"pred": "   yield 'function'\n\n\n@method('function')\ndef function_sequence_type(self):\n    yield 'function'\n\n\n@method('partial function')\ndef partial_function_sequence_type(self):\n    yield 'partial function'\n\n\n@method('in", "answers": ["    XPathFunction.nud(self)"], "all_classes": null, "length": 3894}
{"pred": "\n    @Override\n    public void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        this.processingEnvironment = processingEnvironment;\n        this.elements = processingEnvironment.getElements();\n        this.typeUtils = processingEnvironment.getTypeUtils();\n       ", "answers": ["    private final ServiceLoader serviceLoader = new DefaultServiceLoader();"], "all_classes": null, "length": 925}
{"pred": "           s[group] = {name: value for name, value in zip(group, samples[group])}\n            r[group] = {name: value for name, value in zip(group, samples[group])}\n\n        return Bunch(spike_counts=sc,", "answers": ["            spikes = _concatenate(samples[group])"], "all_classes": null, "length": 2166}
{"pred": "               compile_information_func,\n                jobs,\n                self.logger,\n                self.utterances,\n                self.alignment_log_likelihood,\n            )\n        else:\n            alignment_info = compile_information_func(\n                jobs,\n                self.logger", "answers": ["                compile_information_func, jobs, self.working_log_directory, True"], "all_classes": null, "length": 3046}
{"pred": "       registry.put((byte) (GET_OBJECT_INSTANCE ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));\n        registry.put((byte) (GET_OBJECT_NAME ^ RESPONSE_MASK", "answers": ["        registry.put((byte) (GET_DOMAINS ^ RESPONSE_MASK), new StringArrayResponseHandler());"], "all_classes": null, "length": 824}
{"pred": "```\n\t\t\t\tout_color_array = convert_blue_lightblue(np.array((float(opts.paintsurface[1]),float(opts.paintsurface[2]))), img_data)\n```\n\n```\n\t\t\t\tif len", "answers": ["\t\t\t\tout_color_array = convert_bluetolightblue(np.array(( float(opts.paintsurface[1]),float(opts.paintsurface[2]) )), img_data)"], "all_classes": null, "length": 2032}
{"pred": "   super.setUp();\n    this.locators = new VerifierProvider[] {new DefaultPublicKeyLocator()};\n    this.locatorsFromRuby = new VerifierProvider[] {new FakeRubyVerifier()};\n  }\n}\n```\n\nPlease provide the", "answers": ["    final Verifier hmacVerifier = new HmacSHA256Verifier(SYMMETRIC_KEY);"], "all_classes": null, "length": 1353}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        self.host = None\n        self.port = None\n        self.connected = False\n        self.in_transaction = False\n        self.serialization_type = OrientSerialization.CSV\n        self.auth", "answers": ["        elif _type['type'] == LINK:"], "all_classes": null, "length": 1740}
{"pred": "   private void updateImage(Bitmap bitmap) {\n        ImageView image = (ImageView) findViewById(R.id.image);\n        image.setImageBitmap(bitmap);\n        image.setScaleType(ImageScaleType.FIT_XY);\n        image.setAdjustViewMode", "answers": ["    public Prefs prefs;"], "all_classes": null, "length": 3533}
{"pred": " private static final SimpleProgressFormat DEFAULT_FORMAT = new SimpleProgressFormat();\n\n  private final Map<String, Slf4jMonitor> monitors = new ConcurrentHashMap<>();\n  private final LruCache<String, Slf4jMonitor> cache = new LruCache", "answers": ["  private final transient Map<String, ProgressMonitorListener> cache = new LruCache(getCacheSize());"], "all_classes": null, "length": 2514}
{"pred": "   def process_bitmap_definition(self, state, bit_operator, member):\n        \"\"\"\n        :param state: The state of the processing\n        :param bit_operator: The bit operator for read/write bits\n        :param member: The member to process\n        \"\"\"\n       ", "answers": ["            elif member_type is FixedReplicationDescriptor:"], "all_classes": null, "length": 1868}
{"pred": "       registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);\n\n        registerCallAction(new DummyAction(this), DummyAction.DUMMY_ACTION_ID);\n\n        updateRequired = true;\n    }", "answers": ["        registerCallAction(new VolumeUpAction(this), VolumeUpAction.VOLUME_UP_ACTION_ID);"], "all_classes": null, "length": 1561}
{"pred": "\t\t\tTickEvent.call(this, e);\n\t\t}\n\t\t\n\t\tif (this.keys[4]) \n\t\t{\n\t\t\tfloat jump = yd;\n\t\t\tif (inWater) \t\t\n\t\t\t\t", "answers": ["\t\t\tTickHandler.EVENT_BUS.postEvent(e);"], "all_classes": null, "length": 3452}
{"pred": "   private KryptnosticCryptoServiceLoader( KryptnosticConnection connection, KryptnosticConverter converter ) {\n        this.connection = connection;\n        this.converter = converter;\n    }\n}\n\nsrc/main/java/com/kryptnostic/v", "answers": ["    public KryptnosticClient newClient() throws ClassNotFoundException, IrisException, ResourceNotFoundException,"], "all_classes": null, "length": 2334}
{"pred": "   account = account_for_tumblr_user(userinfo['url_id'], person=person)\n    if account:\n        account.save()\n        return HttpResponseRedirect('http://www.tumblr.com/')\n    else:\n        return HttpResponse", "answers": ["    account = account_for_tumblr_userinfo(userinfo, person=person)"], "all_classes": null, "length": 1774}
{"pred": "               # Get Screen Resolution\n                res = get_screen_resolution()\n                data = {'res': res, }\n                return HttpResponse(json.dumps(data))\n    except:\n        PrintException(\"[ERROR] Get_env\")\n        return HttpResponseRedirect('/error", "answers": ["                install_and_run(toolsdir, app_path, package, launcher, True)"], "all_classes": null, "length": 1743}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tp.sendMessage(ChatColor.DARK_PURPLE + Main.locale.getMessage(\"info.personal.spectating\")); // tell them"], "all_classes": null, "length": 3710}
{"pred": "           if jsoned[\"device_id\"] == device_id:\n                ips.append(IPAddress(jsoned))\n        return ips\n\n    def create_device_ip(self, device_id, address):\n        data = self.call_api(\n            \"dev", "answers": ["            ip = IPAddress(jsoned, self)"], "all_classes": null, "length": 2464}
{"pred": "       mAppbarSearch.setTitle(R.string.search);\n        mAppbarSearch.setSubtitle(R.string.search_hint);\n        mAppbarSearch.setElevation(10f);\n        mAppbarSearch.setBackgroundDrawable(MDT", "answers": ["        StatusBarUtil.immersive(this);"], "all_classes": null, "length": 2979}
{"pred": "\tpublic APIWrapperFactory(String endpointUrl, String jurisdictionId,\n\t\t\tFormat format) {\n\t\tsuper();\n\t\tthis.endpointUrl = endpointUrl;\n\t\tthis.jurisdictionId = jurisdictionId;\n\t\tthis.format = format;\n", "answers": ["\tprivate NetworkManager networkManager = new HTTPNetworkManager(Format.XML);"], "all_classes": null, "length": 3104}
{"pred": "\n        CreditCard newCreditCard = new CreditCard(bankName, number, firstCreditPeriodLimit, currency, type, closing, due);\n        //Add new credit card to database\n        //...\n    }\n\n\n    public void onItemClick(View view, int", "answers": ["        ExpenseManagerDAO dao = new ExpenseManagerDAO(this);"], "all_classes": null, "length": 3790}
{"pred": "           varray[i] = f.visit(rarray[i]).toString();\n        }\n        return varray;\n    }\n\n    protected MatlabValue parseValue(String name, MatlabValue value)\n            throws MatlabException {\n        try {\n            return value", "answers": ["            String safe = f.apply(new MatlabString(rarray[i]));"], "all_classes": null, "length": 2714}
{"pred": "\n    # Test one item to determine case handling\n    item0 = list(self.conditional.values())[0]\n\n    # If the conditional distribution is a list of lists,\n    # we will use the first list as the index distribution\n    # and the second list as the conditional", "answers": ["class PortfolioConsumerFrameType(FrameAgentType, PortfolioConsumerType):"], "all_classes": null, "length": 3454}
{"pred": "\t\t* @param resourceManager the ResourceManager to use to load test resources.\n\t\t* @throws RuleExecutorException if an error occurs loading resources.\n\t */\n\tpublic RuleExecutorTest(ResourceManager resourceManager) throws RuleExecutorException {\n\t\tthis.ruleExecutor = new Rule", "answers": ["\tprivate TestConceptService conceptService;"], "all_classes": null, "length": 3889}
{"pred": "from tousix_manager import models\n\nI have a problem with the code above, I would like to know how to fix it, thank you for your help.", "answers": ["@admin.register(Switchlink)"], "all_classes": null, "length": 2184}
{"pred": "   try:\n        # Connect to the ADB server\n        adb.connect(toolsdir)\n        # Wait for the ADB server to start\n        wait(5)\n        # Get the ADB port\n        port = adb.get_port()\n        # Print the A", "answers": ["    Proxy('', '', '', '')"], "all_classes": null, "length": 1562}
{"pred": "    */\n    private AdRetriever adRetriever;\n\n    private MediaModel mediaModel;\n\n    private boolean isAdClicked = false;\n\n    private boolean isAdShowing = false;\n\n    private int adPosition = C.AD_UNKNOWN;", "answers": ["    private AdRetriever adRetriever;"], "all_classes": null, "length": 2715}
{"pred": "       registry.put(QUERY_EXP, new QueryExpHandler());\n        registry.put(QUERY_MBEANS, new QueryMBeansHandler());\n        registry.put(QUERY_NAMES, new QueryNamesHandler());\n        registry.put(REMOVE_", "answers": ["        registry.put(IS_REGISTERED, new IsRegisteredHandler());"], "all_classes": null, "length": 931}
{"pred": "   for ap in merged_assembly_points:\n        for source, aps in assembly_points_by_sources.items():\n            for ap_ in aps:\n                if ap_.seq1 == \"?\" or ap_.seq2 == \"?\":\n                    continue\n                if", "answers": ["    compute_and_update_assembly_points_conflicts(assembly_points_by_ids=merged_assembly_points_by_ids)"], "all_classes": null, "length": 1723}
{"pred": "           message.segments.insert(\n                2,\n                HNSHA2(\n                    security_profile=SecurityProfile(SecurityMethod.CBC, self.security_method_version),\n                    security_function='999',\n                    key_id=random.rand", "answers": ["                security_role=SecurityRole.ISS,"], "all_classes": null, "length": 1417}
{"pred": "   def test_object_source_raw(self):\n        class ObjectDynamic(Object):\n            class Types(Enum):\n                dynamic = 1\n\n            def __init__(self):\n                self.type = Object.Types(\"dynamic\")\n\n            def get_default_sample(", "answers": ["        self.assertIsInstance(Object.factory(\"none\", \"v1\"), ObjectNone)"], "all_classes": null, "length": 1381}
{"pred": "\n    elif re.match('^[0-9a-zA-Z_]+$', package):\n        # Check if Package is a valid APK\n        if is_apk(package):\n            print \"[INFO] App is a valid APK\"\n            return HttpResponseRedirect('/dynamic", "answers": ["                    refresh_avd(adb, settings.AVD_PATH, settings.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1547}
{"pred": "```\n    from montreal_forced_aligner.command_line import create_parser\n    from montreal_forced_aligner.command_line import run_train_ivector\n    from montreal_forced_aligner.command_line import run_train_lm\n", "answers": ["            update_global_config(args)"], "all_classes": null, "length": 1540}
{"pred": "\n    public CaptureSession(MinemaConfig config) {\n        super(config);\n        modules.add(new FrameImporter(config));\n        modules.add(new DisplaySizeModifier(config));\n        modules.add(new GameSettingsModifier(config));\n        modules.", "answers": ["    private CaptureTime time;"], "all_classes": null, "length": 2248}
{"pred": "   return elab_tools.cast(expr, ty)\n\n\n@with_info(st_term)\ndef rem_cast(expr):\n    return elab_tools.rem_cast(expr)\n\n\n@with_info(st_term)\ndef rem_ty", "answers": ["    return Box(triv(), expr, ty)"], "all_classes": null, "length": 1771}
{"pred": "   bv2pysmt = functools.partial(bv2pysmt, env=self.env)\n    bv2pysmt = bv2pysmt(bx)\n    bv2pysmt = bv2pysmt(by)", "answers": ["        self.assertEqual(bv2pysmt(ZeroExtend(bx, 2)), zext(px, 2))"], "all_classes": null, "length": 2534}
{"pred": "\t\tlinkers.add(new CustomParamToSpatial());\n\t\tlinkers.add(new CustomParamToMaterial());\n\t\tlinkers.add(new GeometryToNode());\n\t\tlinkers.add(new MaterialToGeometry());\n\t\tlinkers.add", "answers": ["\t\tlinkers.add(new AnimationToSpatial());"], "all_classes": null, "length": 1043}
{"pred": "\n    return new JsonObjectRequest(url);\n}\n\n    /**\n     * Create a JSONObject type handle, custom handle method, method from {@link RequestMethod}.\n     *\n     * @param url           such as: {@code http://www.nohttp.net}.\n     *", "answers": ["        return new JsonObjectRequest(url);"], "all_classes": null, "length": 3108}
{"pred": "   assert u2.dimensions == power\n\n    assert_equal(u1.dimensions, power)\n    assert_equal(u2.dimensions, power)\n\n\ndef test_create_with_negative_exponent():\n    \"\"\"\n    Create units with negative exponents", "answers": ["    assert u2.dimensions == rate"], "all_classes": null, "length": 2042}
{"pred": "    * @param apiKey The API key to use for the request\n     */\n    public Observable<Plan> plan(String apiKey) {\n        if (apiKey == null || apiKey.isEmpty()) {\n            throw new IllegalArgumentException(\"API key can't be null or empty", "answers": ["    public Observable<ApiStatus> info() {"], "all_classes": null, "length": 2260}
{"pred": "               RibaoStoryBeanDao.Properties.Id.eq(view.getId()))) { // 如果是新的Story，则添加到缓存中。\n                    mPresenter.onStoryClick(view.getId());\n                }\n            }\r\n       ", "answers": ["                        RibaoStoryBeanDao.Properties.Id.eq(((RibaoStoryBean) mAdapter.getItem(i)).getId()))) {\r"], "all_classes": null, "length": 1936}
{"pred": "\n            return HttpResponseRedirect(reverse('done'))\n        else:\n            return render_to_response('redsolutioncms/frontpage.html', {'form': frontpage_form}, context_instance=RequestContext(request))\n    else:\n        frontpage_form = Front", "answers": ["                except AlreadyMadeException:"], "all_classes": null, "length": 1433}
{"pred": "\t\t\t\ttypeSpecBuilder.addMethod(MethodSpec.builder(className.getMethodName(),\n\t\t\t\t\t\tMethodSpec.MethodSpecifier.METHOD, className.getClassName(),\n\t\t\t\t\t\tParameterSpec.builder(actualClassCapture, \"super", "answers": ["\t\t\ttypeSpecBuilder.superclass(type(className, T));"], "all_classes": null, "length": 2674}
{"pred": "       StepCounterCollector.createDBStorage(deviceID);\n        // VideoCollector.createDBStorage(deviceID);\n    }\n\n\n    public static void flushDBCache()\n    {\n        // nothing\n    }\n}\n\\end{code}\n\nPlease complete the", "answers": ["        StepCounterCollector.createDBStorage(deviceID);"], "all_classes": null, "length": 3430}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(URI, self).__init__(*args, **kwargs)\n\n\nclass FlagList(object):\n    def __init__(self, *args, **kwargs):\n        super(FlagList, self).__init", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\nself.set_session_id(self._orientSocket.session_id)\nself.set_connected(self._orientSocket.connected)\nself.set_db_opened(self._orientSocket.db_opened)\nself.set_cluster_opened(self._", "answers": ["        self._append( ( FIELD_STRINGS, [NAME, VERSION] ) )"], "all_classes": null, "length": 1700}
{"pred": "       self.set_cluster_id(params[0])\n        self.set_cluster_position(params[1])\n        self.set_record_type(params[2])\n        self.set_record_version(params[3])\n        self.set_record_content", "answers": ["        self._append(( FIELD_BYTE, TX_COMMIT_OP ))"], "all_classes": null, "length": 3275}
{"pred": "     throw new NetworkException(\"No valid station ID found\");\n    }\n    String stationId = getWentryID();\n    String trackId = getId();\n    URL url = new URL(\"https://play.google.com/music/stream/\" + stationId + \"/\" + trackId", "answers": ["      throw new IOException(Language.get(\"track.InvalidWentryID\"));"], "all_classes": null, "length": 2705}
{"pred": "```\n    script_line_list = [\n        \"#, filename: '{}'\".format(filename),\n        \"#, created by tcconfig on {}\".format(datetime.datetime.now()),\n        \"#, command sequence in this script attempt to simulate the following tcconfig command:\",", "answers": ["            Tc.Command.TCSHOW, command_history, filename_suffix=\"-\".join(options.device)"], "all_classes": null, "length": 1874}
{"pred": "\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tJoinResult result = JoinResult.FAILED;\n\t\tif (getRound() != null) {\n\t\t\tthrow new PlayerPresentException(\"Player is already in a round", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   L = fadeout(2.5 * s)\n    assert almost_eq(L, (.1 * x for x in xrange(10)))\n\n  def test_ones(self):\n    s, Hz = sHz(rate=6)\n    L = ones(", "answers": ["    L = fadeout(2 * s)"], "all_classes": null, "length": 2605}
{"pred": "\tAlertRepository alertRepository;\n\t\n\tpublic void loadRecords(String filePath) {\n\t\ttry {\n\t\t\tbeanReader = new CsvBeanReader(new FileReader(filePath));\n\t\t\twhile (beanReader.read()) {\n\t\t\t\tString", "answers": ["\tAlertRepository alertRepository;"], "all_classes": null, "length": 1393}
{"pred": "               path = joinPaths(relativePathToPattern, patternPathToFile);\n                parentPath = pathToPattern.getParent();\n            } else {\n                path = FileUtil.normalizePath(source.getPath());\n                parentPath = root;\n            }\n\n            String", "answers": ["                path = sepAtStart(normalizePath(joinPaths(relativePathToPattern, patternPathToFile, source.getName())));"], "all_classes": null, "length": 2616}
{"pred": "\tprivate CommentService commentService;\n\tprivate CommunityService communityService;\n\tprivate BoardService boardService;\n\n\tpublic CommunityController() {\n\t\tsuper();\n\t}\n\n\t@Secured(value = \"viewAny\")\n\t@RequestMapping(value = \"/board/{board", "answers": ["    CommunityService communityService;"], "all_classes": null, "length": 1818}
{"pred": "\t\tList<Menu> menus = new ArrayList<>();\n\t\tList<Permission> permissions = new ArrayList<>();\n\t\tList<Function> functions = new ArrayList<>();\n\t\tList<Post> posts = new ArrayList<>();\n\t\tList<PostFunction> postFunctions = new ArrayList<>();\n", "answers": ["\t\tEmployee employee = null;\r"], "all_classes": null, "length": 3898}
{"pred": "   commentProcessorRegistry = new CommentProcessorRegistry();\n    commentProcessorRegistry.add(new DisplayIfProcessor());\n    commentProcessorRegistry.add(new DisplayIfProcessor());\n    commentProcessorRegistry.add(new DisplayIfProcessor());\n    commentProcessorRegistry.add(new DisplayIfProcessor());\n   ", "answers": ["    for (Map.Entry<Class<?>, ITypeResolver> entry : config.getTypeResolvers().entrySet()) {"], "all_classes": null, "length": 3197}
{"pred": "\t\t@Override\n\t\tpublic String getTitle(int a) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic View loadView(LayoutInflater inflater, int pos) {\n\t\t\t", "answers": ["\tIssue task;"], "all_classes": null, "length": 3252}
{"pred": "   if self.Open():\n      self.async_process_request(sink_stack, msg, stream, headers)\n\n  def _OnGet(self, node):\n    self.async_process_request(sink_stack, msg, stream, headers)\n\n  def", "answers": ["      msg.properties[MessageProperties.Endpoint] = n.endpoint"], "all_classes": null, "length": 1863}
{"pred": "           create_inactive_user(full_name, email)\n\n            # Send email to requester\n            subject = _('Request for account invitation')\n            message = _('A user has requested an account invitation.')\n            send_connect_email(subject, message, request", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\n    def get_login_redirect(self, *args, **kwargs):\n        return super().get_login_redirect(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            url = get_login_redirect("], "all_classes": null, "length": 1277}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(ArgumentsNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(FilterNode node) {\n        return", "answers": ["    public boolean add(MediaTypeNode node) {"], "all_classes": null, "length": 2828}
{"pred": "       self.velocity_schema = VelocitiesSchema()\n\n    def get(self):\n        \"\"\"Return the velocities data when a GET request is executed\"\"\"\n        result = self.velocity_schema.dump(self.velocities)\n\n        return result.data\n", "answers": ["        self.velocities_schema = VelocitiesSchema()"], "all_classes": null, "length": 1623}
{"pred": "       self.assertRaises(TypeError, Or)\n\n    def test_associativity(self):\n        a = Match(\"a\", \"a\")\n        b = Match(\"b\", \"b\")\n        self.assertEqual(Or(a, b), Or(b, a", "answers": ["        self.assertRaises(TypeError, Or)"], "all_classes": null, "length": 2542}
{"pred": "\n    def _encode_field(self, field):\n        # ...\n        return _content\n\n    def _encode_record(self, record):\n        # ...\n        return _content\n\n    def _encode_link(self, link):\n        # ...\n        return _", "answers": ["        elif t['type'] == BOOLEAN:"], "all_classes": null, "length": 1727}
{"pred": "\n    def __init__(self):\n        super(FlagList, self).__init__()\n        self.flags = []\n\n    def __add__(self, other):\n        if isinstance(other, FlagList):\n            return FlagList(self.flags + other.flags)", "answers": ["    @flags.register(HashAlgorithm)"], "all_classes": null, "length": 1390}
{"pred": "       .moshi(new Moshi())\n        .omdb(new OmdbRetrofit(this))\n        .tmdb(new TmdbRetrofit(this))\n        .build();\n    }\n\n    public ApplicationComponent getAppComponent() {\n        return applicationComponent", "answers": ["                .castRepositoryModule(new CastRepositoryModule())"], "all_classes": null, "length": 785}
{"pred": "\t\tv, f = convert_fs(fs_surface)\n\t\tif not os.path.exists(opts.outputfreesurfer):\n\t\t\tos.makedirs(opts.outputfreesurfer, exist_ok=True)\n\t\twith open(", "answers": ["\t\tv,f = convert_fs(str(opts.inputfreesurfer[0]))"], "all_classes": null, "length": 2047}
{"pred": "containsString(\"_source\"));\n    }\n\n    @Test\n    public void testXPath() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadRecords(Resources.asByteSource(Resources.getResource(\"data/csw/record1.xml\")));", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "   def test_is_not_ascii_with_hindi_messages(self):\n        self.assertTrue(is_not_ascii(u'\\u0930'))\n        self.assertTrue(is_not_ascii(u'\\u092f'))", "answers": ["        self.assertFalse(is_not_ascii(sixteen_month_reminder_one_day(\"English\")))"], "all_classes": null, "length": 1549}
{"pred": "\n    def visit(self, node):\n        return node.accept(self)\n\n    def visit_tuple(self, node):\n        return node.accept(self)\n\n    def visit_list(self, node):\n        return node.accept(self)\n\n    def", "answers": ["LET_TYPE = Func[[__var.bindings, __var.expr], __var.result]"], "all_classes": null, "length": 1468}
{"pred": "       self.loader = Loader.get()\n\n    def test_load_module(self):\n        module = self.loader.get()\n        self.assertIsInstance(module, _pyd_module)\n\n    def test_load_module_failure(self):\n", "answers": ["        mock = patch.object(Loader, \"cache\", None)"], "all_classes": null, "length": 2141}
{"pred": "           renderable = CanvasManager(self, e, parent)\n\n        else:\n            renderable = None\n\n        if renderable:\n            self._parse_element_inner(renderable, e, parent)\n\n    def _parse_element_inner(self, renderable", "answers": ["            renderable = SVGGroup(self, e, parent)"], "all_classes": null, "length": 1523}
{"pred": "\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor() };\n\t\t\n\t\tFile inputFile = new File(\"src/main/java/fr/insee/eno/main/src/main/java/fr/insee/eno/postprocessing/Postprocessor.java", "answers": ["\t\t\t\tnew FOInsertAccompanyingMailsPostprocessor()};"], "all_classes": null, "length": 2783}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(Integer, hash_key=True)\n        email = Column(String)\n        name = Column(String)\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   private void touchDown(int x, int y, int pointer, int button) {\n        // ...\n    }\n\n    public RigidBodiesScreen(Canvas canvas, RigidBodiesScreenDrawer drawer) {\n        this.canvas = canvas;\n        this", "answers": ["    private final List<Label> labels = new ArrayList<Label>();"], "all_classes": null, "length": 3762}
{"pred": "   purpose = 'register'\n    form = RegistrationForm()\n    return super(RegistrationView, self).form_valid(form)\n\nclass ResetPasswordView(ConfirmationMixin, XMPPAccountView):\n    purpose = 'reset_password'\n   ", "answers": ["    form_class = RegistrationForm"], "all_classes": null, "length": 1292}
{"pred": "       AlertDialog dialog = new AlertDialog.Builder(this).setTitle(R.string.notification)\n                .setMessage(result)\n                .setPositiveButton(R.string.positive_button_confirm, new DialogInterface.OnClickListener() {\n                    @Override\n                   ", "answers": ["        ImageDialog dialog = new ImageDialog(this);"], "all_classes": null, "length": 3804}
{"pred": "       LinkedEdgeTest.class,\n        LinkedVertexTest.class,\n        ManyToManyTest.class,\n        ManyToManyEdgeTest.class,\n        ManyToOneTest.class,\n        MultiPropertiesTest.class,\n        PropertyTest.class,\n        VertexPropertyTest", "answers": ["        LinkedEdgeTest.class,"], "all_classes": null, "length": 2012}
{"pred": "           FragmentObservable<SearchContactFragment> fragmentObservable = FragmentObservable.getInstance();\n            fragmentObservable.register(classToNotify);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs ="], "all_classes": null, "length": 2784}
{"pred": "\n            # Create brokers for each class\n            for base in bases:\n                if base.registry_plural:\n                    registry[base.registry_name] = base\n                else:\n                    self.registry[base.registry_name] = base\n", "answers": ["            is_edge = bases and bases[0].decl_type == DeclarativeType.Edge"], "all_classes": null, "length": 3757}
{"pred": "       return print_app_implicit(expr)\n\ndef print_app_implicit(expr):\n    \"\"\"Takes an application and prints it in the following way:\n    if the application is of the form (a0 f(a1, ..., an)), print\n    f(", "answers": ["        root, args = root_app(expr)"], "all_classes": null, "length": 1696}
{"pred": "       world.setGameStarted(true);\n        isGameStarted = true;\n        for (BombModel bombModel : GameServer.this.world.getBombModels().values()) {\n            bombModel.addBombListener(new BombListener() {\n                @Override\n", "answers": ["        startGameCommand.setFromUser(UserSession.getInstance().getUsername());"], "all_classes": null, "length": 6404}
{"pred": "\t@Autowired\n\tprivate UpdateProvider updateProvider;\n\t@Autowired\n\tprivate DeleteProvider deleteProvider;\n\t\n\t@Override\n\tpublic List<Provider> findAll() {\n\t\treturn selectAllProviders.queryForList();\n\t}\n\t\n\t@Override", "answers": ["\tprivate InsertItem insertItem;\r"], "all_classes": null, "length": 917}
{"pred": "\n    public static <$Value> AbstractSupplierAssert<$Value> assertThat(Supplier<$Value> supplier) {\n        return new AbstractSupplierAssert<$Value>(supplier) {\n            @Override\n            protected void verify() {\n                assertThat(result(supp", "answers": ["    public static DoublePredicateAssert resultOf(CheckedDoublePredicateSupplier whenStep) {"], "all_classes": null, "length": 1467}
{"pred": "\n        self.fetch_response()\n\nclass RecordUpdateMessage(BaseMessage):\n    def prepare(self, *args, **kwargs):\n        pass\n\n    def set_record_version(self, *args, **kwargs):\n        pass\n\n    def set_record_type", "answers": ["        elif isinstance(operation, RecordDeleteMessage):"], "all_classes": null, "length": 3043}
{"pred": "\n    visitor.visit(self.main_module)\n\n\n  def __repr__(self):\n    return 'BytecodeObject(pyc_file=%r, code=%r, moddate=%r, modif_date=%r, all_decls=%r, has_", "answers": ["    if isinstance(visitor, BytecodeVisitor):"], "all_classes": null, "length": 2071}
{"pred": "\tprivate Consensus() {\n\t\tinitComponents();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew Consensus();\n\t}\n\n\tprivate void initComponents() {\n\t\t// JFormattedOutput formattedOutput = new JFormattedOutput();", "answers": ["\tprivate TreeFacade facade;"], "all_classes": null, "length": 6293}
{"pred": "       bind_column(column, NotAModel)\n\n    with pytest.raises(InvalidModel):\n        bind_index(index, NotAModel)\n\n\ndef test_bind_column_type():\n    class MyModel(BaseModel):\n        class Meta:\n           ", "answers": ["        bind_column(NotAModel, \"c\", column)"], "all_classes": null, "length": 2265}
{"pred": "\n        from plexapi.mixins import *\n        from plexapi.mixins import *\n        from plexapi.mixins import *\n        from plexapi.mixins import *\n        from plexapi.mixins import *\n        from plexapi.mixins", "answers": ["        CollectionMixin, CountryMixin, DirectorMixin, GenreMixin, LabelMixin, ProducerMixin, WriterMixin):"], "all_classes": null, "length": 5015}
{"pred": "   Station station = new Station();\n    station.setName(\"Imagine\");\n    station.setDescription(\"This is a station created by the test\");\n    station.setImageUrl(\"https://example.com/station_image.jpg\");\n    station.setSeed(new StationSe", "answers": ["    assume(track);"], "all_classes": null, "length": 3038}
{"pred": "   void inject(KioskModeHandler kioskModeHandler);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    void inject(KioskSettingsFragment fragment);"], "all_classes": null, "length": 6924}
{"pred": "       // dMeta.interval = new Interval(dMeta.dataSource, dMeta.interval.getStart(), dMeta.interval.getEnd() + 62 * 24 * 60 * 60 * 1000);\n        dPgm.print", "answers": ["        Interval expandedInterval = dMeta.interval.expandEndTimeByDay(62);"], "all_classes": null, "length": 3924}
{"pred": "   gl = OrthoManipulator(state, size, cmap_abs, cmap_diff, inc_size, orientation, vrange_img, vrange_diff,\n                    modifier, insets, views, modifiers, toolbar=None)\n\ndef get_tile", "answers": ["    mdl = models.ConfocalImageModel()"], "all_classes": null, "length": 4416}
{"pred": "       OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment {\n\n    private static final String TAG = \"OhaMainActivity\";\n\n    private static final int REQUEST_ENABLE_FINE_LOCATION = 1;\n    private static final int REQUEST_ENABLE_", "answers": ["        OhaRestoreDatabaseFragment.IOhaRestoreDatabaseFragment, SwipeRefreshLayout.OnRefreshListener {"], "all_classes": null, "length": 5219}
{"pred": "           public void handleResponse(FiComResponse response) {\n                System.out.println(\"Received response: \" + response.getStatus());\n                System.out.println(\"Received response details: \" + response.getStatusDetail());\n            }\n        };\n        \n        // Send request\n", "answers": ["            public void onResponse(final FiComRequest req, final FiComResponse resp) {"], "all_classes": null, "length": 7178}
{"pred": "\t\t// Get the data\n\t\tObject obj = xstream.load(new File(casePath));\n\t\t\n\t\t// Process the data\n\t\tProcess process = (Process) obj;\n\t\tprocess.run();\n\t}\n    }\n}\n\n\n\n\n", "answers": ["\t\txstream.alias(\"SystemDateTimeModule\", SystemDateTimeModule.class);"], "all_classes": null, "length": 6491}
{"pred": "       Constraint constraint = method.getAnnotation(Require.class).value();\n        key.addConstraint(constraint);\n      }\n\n      // Add the final key to the outline\n      outline.addFinalKey(key.build());\n    }\n\n    return error;\n ", "answers": ["        for (Class<? extends Constraint> constraint : method.getAnnotation(Require.class).value()) {"], "all_classes": null, "length": 4522}
{"pred": "       return self.Args.get('yamlfile') in ('.yaml', '.gaml')\n\n    def reset_aux_files(self):\n        self.gelfilepath = None\n        self.yamlfile = None\n        self.annotationsfile = None\n        self.g", "answers": ["        return filename_is_yaml(self._primary_file)"], "all_classes": null, "length": 5914}
{"pred": "\n\tdef populate_sketch(self, sketch):\n\t\tfor child in sketch.get_children():\n\t\t\tif type(child) is Edge:\n\t\t\t\tself.add_edge(child)\n\t\t\telif type(child) is KeyPoint:\n\t", "answers": ["\t\telif type(obj) is PartView:"], "all_classes": null, "length": 6610}
{"pred": "\tprivate void updateScore() {\n\t\tteam1Score.setText(team1.getScore() + \"\");\n\t\tteam2Score.setText(team2.getScore() + \"\");\n\t}\n\t\n\tpublic MatchPanel() {\n\t\tsuper();\n\t\tset", "answers": ["\tprivate SaveFile saveFile;"], "all_classes": null, "length": 4523}
{"pred": "\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate IPlogServices iplogServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t", "answers": ["\tprivate SubmissionServices submissionServices;"], "all_classes": null, "length": 6104}
{"pred": "\t\t\t\t\tSpatialOrdering.MIXED_MODE);\n\t\t\t\n\t\t\tfor (ChunkBlock chunk : chunkList) {\n\t\t\t\tclassfier.setDocument(document);\n\t\t\t\tclassfier.setChunk(chunk", "answers": ["\t\t\t\t\tSpatialOrdering.COLUMN_AWARE_MIXED_MODE);"], "all_classes": null, "length": 7328}
{"pred": "   self.log_info(\"Initialized\")\n\n    def log_info(self, message: str) -> None:\n        \"\"\"\n        Log information messages\n\n        Parameters\n        ----------\n        message: str\n            Message to log\n        \"\"\"\n        with open(os", "answers": ["    def add_file(self, file: File) -> None:"], "all_classes": null, "length": 6234}
{"pred": "           alignment_info = compile_information_func(jobs, self.working_log_directory)\n\n        compile_info_end = time.time()\n        self.logger.debug(f\"Compile information took {compile_info_end - compile_info_begin:.2", "answers": ["            alignment_info = run_non_mp("], "all_classes": null, "length": 4716}
{"pred": "           //X509CertificateChain chain = new X509CertificateChain(new File(\"path/to/cert.pem\"));\n            //CertificateToken token = new CertificateToken(chain);\n            //service.setSignatureCertificate(token);\n            \n           ", "answers": ["            X509CertificateChain chain = null;"], "all_classes": null, "length": 4403}
{"pred": "       return so(size.value, unit.value)\n\n    def get_memory_usage(self):\n        \"\"\"Get the current memory usage of the system.\n\n        :type: Structobject with the following members:\n\n            total (int)\n              Total memory usage in bytes.", "answers": ["        return so(size=size.value, unit=TIMEUNIT(unit.value))"], "all_classes": null, "length": 5131}
{"pred": "   validate_key_condition(model, index, key)\n\n\ndef test_range_key_success(engine):\n    # This test is only for the case where the range key is not None\n    query_on = GlobalSecondaryIndex(\"my_index\", \"my_key\")", "answers": ["    with pytest.raises(InvalidSearch):"], "all_classes": null, "length": 4644}
{"pred": " @GET(\"sj/v2.5/playlist/{playlistId}\")\n  Call<Playlist> getPlaylist(@Path(\"playlistId\") String playlistId);\n\n  @GET(\"sj/v2.5/track/{trackId}\")\n  Call<", "answers": ["  Call<MutationResponse> batchCall(@Url String path, @Body Mutator mutator);"], "all_classes": null, "length": 5032}
{"pred": "           yield self.restapi.get(appif.id)\n\n\n    def test_post(self):\n        \"\"\"Test post method\"\"\"\n        interface = self._test_azureiothttps()\n        appif = self._test_appinterface()\n        interface.appinterface =", "answers": ["            resource = RestAppInterface(restapi=self.restapi, server=self.server)"], "all_classes": null, "length": 5691}
{"pred": "   with open(schema, 'r') as f:\n        schema_data = f.read()\n\n    service_config_reader = ServiceConfigReader(schema_data)\n    yield service_config_reader\n\n\ndef test_create_resource(bigip_proxy, ltm", "answers": ["    service_mgr = ServiceManager("], "all_classes": null, "length": 5986}
{"pred": "   url(r'^(?P<language_id>[\\w\\-\\+]+)/(?P<release_slug>[\\w\\-\\+]+)$',\n        LanguageReleaseView.as_view(), name=\"language-release\"),\n]\n\nlanguage_urls = [\n    url(", "answers": ["        LanguageReleaseView.as_view(), name=\"language-release-view\"),"], "all_classes": null, "length": 5272}
{"pred": "       IMessageListener {\n    private static final String TAG = \"ControlActivity\";\n    private static final String PREFS_NAME = \"prefs\";\n    private static final String PREFS_KEY_THEME = \"theme\";\n    private static final String PREFS_KEY_", "answers": ["        OnPanelResumedListener {"], "all_classes": null, "length": 7406}
{"pred": "       while True:\n            try:\n                outline_entry = next(outline_contents)\n                #log(outline_entry)\n                if outline_entry['page'] is None:\n                    # XXX handle this case\n                    continue\n                page_num = outline_entry", "answers": ["        localise_number = get_number_localiser(self.page_number_style)"], "all_classes": null, "length": 4641}
{"pred": "\n    url(r'^(?P<stream_slug>[\\w-]+)/(?P<version>[\\w\\-]+)/(?P<release_slug>[\\w\\-]+)$',\n        ReleaseView.as_view(), name=\"release-view\"),\n]\n\nsearch", "answers": ["    url(r'^view/(?P<release_branch>[\\w\\-\\+]+)$', TranStatusReleaseView.as_view(), name=\"trans-status-release\"),"], "all_classes": null, "length": 5226}
{"pred": "```\n    def parse(self, packet):\n        hl = self.bytes_to_int(packet[:2])\n        del packet[:2]\n\n        plen = self.bytes_to_int(packet[:2])\n        del packet[:2]\n\n       ", "answers": ["class PrivKey(VersionedPacket, Primary, Private):"], "all_classes": null, "length": 5382}
{"pred": "               banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));\n                banner.setIndicator(new CircleIndicator(this));\n                banner.setIndicatorGravity(IndicatorConfig.Direction.CENTER);\n                break;\n            case R.id", "answers": ["                banner.setAdapter(new ImageTitleNumAdapter(DataBean.getTestData()));"], "all_classes": null, "length": 5279}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t\ta.read(reader);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tToast", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "                       updateUI(chat);\n                    }\n                }\n        );\n        resetStatus.setOnClickListener(\n                new View.OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                        chat.setStatusChanged(false);\n                        String", "answers": ["                        new UpdateTask<>(DatabaseManager.INSTANCE.getChatDAO(),"], "all_classes": null, "length": 5064}
{"pred": "   QueryRequest queryRequest = new QueryRequest();\n    queryRequest.setQuery(\"SELECT * FROM <http://example.org/people> WHERE { ?person rdf:type <http://example.org/Person> . }\");\n    queryRequest.setMaxSize(batchSize);\n   ", "answers": ["    DataSource ds = new SHPDataSource(serverAddress.getHostName(),"], "all_classes": null, "length": 6070}
{"pred": "       channels.setPreferredSize(new Dimension(100, 200));\n        channels.setLayout(new GuiGridLayout(1, 0, 10, 10));\n        channels.addComponent(new GuiText(I18n.", "answers": ["        channels.getContentPanel().setLayout(new VerticalLayout());"], "all_classes": null, "length": 6424}
{"pred": "\n    }\n\n    @Test\n    public void testCsvRecordsDirectory() throws IOException, SourceException {\n        DirectorySource source = new DirectorySource(baseDirectory.resolve(\"csv\"));\n        Collection<SourceRecord> records = source.getRecords(new ReportImpl());\n        assert", "answers": ["        BuilderRecord mappedRecord = (BuilderRecord) mapper.map(iter.next());"], "all_classes": null, "length": 4025}
{"pred": "   private KeepAliveManager(Connection connection) {\n        weakRefConnection = new WeakReference<Connection>(connection);\n    }\n\n    public static KeepAliveManager getInstanceFor(Connection connection) {\n        KeepAliveManager instance = instances.get(connection);\n        if (", "answers": ["    private Set<PingFailedListener> pingFailedListeners = Collections"], "all_classes": null, "length": 6396}
{"pred": "   @Provides\n    FsmPlayerImperial provideFsmPlayerImperial() {\n        return new FsmPlayerImperial(new FsmPlayer(new StateFactory()));\n    }\n\n    @ActivityScope\n    @Provides\n    FsmPlayer provide", "answers": ["    VpaidClient provideVpaidClient(FsmPlayer player) {"], "all_classes": null, "length": 4405}
{"pred": "\t\tObject result = traverse(modelAdaptor.getModel(), segments, errorHandler, new InvalidToken());\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// if we reach this point, we have a syntax error\n\t", "answers": ["\tprotected transient TemplateContext context;"], "all_classes": null, "length": 4127}
{"pred": "\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        view = inflater.inflate(R.layout.layout_main_fragment, container, false);\n\n        actionBar = getActionBar();\n        actionBar.setDisplay", "answers": ["    private WatchItemAdapter watchItemAdapter;"], "all_classes": null, "length": 6232}
{"pred": "               startActivity(new Intent(DownloadActivity.class));\n                break;\n        }\n    }\n\n    public static void startDownloadActivity(Context context) {\n        Intent intent = new Intent(context, DownloadActivity.class);\n        context.startActivity(intent);\n    }\n", "answers": ["            case DownloadOptionAdapter.FOLDER_CHOOSER_TAG:"], "all_classes": null, "length": 5470}
{"pred": "\n    def test_node_creation(self):\n        node = Node(self.connector, self.sender, self.recipient, self.reply_port, self.version)\n        self.assertIsInstance(node, Node)\n        self.assertEqual(node", "answers": ["                                      PRIVATE_KEY, 999999)"], "all_classes": null, "length": 6239}
{"pred": "\t\tDlgGoals(self.wnd).run(True)\n\t\tself._filter_tree_ctrl.RefreshItems()\n\n\tdef _on_menu_task_add_subtask(self, _evt):\n\t\tTaskController(self.wnd, self", "answers": ["\t\tDlgGoals(self.wnd).run(True)"], "all_classes": null, "length": 6117}
{"pred": "\t\t\ta, SS_Total = cy_lin_lstsq_mat(exog_vars, endog)\n\t\t\tendog = np.dot(exog_vars, a)\n\t\t\texog_vars = np.array(exog_vars)\n\t", "answers": ["\t\t\tF_a, F_s, F_sa = reg_rm_ancova_one_bs_factor(data, "], "all_classes": null, "length": 4307}
{"pred": "           self.event_loop.call_soon(self.replicate_store, message)\n\n    def handle_value(self, message):\n        \"\"\"\n        Handles incoming value messages.\n        \"\"\"\n        # Check the message's expiry time.\n        if message.", "answers": ["            self.event_loop.call_later(REPLICATE_INTERVAL, self.republish,"], "all_classes": null, "length": 4976}
{"pred": "   void inject(KioskModeHandler kioskModeHandler);\n}\n\n@Module\npublic class ApplicationModule {\n\n    @Provides\n    @Singleton\n    @ActivityScope\n    public Activity getActivity() {\n        return getApplicationContext().getActivity();\n   ", "answers": ["    void inject(MainSettingsFragment fragment);"], "all_classes": null, "length": 6927}
{"pred": "\n    ImportAPI,\n    JobAPI,\n    PartialDeleteAPI,\n    ResultAPI,\n    ScheduleAPI,\n    ServerStatusAPI,\n    TableAPI,\n    UserAPI,\n):\n    pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ImportAPI,"], "all_classes": null, "length": 6686}
{"pred": "\t\t\tList<MatchExplanation> explanations = getRelationQueryNodeExplanations(relationQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRQueryNode query", "answers": ["\t\t\tNormalizationOptions normalizationOptions = expanderOptions.getNormalizationOptions(fieldName);"], "all_classes": null, "length": 4388}
{"pred": "           self.uaA.recvEvent(event)\n            self.uaA.sendUasResponse(event.code, event.reason, event.body)\n            self.uaA.changeState((UaStateFailed, self.uaA.fail_cbs, self.ua", "answers": ["              (isinstance(self.uaA.state, UasStateTrying) or isinstance(self.uaA.state, UasStateRinging)) and len(self.routes) > 0:"], "all_classes": null, "length": 7114}
{"pred": "\tif not os.path.exists(temp_directory):\n\t\tos.mkdir(temp_directory)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tposition_array = create_position_array(masking_array)"], "all_classes": null, "length": 4312}
{"pred": "\n                application.onCreate();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return application;\n    }\n\n    public static Intent getMainActivityIntent(ApkLoaded loaded) {\n        Intent intent = new Intent(loaded.getApk", "answers": ["                ApkMethod method = new ApkMethod(Application.class, application, \"attach\", Context.class);"], "all_classes": null, "length": 4410}
{"pred": "           raise InvalidDicomError(\"No appropriate DICOM header found\")\n\n    return preamble\n\ndef read_dataset(fp, is_implicit_VR=True, is_little_endian=True,\n                 stop_when_not_group_2=", "answers": ["            raise InvalidDicomError(\"File is missing 'DICM' marker. \""], "all_classes": null, "length": 7206}
{"pred": "   gpsi = GPSImputer(rng=rng, x_in=x_in, x_mask=x_mask, x_out=x_out, \\\n                        p_zi_given_xi=p_zi_given_xi, \\\n", "answers": ["    GPSI = GPSImputer(rng=rng,"], "all_classes": null, "length": 4629}
{"pred": "           // Check if the app is installed\n            XposedChecker.showXposedNotInstalled(this);\n\n        }\n\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        if (CheckPreferences.getDark", "answers": ["        ThemeManager.applyTheme(this);"], "all_classes": null, "length": 5323}
{"pred": "       ReviewContentValues reviewContentValues = new ReviewContentValues();\n        reviewContentValues.put(ReviewColumns._ID, movie.getId());\n        reviewContentValues.put(ReviewColumns.MOVIE_ID, movie.getId());\n        reviewContentValues.put(Re", "answers": ["        MovieCursor movieCursor = movieSelection.query(getContentResolver());"], "all_classes": null, "length": 4537}
{"pred": "   return int_to_words(value, lang)\n\n    return int_to_words(value, lang, fmt_modifier)\n\n\n##\n\ndef parse_datetime_function(context):\n    arg = context.get_argument(0)\n    if arg is None:", "answers": ["                result = '-' + format_digits(str(abs(value)), fmt_token, digits_family)"], "all_classes": null, "length": 7363}
{"pred": "\n        SvnJavaScmProviderRepository javaRepo = (SvnJavaScmProviderRepository) repository;\n        try\n        {\n            return new RemoteInfoScmResult( SvnJavaScmProvider.COMMAND_LINE, SvnJavaUtil.getRemoteInfo( java", "answers": ["        return new SvnJavaRemoteInfoCommand().executeRemoteInfoCommand( repository, fileSet, parameters );"], "all_classes": null, "length": 4300}
{"pred": "\t\t\t\tadapter.notifyItemRangeInserted(0, json.length());\n\t\t\t}\n\t}\n\n\tprivate void saveBackupFile(String path) {\n\t\tFile file = new File(path);\n\t\tif (!file.exists()) {\n\t\t", "answers": ["\t\tController.instance.readBackup(json);"], "all_classes": null, "length": 4364}
{"pred": "           AnyAtomicType(1)\n\n    def test_invalid_value(self):\n\n        with self.assertRaises(ValueError):\n            AnyAtomicType(True)\n\n    def test_invalid_value_2(self):\n\n        with self.assert", "answers": ["            class InvalidAtomicType(metaclass=AtomicTypeMeta):"], "all_classes": null, "length": 6183}
{"pred": "\t\tnewList.beers = new ArrayList<>();\n\t\tnewList.beers.add(beer);\n\t\t// Add the new list to the database\n\t\tDb.insertCustomList(this, newList);\n\t\tpopup.dismiss();\n\t}\n\n", "answers": ["\t\tdatabase(this).put(newList);"], "all_classes": null, "length": 5462}
{"pred": "   mPullToRefreshLayout.setRefreshComplete();\n  }\n\n  @Override\n  public void onRefreshEnd(View view) {\n    mPullToRefreshLayout.setRefreshComplete();\n  }\n\n  @Override\n  public void onRefreshCanceled(View", "answers": ["    YouTubeService.startListRequest(getActivity(), mRequest, true);"], "all_classes": null, "length": 7566}
{"pred": "       install(new GerritDiffModule());\n\n        install(new GerritActionsModule());\n\n        bind(GerritSettings.class).toInstance(new GerritSettings());\n\n        bind(GerritRestApi.class).toInstance(new GerritRestApi());\n\n", "answers": ["        install(new GerritActionsModule());"], "all_classes": null, "length": 4734}
{"pred": "       DATA_AAD[loopt][loop i][0] = new DoubleAad(looptest, 0, 0, 0, 0);\n        DATA_AAD[loopt][loop i][1] = new DoubleAad(looptest, ", "answers": ["        int va0 = TAPE[loopt][0].addEntry(new TapeEntryAad(OperationTypeAad.INPUT, DATA[loopt][loopi]));"], "all_classes": null, "length": 4642}
{"pred": "   this.numericAccountId = context.getBean(CoreProperties.class).getNumericAccountId();\n  }\n\n  public void start()\n  {\n    readerStartTime = System.currentTimeMillis();\n    readerThreads = Math.max(1, Math.min", "answers": ["    if(CoreProperties.isPoolMining())"], "all_classes": null, "length": 6588}
{"pred": "       return new FsmPlayerImperial(factory);\n    }\n\n    @ActivityScope\n    @Provides\n    AdRetriever provideAdRetriever(AdRetriever adRetriever) {\n        return adRetriever;\n    }\n\n   ", "answers": ["        return new FsmPlayerImperial(factory) {"], "all_classes": null, "length": 4197}
{"pred": "\t\t\tpublic ExpansionResult visit(AlvisIRQueryNodeVisitor visitor, Void param) {\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t\t}\n\t\t}\n\n\t\tpublic List<MatchExplanation> getTermQueryNodeExplanations(Al", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRNoExpansionQueryNode noExpansionQueryNode, Void param) {"], "all_classes": null, "length": 4455}
{"pred": "   assert kwik.probe.positions[0, 0] == 10\n\n    with raises(ValueError):\n        kwik.probe.positions[0, 0] = -1\n\n    # Test waveform loading.\n    with raises(", "answers": ["    ae(kwik.probe.positions, staggered_positions(_N_CHANNELS)[1:-1][::-1])"], "all_classes": null, "length": 4752}
{"pred": "```\n            com_target_vel = (prev_right_foot.p - com_target_pos) / (ds_duration + 0.01)\n```\nThis code generates a staircase with a tilted center of mass and a varying height. The staircase is", "answers": ["            com_target = PointMass(com_target_pos, robot.mass, visible=False)"], "all_classes": null, "length": 6656}
{"pred": "\n  public NotificationListConverter() {\n    super();\n  }\n\n  public NotificationListConverter(NotificationListConverter delegate) {\n    super(delegate);\n  }\n\n  public NotificationListConverter(BinaryValue value) {\n    super(value);\n  }\n\n  public", "answers": ["                        .dataFetcher(\"removeNotification\", new RemoveNotificationMutation(store))"], "all_classes": null, "length": 7327}
{"pred": "```\n    def update_callee_session_exists(self, remote_ip, result_callback = None):\n        self.rtp_proxy_session = Rtp_proxy_session(self.global_config, call_id = self.call_id, from_tag = self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "       template_data = TemplateData(bit_reader)\n        decoded_descriptors = template_data.decoded_descriptors\n        decoded_values = template_data.decoded_values\n        decoded_nodes = template_data.decoded_nodes\n        n", "answers": ["        bufr_message = BufrMessage(file_path)"], "all_classes": null, "length": 5188}
{"pred": "           DBExport dx = new DBExport();\n            dx.export(export);\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ExportToText.saveAllLanguageDataToFile(language, export);"], "all_classes": null, "length": 4554}
{"pred": "       self.assertEqual(len(connector.send_queue), 1)\n\n    def test_send_error(self):\n        \"\"\"\n        Test the case where the send method fails.\n        \"\"\"\n        contact = PeerNode(PUBLIC_KEY, self.version", "answers": ["        msg_json = json.dumps(to_dict(msg))"], "all_classes": null, "length": 5299}
{"pred": "           StatusMessage statusMessage = Serialization.getJsonMapper().readValue(message, StatusMessage.class);\n            String command = statusMessage.getType();\n            if (command.equals(\"setEndTime\")) {\n                // Do something\n            } else if (command.equals(\"setStart", "answers": ["                StatusMessage msg = Serialization.getJsonMapper().readValue(message, StatusMessage.class);"], "all_classes": null, "length": 7332}
{"pred": "\tpublic void addListener(MantraToolListener listener) {\n\t\tlisteners.add(listener);\n\t}\n\n\tpublic void removeListener(MantraToolListener listener) {\n\t\tlisteners.remove(listener);\n\t}\n\n\tpublic void setErrorManager", "answers": ["\tDefaultToolListener defaultListener = new DefaultToolListener(this);"], "all_classes": null, "length": 4364}
{"pred": "       NetworkErrorDialogFragment networkErrorDialog = NetworkErrorDialogFragment.newInstance(msg);\n\n        if(networkErrorDialog == null) {\n            return;\n        }\n\n        if(!isInForeground) {\n            return;\n        }\n\n        networkErrorDialog.show", "answers": ["        NetworkErrorDialogFragment errorDialog = NetworkErrorDialogFragment.newInstance(msg);"], "all_classes": null, "length": 7485}
{"pred": "               showSnackBar(\"Day details not implemented yet!\");\n                return;\n            case R.id.action_edit:\n                OhaEnergyUseDaysFragment.update(this, beginDate, kwhCost);\n                return;\n            case R.id.action_delete", "answers": ["                long endDateTime = OhaHelper.getDateEnd(new Date(beginDate), false).getTime();"], "all_classes": null, "length": 5436}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "\t\tthis.saveFilePath = saveFilePath;\n\t}\n\t\n\tpublic void saveSequenceToFile() {\n\t\tString saveFilePath = this.saveFilePath;\n\t\tif (saveFilePath != null) {\n\t\t\ttry {\n\t\t\t\t", "answers": ["\t\tTeamInfo team1 = metadata.getTeam1();"], "all_classes": null, "length": 4735}
{"pred": "\tprivate FollowingCamera following;\n\n\tpublic ScreenGameMap(float pixPerMeter) {\n\t\tthis.pixPerMeter = pixPerMeter;\n\t}\n\n\tpublic void update() {\n\t\tif (following != null) {\n\t\t\tVector", "answers": ["\tprivate final ClientMaster client;"], "all_classes": null, "length": 4740}
{"pred": "\n\t\t\t\t}\n\n\t\t\t\tif (chunkBlock != null) {\n\t\t\t\t\tpageBlock.addChunkBlock(chunkBlock);\n\t\t\t\t}\n\n\t\t\t\tif (pageBlock.getMostPopularWordHeight() != -", "answers": ["\t\tidGenerator = pageBlock.addAll(new ArrayList<SpatialEntity>("], "all_classes": null, "length": 4012}
{"pred": "       DoFn.of(new FileToState()));\n\n    // Extract the GCPResourceState objects from the known-good states.\n    PCollection<KV<GCPResource, GCPResourceState>> knownGoodStates =\n        knownGoodStatesTuple.get(0", "answers": ["            .of(new FileToState(errorTag))"], "all_classes": null, "length": 4219}
{"pred": "       self.assertIsInstance(BooleanProxy(True), BooleanProxy)\n        self.assertIsInstance(BooleanProxy(False), BooleanProxy)\n        self.assertNotIsInstance(10, BooleanProxy)\n        self.assertNotIsInstance('hello', BooleanProxy)\n\n        self", "answers": ["        self.assertTrue(BooleanProxy(1))"], "all_classes": null, "length": 6327}
{"pred": "       for (int i = 0; i < mLayoutIds.length; i++) {\n            View view = findViewById(mLayoutIds[i]);\n            if (view != null) {\n                mItemLayouts.add(view);\n            }\n        }\n\n        // ", "answers": ["        final ArrayList<ShiftsWorkItem> tmpItems = mRecord.getItems();"], "all_classes": null, "length": 7215}
{"pred": "       resource = GyroscopeResource(aircraft.sensors.gyroscope)\n        gyroscope_data = resource.get()\n\n        self.assertAlmostEqual(gyroscope_data[\"x\"], 0, 3)\n        self.assertAlmostEqual(gy", "answers": ["        resource = GyroscopeResource(aircraft.sensors.gyroscope)"], "all_classes": null, "length": 4050}
{"pred": "           raise NoRaidForChannelError(ctx)\n\n\n    @staticmethod\n    async def send_raid_party_invite(ctx, party: RaidParty):\n        embed = discord.Embed(title=\"Join a Raid Party!\", description=party.", "answers": ["            raise NoRaidForChannelError(f\"Raid not found for channel {ctx.channel.mention}.\")"], "all_classes": null, "length": 4012}
{"pred": "   private Project project;\n    private ImageButton addFavoriteButton;\n    private ImageButton removeFavoriteButton;\n    private ProgressBar progressBar;\n    private TextView statusTextView;\n    private TextView notesTextView;\n    private ImageButton editButton;\n    private ImageButton deleteButton", "answers": ["    private ImageDialog dialog;"], "all_classes": null, "length": 6987}
{"pred": "           push(new MediaTypeNode()),\n            Optional(MediaTypeName()),\n            peek(1).addChild(pop()),\n            peek().addChild(new SimpleNode(\"(\")),\n            CssProperty(),\n            peek(1).addChild(pop()),\n            Ws", "answers": ["            push(new MediaTypeNode()),"], "all_classes": null, "length": 4182}
{"pred": "   if (n.f0.tokenImage.length() == 2) {\n      tokens = n.f0.tokenImage;\n    } else {\n      tokens = n.f0.tokenImage.substring(0, 1);\n    }\n\n    // if (to", "answers": ["    NodeChoice choice = (NodeChoice) n.f0;\r"], "all_classes": null, "length": 4486}
{"pred": "       font_dir = os.path.join(self.dir, 'font')\n        font_files = glob.glob(os.path.join(font_dir, '*.ttf'))\n        for font_file in font_files:\n            font_file = os.path.", "answers": ["        embed_all_fonts(pdf)"], "all_classes": null, "length": 4579}
{"pred": "           st.create_store(ObjectStore('tasks', Task))\n            st.create_store(ObjectStore('workers', Worker))\n            st.create_store(ObjectStore('logs', LogEntry))\n            st.create_store(ObjectStore('data', DataDict))\n", "answers": ["            st.create_store(ObjectStore('resources', Resource))"], "all_classes": null, "length": 6833}
{"pred": "\t\tself.changed(ChangeEvent(self, ChangeEvent.ObjectChanged, self))\n\n\tdef add_sketch(self, sketch):\n\t\tself._sketches[sketch.uid] = sketch\n\t\tself.changed(ChangeEvent(self, ChangeEvent.Object", "answers": ["\t\tself.changed(ValueChangeEvent(self, \"specular\", old_value, value))"], "all_classes": null, "length": 7424}
{"pred": "\n    def process_template_data(self, section, bit_reader):\n        \"\"\"\n        Process the template data for the given section.\n\n        :param section: The section object.\n        :param bit_reader: The bit reader object.\n        :return: Number of bits dec", "answers": ["        section.set_metadata(BITPOS_START, bit_reader.get_pos())"], "all_classes": null, "length": 5300}
{"pred": "           self.current_obj = None\n\n        self.connect(\"button-press-event\", on_family_clicked)\n\n\nclass SpeciesExpander(InfoExpander):\n    '''\n    expander to present information about a species\n    '''\n\n    def __init__(self", "answers": ["            select_in_search_results(self.current_obj.family)"], "all_classes": null, "length": 5205}
{"pred": " to_map_and_back(DFO, DopplerPoly(DopplerBase.UNITS_DOPPLER, (1, )))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  to_map_and_back(DFO, DopplerPoly(1000., 77., (1., 1.)))"], "all_classes": null, "length": 4061}
{"pred": "\n        if (SettingsAction.isShowInRecentTask) {\n            // set the action up\n            Action xBridgeAction = new SettingsAction();\n            addViewAndSetAction(context, res, xBridgeAction, headerGutsView,\n                    pkgName, load", "answers": ["        if (MyAndroidToolsAction.isShow && MyAndroidToolsAction.isShowInRecentTask) {"], "all_classes": null, "length": 6072}
{"pred": "           SensorListCell cell = new SensorListCell();\n            cell.setId(param.getIndex());\n            cell.setItem(param.getItem());\n            return cell;\n        });\n\n        updCB.getItems().addAll(Arrays.asList(P", "answers": ["            return new SensorListCell();"], "all_classes": null, "length": 5969}
{"pred": "\t\tfor(int i = 0; i < messages.size(); i++) {\n\t\t\tString message = messages.get(i);\n\t\t\tString recipient = rcpts.get(i);\n\t\t\t//System.out.println(\"Sending message \" +", "answers": ["\t\tfinal Identity recipient = new NullIdentity(TestId1Data.Identity.ID, null, null) {"], "all_classes": null, "length": 5170}
{"pred": "\n        if filename:\n            self.set_gelfilepath(filename)\n            self.set_yamlfilepath(filename)\n            self.set_yamlfilepath(filename)\n            self.set_yamlfilepath(filename)\n            self.set_yamlfilepath(", "answers": ["                (\"Config files\", cfg_exts),"], "all_classes": null, "length": 5620}
{"pred": "   def __setattr__(self, name, value):\n        if name == 'CallName':\n            self.CallName = value\n        else:\n            super(GPRS_MobilityManagement, self).__setattr__(name, value)\n\n# 2400", "answers": ["            Type4_TLV('PSLCSCap', ReprName='PS location service capability',"], "all_classes": null, "length": 8603}
{"pred": "```\ndef compile_utterance_train_graphs(\n    log_path: str,\n    dictionaries: List[str],\n    feature_strings: Dict[str, str],\n    words_paths: Dict[str, str],\n    graphs_paths: Dict", "answers": ["                    thirdparty_binary(\"gmm-latgen-faster\"),"], "all_classes": null, "length": 4580}
{"pred": "    */\n    public TaskCronerConfig configureTask(TaskCronerConfig croner, TaskCronerConfig config) {\n        return listenerManager.addRunnerTaskListener(new TaskListener() {\n            @Override\n            public void onTaskStart(TaskAPI taskAPI, TaskC", "answers": ["    public boolean configureTask(TaskCroner croner, TaskCronerConfig config) {"], "all_classes": null, "length": 4100}
{"pred": "\t\t\t}\n\t}\n}\n\nI'm trying to understand how to use the classes you provided, but I'm having trouble understanding how to use the `ItemLibrary` classes. Can you please provide more information on how to use them?\n\nAdditionally, I'm not sure", "answers": ["\t\tpublic void newVocab (ItemLibrary<Vocabulary> vocabs)"], "all_classes": null, "length": 12028}
{"pred": "   public void generate(IProgressMonitor monitor, GeneratorModel model, String[] args) throws JavaModelException {\n        // Get the test-class name from the TML file\n        String testClass = model.getTestClass();\n\n        // Create a new test-class\n        Test", "answers": ["    public ICompilationUnit generate(GeneratorModel model, List<ITestDataFactory> testDataFactories,\r"], "all_classes": null, "length": 12839}
{"pred": "       train_cost = regularized_cg.get_parameter_value(cost)\n        train_monitored_vars = regularized_cg.get_parameter_values(monitored_vars)\n\n    # train the model\n    if c['train_only_def", "answers": ["        emb_dropout_mask = get_dropout_mask(emb_vars[0], c['emb_dropout'])"], "all_classes": null, "length": 4542}
{"pred": "       bit_writer.write_uint(descriptor.F, 2)\n        bit_writer.write_uint(descriptor.X, 6)\n        bit_writer.write_uint(descriptor.Y, 8)\n\n    def get_bit_writer(self", "answers": ["        bit_writer.write_uint(nbits_diff, NBITS_FOR_NBITS_DIFF)"], "all_classes": null, "length": 4700}
{"pred": "\t\t\t\tself.on_insert_sketch()\n\nI'm trying to understand how the code works, but I'm having trouble understanding the last 30 lines of code.\nCan someone please explain what those lines of code are doing?\n\nHere is the full code:\n", "answers": ["\t\t\tif type(selection[0]) is Feature:"], "all_classes": null, "length": 8436}
{"pred": "\n    private DialogFragment mDialogFragment;\n\n    private MultiAutoCompleteTextView mAutoCompleteTextView;\n\n    private Button mButton;\n\n    private ArrayAdapter<String> mAdapter;\n\n    private int mSelectedIndex;\n\n    private String[] mItems;\n\n    private", "answers": ["    private RhythmOverlayInflater mOverlayInflater;"], "all_classes": null, "length": 10351}
{"pred": "       self.aboutwindow = AboutPesterchum(self)\n        self.aboutwindow.show()\n\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.initUI()\n\n    def initUI(self):\n        self", "answers": ["        self.aboutwindow = AboutPesterchum(self)"], "all_classes": null, "length": 9098}
{"pred": "           mLoggerServiceManager.startup(this, mServiceConnected);\n        }\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        mHandler.post(new Runnable() {\n            @Override\n            public void run()", "answers": ["            stopService(new Intent(this, GPSLoggerService.class));"], "all_classes": null, "length": 9418}
{"pred": "           GameObject gameObject = loader.level.gameObjects.get(i);\n            if (gameObject.getClass().getSimpleName().equals(\"Sprite\"))\n                continue;\n\n            //noinspection UnnecessaryLocalVariable\n            Sprite sprite = (Sprite)", "answers": ["            GameObject gameObject = loader.level.gameObjects.get(i);"], "all_classes": null, "length": 8069}
{"pred": "\nif __name__ == \"__main__\":\n\tapp = QApplication(sys.argv)\n\tmain_window = MainWindow()\n\tmain_window.show()\n\tapp.exec_()\n\n\nclass ParametersBase(NamedObservableObject):\n\tdef __init__(", "answers": ["\t\tself._ribbon_widget = RibbonWidget(self)"], "all_classes": null, "length": 8457}
{"pred": "   warnings = get_parameter_negative_warning(\n        model_type=\"model_type\",\n        intercept=13.420000000000001,\n        beta=2.25000000000000", "answers": ["    warnings = get_parameter_negative_warning("], "all_classes": null, "length": 8488}
{"pred": "       for i in range(10):\n            layer = net.add_ext(str(i), InputLayer(30, 1))\n            self.assertIsNot(layer.prevs, None)\n        self.assertIsNot(layer.prevs, None)\n\n", "answers": ["        net.add('0', PoolingLayer(30, 1, 1))"], "all_classes": null, "length": 9164}
{"pred": "       List<Shelf> list = shelfService.getAllShelf();\n        write(response, list);\n    }\n\n    // 5.5 根据货架 ID 获取货架信息\n    public void getShelf", "answers": ["        List<ShelfRequest> list = shelfService.getAllShelf();"], "all_classes": null, "length": 8390}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                catalogue = make_empty_catalogue(chan_grp=chan_grp,channel_indexes=channel_group['channels'],**params)"], "all_classes": null, "length": 12407}
{"pred": "\nself.create_actions_and_menu()\n\ndef create_actions_and_menu():\n    #~ self.file_menu = self.menuBar().addMenu('File')\n    #~ self.file_menu.addAction('New catalogue', self.new_catalog", "answers": ["        self.dialog_fullchain_params = ParamDialog(fullchain_params, parent=self)"], "all_classes": null, "length": 12238}
{"pred": "\t\tdataValidation.evaluate(new RecognitionRateSequence());\n\t\tdataValidation.evaluate(new AccuracySequence());\n\t\tdataValidation.evaluate(new PrecisionSequence());\n\t\tdataValidation.evaluate(new RecallSequence());\n\t\tdataValidation", "answers": ["\t\tEvaluator<DenseSequence> recRate = new RecognitionRateSequence<DenseSequence>();"], "all_classes": null, "length": 8337}
{"pred": "       savePickle(self, self.dir_path, 'skyFit.state')\n\n    def loadState(self):\n        \"\"\" Load the saved state of the program from a file. \"\"\"\n\n        # Load the pickle file\n        loadPickle(self, self", "answers": ["        savePickle(self, self.dir_path, 'skyFit_latest.state')"], "all_classes": null, "length": 8622}
{"pred": "       String key = messageKeyEncrypted.getKey();\n        // ...\n    }\n}\n */\npublic static class GetMessageTask extends GetMessageTask {\n    private static final String TAG = \"GetMessageTask\";\n\n    public GetMessageTask(Class< ? extends AbstractMessage>", "answers": ["        Device creator;"], "all_classes": null, "length": 9934}
{"pred": "\t\t\tresult = new BluetoothScanInput(_context);\n\t\t\tbreak;\n\t\tcase CELL:\n\t\t\tresult = new CellInput(_context);\n\t\t\tbreak;\n\t\tcase CONTINUOUS_LOCATION:\n\t\t\tresult =", "answers": ["\t\t\tresult = new BluetoothScanInput(_context);"], "all_classes": null, "length": 10073}
{"pred": "\n    public MssClient(MssConf conf) {\n        this(conf, TLSContextName);\n    }\n\n    public MssClient(MssConf conf, String tlsContextName) {\n        this.tlsContextName = tlsContextName;\n        // ...", "answers": ["    private LavercaHttpClient httpClient;"], "all_classes": null, "length": 10770}
{"pred": "   def __map_opt(self, opt):\n        # just for fun, do not use...\n        if opt.Prio:\n            self.Prio = opt.Prio\n        if opt.CKSN:\n            self.CKSN = opt.CKSN\n        if opt", "answers": ["            Type1_TV('Priority', T=0x8, V=0)])\r"], "all_classes": null, "length": 8315}
{"pred": "   ch = SingleKeyCh(bvf_cipher, diff_type, solver_name, der_mode, search_mode, check)\n    ch.input_diff = [XorDiff(i) for i in range(bvf_cipher.key_schedule", "answers": ["    if issubclass(bvf_cipher, BvFunction):"], "all_classes": null, "length": 10496}
{"pred": "   self.addAnimation(self.urls[m], \"smilies/%s\" % (smiledict[m]));\n\nI'm not sure what you're trying to do, but it looks like you're trying to add an animation to a movie object. However, the movie", "answers": ["        self.randhandler = RandomHandler(self)"], "all_classes": null, "length": 9079}
{"pred": "   def l1ctl_hdr(self):\n        return L1CTL_hdr(self.Val, self.hierarchy, self.dbg)\n    def l1ctl_hdr(self):\n        return L1CTL_hdr(self.Val,", "answers": ["            log(DBG, '(L1CTL - L3GSM_RR) message parsing failed with:\\n%s' \\\r"], "all_classes": null, "length": 8189}
{"pred": "   def __init__(self, name: str=\"Game End\") -> None:\n        super().__init__(name)\n        self.name = name\n        self.exits = {\"north\": Exit(name=\"north\", descr=\"You are at the north end of the game world", "answers": ["    def notify_player_arrived(self, player: Player, previous_location: Location) -> None:"], "all_classes": null, "length": 8034}
{"pred": "\tpublic void setDecimal(DecimalTag tag, Decimal value) {\n\t\ttry {\n\t\t\tfinal StringBuilder sb = new StringBuilder();\n\t\t\ttag.convertTo(value, sb);\n\t\t\ttagBag.put(tag, sb.toString());\n\t\t} catch", "answers": ["\tpublic void setDecimal(DecimalTag tag, Decimal<?> value) throws InvalidValueException {"], "all_classes": null, "length": 8535}
{"pred": "\t\tEAtom m = tup.testAtom();\n\t\tEAtom f = tup.testAtom();\n\t\tESeq a = tup.testSeq();\n\t\t\n\t\tif (m==null||f==null||a==null) \n", "answers": ["\t\tETuple t;"], "all_classes": null, "length": 17128}
{"pred": "       // message.setContent(decrypt(message.getContent()));\n        // ...\n        return message;\n    }\n\n    private void storeMessageKey(Message message) {\n        //TODO: implement key fetching\n        //Key key = new Key(message.getContent());", "answers": ["        MessageEncryption messageEncryption = new MessageEncryption(chat, sender);"], "all_classes": null, "length": 9910}
{"pred": "    */\n    private static int compare(Object o1, Object o2)\n    {\n        EnemyStopper enemyStopper1 = (EnemyStopper) o1;\n        EnemyStopper enemyStopper2 = (EnemyStopper) o2;\n        return enemy", "answers": ["    public static class ZSpriteComparator implements Comparator<GameObject>"], "all_classes": null, "length": 12679}
{"pred": "                   // VulnTree.setModel(new DefaultTreeModel(new_root));\n                    // VulnTree.updateUI();\n                    // VulnTree.scrollRectToVisible(VulnTree.getCellRect(VulnTree.getRowCount()", "answers": ["                    VulnTree.setModel(new DefaultTreeModel(new TreeUtils().mergeTrees(existing_root, new_root)));"], "all_classes": null, "length": 9007}
{"pred": "           if typ == 'zip':\n                # Check if in DB\n                # pylint: disable=E1101\n                # pylint: disable=E1102\n                # pylint: disable=E1103\n                # pylint: disable", "answers": ["                    dex_2_jar(app_dic['app_path'], app_dic["], "all_classes": null, "length": 11065}
{"pred": "       // Checking PhyML binary\n        String phymlBinary = APPLICATION_PROPERTIES.getProperty(\"phyml.binary\");\n        if (phymlBinary == null || !phymlBinary.equals(\"phyml\")) {\n            System.out.println(\"Error: Ph", "answers": ["        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())"], "all_classes": null, "length": 14618}
{"pred": "       Tree tree = new JTT(jttModel, options.getNumberOfThreads());\n        return tree;\n    }\n\n    protected void calculateBionjJTT(Alignment alignment, ApplicationOptions options) {\n        throw new ProtTestInternalException(\"Not implemented\");\n    }", "answers": ["        RunEstimator treeEstimator = ProtTestFactory.getInstance().createRunEstimator(options, jttModel);"], "all_classes": null, "length": 11348}
{"pred": "               throw new ProtTestInternalException(\"Invalid information criterion: \" + criterion);\n        }\n\n        return informationCriterion;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "```\n        self.assertIsInstance(line_widget, Line)\n        self.assertEqual(line_widget.color, [1.0, 0.0, 0.0, 1.0])\n        self.assertEqual(line_widget.points, [0,", "answers": ["        self.assertIsInstance(line_widget, Line)"], "all_classes": null, "length": 9080}
{"pred": "\t\t\tConfiguration.loadConfig();\n\t\t\tOsumer.init(Configuration.getDefaultDataDir());\n\t\t\tOsumer.init(Configuration.getDefaultBeatmapDir());\n\t\t\tOsumer.init(Configuration.getDefaultSongDir());\n\t", "answers": ["\t\t\tDumpManager.init(Osumer.getVersionString(), Osumer.getVersionString());\r"], "all_classes": null, "length": 8703}
{"pred": "           showToastMsg(R.string.please_input_title);\n            return;\n        }\n        // ...\n    }\n}\n\napp/src/main/java/com/jjforever/wgj/maincalendar/wheelpicker/WheelPicker", "answers": ["            new DialogPicker(this, getResources().getString(R.string.must_input_title)).show();"], "all_classes": null, "length": 9998}
{"pred": "   differenced = diff(series, k_diff=1, k_seasonal_diff=None, seasonal_diff=None)\n    diff(series, k_diff=1, k_seasonal_diff=None, seasonal_diff=None)\n\nI expect this code", "answers": ["            stationary = is_invertible([1] + list(-coefficient_matrices))"], "all_classes": null, "length": 10510}
{"pred": "\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Set up the activity\n        setTitle(R.string.settings_title);\n        setTheme(R.style.AppTheme);\n\n        // Load the preferences", "answers": ["    private DialogPreferenceCardBackground preferenceCardBackground;"], "all_classes": null, "length": 10466}
{"pred": "\n    def __init__(self, name: str, gender: str=\"\", *, race: str=\"\", **) -> None:\n        super().__init__(name, gender=gender, race=race)\n        self.stats = Stats()\n        self.soul = Soul()", "answers": ["key = Key(\"key\", \"small rusty key\", descr=\"This key is small and rusty. It has a label attached, reading \\\"garden door\\\".\")"], "all_classes": null, "length": 8379}
{"pred": "\n    this.points = new Points();\n    this.dices = new Dices();\n    this.availableMoves = new AvailableMoves();\n    this.availableMoves.init();\n    this.availableMoves.addAvailableMoves(this", "answers": ["    jp = new JSONProperties(Gdx.files.internal(GnuBackgammon.Instance.getResName() + \"/pos.json\"));"], "all_classes": null, "length": 10879}
{"pred": "           con.setState(Connection.State.connected);\n            con.setLogin(auth.user);\n            con.setPassword(auth.password);\n            con.setConnectedStatus(Connection.State.connected);\n            con.setLastError(null);\n            con.set", "answers": ["            failure(con, ErrorCode.ER_ACCESS_DENIED_ERROR, \"Access denied for user '\" + auth.user + \"'\");"], "all_classes": null, "length": 13574}
{"pred": "\t\t\tFileImageSink sink = new FileImageSink(os);\n\t\t\t\n\t\t// when\n\t\tThumbnailator.createThumbnail(\n\t\t\t\tnew SourceSinkThumbnailTask<InputStream, OutputStream>(param, new FileImageSource(os),", "answers": ["\t\tFileImageSource source = new FileImageSource(\"src/test/resources/Thumbnailator/grid.bmp\");"], "all_classes": null, "length": 12968}
{"pred": "   except ObjectAlreadyExists as ex:\n        # ok\n        pass\n\n\ndef test_remove_acl():\n    try:\n        acl = API.remove_acl(ACL_NAME)\n        assert(acl.data['name'] == ACL_NAME", "answers": ["    except ObjectAlreadyExists as ex:"], "all_classes": null, "length": 18864}
{"pred": "           String arg = args[i];\n            if (arg.equals(\"-h\")) { // Handle the -h flag here! \n                urlStr = \"http://localhost:8080\";\n                break;\n            } else if (arg.equals(\"-H\")) { // Handle", "answers": ["        \tif (config.isUseOldParser() ? OsumsOldParser.checkVaildBeatmapUrl(args[i]) : OsumsNewParser.checkVaildBeatmapUrl(args[i])) {\r"], "all_classes": null, "length": 9129}
{"pred": "               //Toast.makeText(this, \"Expense created successfully!\", Toast.LENGTH_SHORT).show();\n            } catch (CouldNotInsertDataException e) {\n                Toast.makeText(this, \"There was a problem creating the expense\", Toast.LENGTH_SHORT).show", "answers": ["            } catch (CouldNotInsertDataException e) {"], "all_classes": null, "length": 10205}
{"pred": "\t * \n\t * public EmvTemplate(ITerminal pTerminal, IProvider pProvider, Config pConfig) {\n\t * super();\n\t * this.terminal = pTerminal;\n\t * this.provider = pProvider;\n\t * this.config = pConfig", "answers": ["\tprivate EmvCard card;"], "all_classes": null, "length": 10347}
{"pred": " private TextArea _ta = new TextArea();\n  private TextArea _ta1 = new TextArea();\n  private TextArea _ta2 = new TextArea();\n  private TextArea _ta3 = new TextArea();\n  private TextArea _ta4 = new TextArea();\n", "answers": ["  private TextArea _textArea  = new TextArea(-1, -1, \"1111\\n2222\\n3333\\n4444\\n\\n66666\\n77777\\n888888\\n99999999999999999\\n1010100101\");"], "all_classes": null, "length": 16486}
{"pred": "   protected VulnRecommendationDocumentListener recommendationDocumentListener;\n\n    public MainWindow() {\n        initComponents();\n        // Set the default font\n        setFont(new Font(\"Arial\", Font.PLAIN, font_size));\n        // Set the default list model", "answers": ["    protected VulnDescriptionDocumentListener descriptionDocumentListener;"], "all_classes": null, "length": 8881}
{"pred": "\t\t}\n\t\tpublic EObject toSymbolic() {\n\t\t\treturn new ESmall(opcode);\n\t\t}\n\t\tpublic static class Operands extends Operand {\n\t\t\tpublic static Operand[] EMPTY_ARRAY = new Operand[0", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "   Gdx.app.log(\"ROOMS\", \"Connected to room: \" + mRoomId);\n    Gdx.app.log(\"ROOMS\", \"Room ID: \" + mRoomId);\n    Gdx.app.log(\"ROOMS\", \"", "answers": ["    MatchState.matchType = 3;"], "all_classes": null, "length": 12388}
{"pred": "   # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n", "answers": ["                if self._Layer__BitStack_len > 0 and self.dbg >= ERR:"], "all_classes": null, "length": 8124}
{"pred": "\n            # Compute catalog magnitudes\n            corrected_mag = photometryFit(cat_mag, platepar)\n\n            # Add to list\n            catalog_mag_list.append(corrected_mag)\n\n            # Check if the star is inside the FOV\n            if", "answers": ["            sign, hh, mm, ss = decimalDegreesToSexHours(ra_centre)"], "all_classes": null, "length": 8691}
{"pred": "\t\t\treturn builder.toString().getBytes(\"UTF-8\");\n\t\t} catch (Throwable t) {\n\t\t\tthrow new FASTException(\"Error building catalog bytes\", t);\n\t\t}\n    }\n\n\n\n}\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tClientConfig clientConfig = new ClientConfig();  //keep bits small or the test will take a very long time to run.              "], "all_classes": null, "length": 11914}
{"pred": "           'default'].parent_widgets[0].widget, Box))\n\n        # now switch the slide\n        self.mc.targets['default'].add_slide(name='slide2')\n        self.mc.targets['default'].show_slide('slide2')\n        self", "answers": ["            'default'].parent_widgets[0], WidgetContainer))"], "all_classes": null, "length": 9203}
{"pred": "       // Load plugins\n        List<Plugin> plugins = container.getPlugins();\n        for (Plugin plugin : plugins) {\n            plugin.onInitialized(this);\n        }\n        // Initialize economy\n        economyService = new LiteEconomyService(this);\n        //", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       self.trollslum = TrollSlumWindow(self.trollslum, self)\n        self.trollslum.addTrollDialog = self.addTrollDialog\n        self.trollslum.changeTheme = self.changeTheme\n        self.t", "answers": ["        if pytwmn.confExists():"], "all_classes": null, "length": 9080}
{"pred": "\t\twhen(source.getInputFormatName()).thenReturn(\"image/png\");\n\t\twhen(source.read()).thenReturn(new BufferedImage(50, 50, BufferedImage.TYPE_INT_RGB));\n\t\t\n\t\tImageSink sink = mock(Image", "answers": ["\t\twhen(source.read()).thenReturn(new BufferedImageBuilder(100, 100).build());"], "all_classes": null, "length": 12670}
{"pred": "\t\tif (options != ERT.NIL) {\n\t\t\tEHandle h = EHandle.cast(ref);\n\t\t\tif (h != null) {\n\t\t\t\tself.unlink_and_kill(h);\n\t\t\t\treturn ERT.", "answers": ["\t\treturn demonitor((ETask<?>)self, ref, options);"], "all_classes": null, "length": 16841}
{"pred": "           Columns.Factory.LAYER_TYPE,\n    };\n\n    private Activity activity;\n    private Dialog dialog;\n    private RhythmOverlay overlay;\n\n    public RhythmSandbox(Activity activity) {\n        this.activity = activity;\n    }\n\n    public", "answers": ["            Columns.Factory.LAYER_TYPE,"], "all_classes": null, "length": 10269}
{"pred": "\n            //Log.d(getClass().getSimpleName(), \"MessageKey stored successfully\");\n            } catch (Exception e) {\n                Log.e(getClass().getSimpleName(), e.getMessage());\n            }\n        } else {\n            Log.e(getClass().get", "answers": ["                MessageKeyTask.getInstance().deleteKey(messageKey.getId());"], "all_classes": null, "length": 10021}
{"pred": "\t\tthis.progressTitle = title;\n\t}\n\n\tpublic void setProgressText(String text) {\n\t\tthis.progressText = text;\n\t}\n\n\tpublic void setProgress(int progress) {\n\t\tthis.progress = progress;\n\t}\n\n", "answers": ["\t\t((ProgressMenu) menu).setProgressTitle(title);"], "all_classes": null, "length": 13065}
{"pred": "\t\t\tnew ThumbnailParameter()\n\t\t\t\t.setType(ThumbnailType.from(BufferedImage.class));\n\t\t\t\n\t\t// when\n\t\tThumbnailTask task = new SourceSinkThumbnailTask(param);\n\t\ttask.execute();\n", "answers": ["\t\t\tnew ThumbnailParameterBuilder()"], "all_classes": null, "length": 12659}
{"pred": "\t\t\n\t\treturn mv;\n\t}\n\t\n\t@Autowired\n\tprivate UserServices userServices;\n\t\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t\n\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t\n\t@Autowired", "answers": ["\t\tArrayList<CateProcess> process = new ArrayList<CateProcess>();"], "all_classes": null, "length": 11336}
{"pred": "\t\treturn new Tag(this);\n\t}\n\n\tpublic String toHtml() {\n\t\treturn tagTransformer.transform(this);\n\t}\n\n\tpublic Tag getTag() {\n\t\treturn this;\n\t}\n}\nPlease provide the code for the `T", "answers": ["\tpublic static Var var(Attribute... attributes) {"], "all_classes": null, "length": 8086}
{"pred": "\t\t\tthis.turnLimit = perceptLimit;\n\t\t\tthis.numberOfPlayers = numberOfPlayers;\n\t\t\tthis.isFatigueSet = isFatigueSet;\n\t\t\tthis.stats = new Statistic();\n\t\t\t\n\t", "answers": ["\t\t\tthis.turnLimit = perceptLimit / Enums.DEFAULT_TURN_RATIO;"], "all_classes": null, "length": 10740}
{"pred": "   private ImageInfo imageInfo;\n\n    private ImageView imageView;\n\n    private ImageButton playButton;\n\n    private ImageButton previousButton;\n\n    private ImageButton nextButton;\n\n    private ImageButton repeatButton;\n\n    private ImageButton shuffleButton;\n\n", "answers": ["    private ServiceToken mToken;"], "all_classes": null, "length": 13200}
{"pred": "\n    def _GetGitDir(self, project):\n      return os.path.join(project.topdir, '.git')\n\n    def _GetGitDirForProject(self, project):\n      return os.path.join(self.manifest.topdir, project.name,", "answers": ["                remote=RemoteSpec('origin'),"], "all_classes": null, "length": 11315}
{"pred": "\t\tpublic final int i1;\n\t\tpublic final Label label;\n\t\tpublic AAI(BeamOpcode opcode, int i1, Label label) {\n\t\t\tsuper(opcode);\n\t\t\tthis.i1 = i1;\n\t\t\tthis", "answers": ["\t\tpublic final Atom a1,a2;"], "all_classes": null, "length": 10686}
{"pred": "\n        return parser.parse(query);\n    }\n\n    private CSVResult getCsvResult(boolean isTest, String query) throws Exception {\n        SearchDao searchDao = MainTestSuite.getSearchDao();\n        return searchDao.getCsvResult(", "answers": ["        return new ElasticSqlExprParser(query).expr();"], "all_classes": null, "length": 8721}
{"pred": "       point.set(x, y);\n        debugGlyph.setPosition(point);\n        debugGlyph.draw(spriteBatch);\n        World.VECTOR2_POOL.recycle(point);\n    }\n\n    private String generateDebugMessage() {\n       ", "answers": ["        Utility.guiPositionToGamePosition(x, y, this, point);"], "all_classes": null, "length": 14166}
{"pred": "    *  if (enemy.handleCollision) {\n     *      // ...\n     *  }\n     */\n    public boolean hitByPlayer(Maryo player, boolean isJump)\n    {\n        if (isJump)\n        {\n            // ...\n", "answers": ["    public int hitByPlayer(Maryo maryo, boolean vertical)"], "all_classes": null, "length": 10553}
{"pred": "           obj.blockShape = BlockConnectorShape();\n\n        return obj\n\n    def setBlockLabel(self, label):\n        self.blockLabel = Label(label);\n        self.blockLabel.setParent(self);\n\n    def setComment(self, comment):\n       ", "answers": ["            obj.blockShape = InfixBlockShape(obj);"], "all_classes": null, "length": 9272}
{"pred": "   Layer3.Layer.add_security_header(self)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class ESMHeader(Layer):"], "all_classes": null, "length": 9025}
{"pred": "\n\tpublic static Em em(Attribute... attributes) {\n\t\treturn new Em(attributes);\n\t}\n\n\tpublic static Fieldset fieldset(Attribute... attributes) {\n\t\treturn new Fieldset(attributes);\n\t}\n\n\tpublic static Form form(Attribute... attributes)", "answers": ["\tpublic static Em em(Attribute... attributes) {"], "all_classes": null, "length": 8118}
{"pred": "\t * @throws IllegalArgumentException if the type is not BINARY or SOURCE.\n\t */\n\tpublic void setType( final Tag tag) {\n\t\tswitch (tag.getTag()) {\n\t\tcase BINARY:\n\t\t\tformat.setType", "answers": ["\tpublic void setType( final RpmType type) {"], "all_classes": null, "length": 10687}
{"pred": "\t\tprogressController.setStatusText(\"Status: Downloading beatmap...\");\r\n\t\tprogressController.setProgress(0, 100);\n\t\tprogressController.setMaxProgress(100);\n\t\tprogressController.setCanceled(false);\n\t\tprogress", "answers": ["\tprivate UpdateInfo getUpdateInfoByConfig() throws WithDumpException {\r"], "all_classes": null, "length": 8743}
{"pred": "       for path, paths, files in self.walk(self._home):\n            yield path, paths, files\n\n    def walk(self, path):\n        for path, paths, files in self.walk(self._home):\n            yield path, paths, files\n\n    def brow", "answers": ["        return PlayQueue.create(self, item, **kwargs)"], "all_classes": null, "length": 10319}
{"pred": "\n                                // display the thumbnail\n                                if (null != mThumbnailUrl) {\n                                    ImageView thumbnail = (ImageView) findViewById(R.id.imageView_thumbnail);\n                                    thumbnail.setImageUrl(mThumbnailUrl);\n                               ", "answers": ["                                ImageSizeSelectionDialogFragment fragment = (ImageSizeSelectionDialogFragment) fm.findFragmentByTag(TAG_FRAGMENT_IMAGE_SIZE_DIALOG);"], "all_classes": null, "length": 9821}
{"pred": "       self.reel_facture = 0\n        self.reel_realise = 0\n        self.previsionnel_facture = 0\n        self.previsionnel_realise = 0\n        self.realise = 0\n        self.facture", "answers": ["        DocumentDialog(self, PlanningModifications(site, date)).ShowModal()"], "all_classes": null, "length": 9587}
{"pred": "       File[] booksDirs = getAllBooksDirectories();\n        return booksDirs.length > 0;\n    }\n\n    private void loadFromDirectories(File[] booksDirs, Activity activity) {\n        for (File bookDir : booksDirs) {\n           ", "answers": ["        if (BaseActivity.haveLegacyStoragePermission(context)) return false; // we can access it with legacy permission."], "all_classes": null, "length": 10245}
{"pred": "\t\tpublic void updatePlot (State state)\n\t\t{\n\t\t\tchart.setData (state.dses);\n\t\t}\n}\n\npublic class Receiver extends BroadcastReceiver {\n\t\n\t@Override\n\tpublic void onReceive (Context context, Intent intent) {", "answers": ["\tpublic State startUpdate (UserInformation ui, EnumSet<Item.Type> type)"], "all_classes": null, "length": 10194}
{"pred": "\t\tExtent e1 = TileConversor.tileOSMMercatorBounds(lon, lat);\n\t\tdouble[] minXY = ConversionCoords.reproject(e1.getMinX(), e1.getMinY(),\n\t\t\t\tCRS.decode", "answers": ["\t\tdouble[] bbox = Calculator.boundingCoordinates(lon, lat,"], "all_classes": null, "length": 8212}
{"pred": "\tpublic final ClasspathUtil classpath = new ClasspathUtil();\n\tpublic final MathUtil math = new MathUtil();\n\tpublic final LogUtil log = new LogUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final WebServiceUtil web = new WebServiceUtil();", "answers": ["\tpublic final ClasspathUtil cp = new ClasspathUtil();"], "all_classes": null, "length": 8603}
{"pred": "\n            else:\n                # pylint: disable=E0602\n                raise Exception(\"Invalid file type\")\n        return render(request, 'static_analyzer.html', app_dic)\n    except Exception as e:\n        print \"[ERROR] Static Analysis failed:", "answers": ["                    apkid_results = apkid_analysis(app_dic["], "all_classes": null, "length": 11062}
{"pred": "class MSCm1(Layer):\n    constructorList = [\n        Bit('spare', Pt=0, BitLen=1),\n        Bit('rev', ReprName='Revision', Pt=1, BitLen=2, \\\n            Dict=Rev_dict", "answers": ["class IMSI_DETACH_INDICATION(Layer3):\r"], "all_classes": null, "length": 8403}
{"pred": "           self.view.widgets.plant_loc_edit_button.show()\n            self.view.widgets.plant_loc_edit_button.modify_bg(Gtk.StateType.NORMAL)\n            self.view.widgets.plant_loc_", "answers": ["            LocationEditor(location, parent=self.view.get_window()).start()"], "all_classes": null, "length": 9452}
{"pred": "\n    @Override\n    public void onEnable() {\n        plugin = this;\n        config = getConfig();\n        listener = new CEListener();\n        commandC = new CeCommand();\n        classLoader = getClass().getClassLoader();\n        // Register the command\n        getCommand(\"", "answers": ["    public static Set<CItem> items;"], "all_classes": null, "length": 8304}
{"pred": "\ndoor.target_module = mudlib\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def notify_action(self, parsed: ParseResult, actor: Living) -> None:"], "all_classes": null, "length": 8208}
{"pred": "   def __init__(self, *args, **kwargs):\n        pass\n\n    def __str__(self):\n        return 'Playlist({})'.format(self.playlistType)\n\n    def __repr__(self):\n        return 'Playlist({})'.format(self", "answers": ["    @deprecated('use \"removeItems\" instead', stacklevel=3)"], "all_classes": null, "length": 9923}
{"pred": "\n    Bit('Year', Pt=0, BitLen=5, Repr='%d', Dict={'1': 1980, '2': 1990, '3': 2000, '4': 2010, '5':", "answers": ["        StrBCD('Year', Len=1),\r"], "all_classes": null, "length": 8703}
{"pred": "\t\tfor (int i = 0; i < mocks.size(); i++) {\n\t\t\tMock mock = mocks.get(i);\n\t\t\tif (mock != null) {\n\t\t\t\tresultType = mock.getReturnType().getCanonicalText", "answers": ["\tfor (Method tmlMockMethod : mocks.getMethod()) {\r"], "all_classes": null, "length": 13095}
{"pred": "\n        sadapter.add(ActivityList);\n    }\n}\n}\n\\end{code}\n\nThe code you provided is quite long, but I'll try to help you with your question.\n\nIn the code you provided, there are several classes and methods that are related to the", "answers": ["        ActivityListRowAdapter activityAdapter = new ActivityListRowAdapter(this, ActivityList);"], "all_classes": null, "length": 11257}
{"pred": "               SurveyActivity.class,\n                SurveyPrompt.class,\n                SurveyPromptFragment.class,\n                SurveyActivity.SurveyPrompt.class,\n                SurveyPromptFragment.SurveyPrompt.class,\n                AuthenticatorActivity.class,\n                AuthenticatorActivity", "answers": ["                AuthenticateFragment.class,"], "all_classes": null, "length": 10557}
{"pred": "\t\tTagAndLength tagAndLength = getTagAndLength(pAid);\n\t\tbyte[] tagAndLengthBytes = tagAndLength.getBytes();\n\t\tCommandApdu command = new CommandApdu(EmvTags.SELECT, tagAndLengthBytes);\n\t\tresponse =", "answers": ["\t\treturn template.get().getProvider().transceive(new CommandApdu(CommandEnum.SELECT, pAid, 0).toBytes());"], "all_classes": null, "length": 13176}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.points = []\n        self.color = (0, 0, 0)\n        self.thickness = 1\n        self.opacity", "answers": ["            'default'].parent_widgets[0].widget, Text))"], "all_classes": null, "length": 9175}
{"pred": "           BluetoothController.registerDevice(deviceID);\n        }\n\n        // create instance of SQLDBController\n        SQLDBController instance = SQLDBController.getInstance();\n\n        // create instance of DatabaseHelper\n        DatabaseHelper databaseHelper = new DatabaseHelper(this);\n\n        // create", "answers": ["            BluetoothController.getInstance().register(this);"], "all_classes": null, "length": 11016}
{"pred": "\ndoor_n = Exit(\"north\", \"door\", \"door\", \"door\", \"door\")\ndoor_s = Exit(\"south\", \"door\", \"door\", \"door\", \"door\")\ndoor_e = Exit(\"east\", \"door\", \"door\", \"door\", \"door", "answers": ["door = Door("], "all_classes": null, "length": 8102}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t        String configPath = Osumer.isWindows() ? System.getenv(\"localappdata\") + \"\\\\osumerExpress\" : \"\";\r"], "all_classes": null, "length": 8655}
{"pred": "       SensorCollectorManager scm = wls.getSCM();\n        scm.registerSensorCollectors();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        String data = StringUtils.convertByteArrayToString(rawData);"], "all_classes": null, "length": 10622}
{"pred": "\t\treturn new Th(attributes);\n\t}\n}\nsrc/main/java/br/com/caelum/vraptor/html/tags/Th.java\npublic class Th extends NestedElement {\n\tprivate final NestedElement[] children;\n\tprivate final Tag", "answers": ["\tpublic static Hr hr(Attribute... attributes) {"], "all_classes": null, "length": 8086}
