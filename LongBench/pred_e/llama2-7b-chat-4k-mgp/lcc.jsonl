{"pred": "\t\t\traspodelaTable.addRow(new Object[]{\"Primerak\",primerak});\n\t\t\traspodelaTable.fireTableDataChanged();\n\t\t\traspodelaTable.setRowSelectionInterval(raspodelaTable.getRowCount()-1,ras", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "plt.show()\nplt.pause(0.001)\nplt.close()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "                SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\t\trectF.set(top_left.x, top_left.y, top_right.x, top_right.y, bottom_left.x, bottom_left.y, bottom_right.x, bottom_right.y);\n\t\t\trectF.set", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       sendBean(\"B\", null, null);\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", 1, 1L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\",", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "       Set<String> mustStatusSet = new HashSet<String>(\n            operationSetPresence1.getMustStatusSet());\n        mustStatusSet.removeAll(supportedStatusSet1);\n        //assert that the remaining statuses in the MUST set are the same as\n        //", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "           self.__repeat = (delay, interval)\n        elif delay is not None and interval is not None:\n            self.__repeat = (delay, interval)\n        else:\n            self.__repeat = None\n        return self\n    \n    def start(self):\n        self._main_", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "   if self.param_type == INTERFACE_FULL_NAME:\n        self.init_interface_data(self.interface)\n        self.get_interface_info()\n        if is_ethernet_port(self.interface):\n            self.get_port", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "               item.setForeground(GUI.display\n                        .getSystemColor(SWT.COLOR_BLUE));\n                item.setBackground(GUI.display\n                        .getSystemColor(SWT.COLOR_BLUE));\n                break;\n            }\n", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "                           await CheckCloseBattle();\n                        }\n                    });\n                }\n            }\n            poll.AddOptions(options.ToArray());\n            return poll;\n        }\n        private void CheckCloseBattle()\n        {\n            if (spring.IsRunning) return", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "   if class_name == 'alnum':\n        return p.Anything()\n    elif class_name == 'digit':\n        return p.Sequence(p.OneOrMore(p.Digit()))\n    elif class_name == 'lower':\n        return p.Sequence(p", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(400, 300);\n\t\t\tthis.TabIndex = 15;\n\t\t\tthis.Text = \"Tissue Control\";\n\t\t\tthis.Load += new System.EventHandler(this", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "   env.do_delayed_imports(products=products)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "       searchBox.requestFocus();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "   return Pattern.compile(\"^[0-9]+\").matcher(s).find(); // $NON-NLS-1$\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"GlobalSetting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Settings.GetSetting(node.Value);\n\t\t\t\t\t\t\t\tif (setting != null", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 4);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "   observations = [\n        {\n            'time': observation['time'],\n            'loc': observation['loc'],\n            'code': observation['code'],\n            'note': observation['note'],\n            'data': observation['data'],\n            'translation': translations_dict[observ", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the measurement\n        self._wavemeterdll.Operation(self._cCtrlStop)\n        # stop the timer\n        self", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "\t\t\t\tm_Writer.WriteLine( \"### Returned by {0}\", m.Name );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n#endregion", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       call_command(\"sopn_parsing.create_tables\")\n    def test_basic_parsing(self):\n        self.assertFalse(RawPeople.objects.exists())\n        OfficialDocument.objects.create(\n            ballot=self.dulwich_post", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\t// \n\t\t\t\t// now we have the packet\n\t\t\t\t// \n\t\t\t\tPacket p = new Packet(buf);\n\t", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "\t\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\t\t}\n\t\t\t\t\treturn assembly;\n\t\t\t\t}\n\t\t\t\treturn", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "   def __get_gender(self, person):\n        \"\"\"\n        @param person: person object\n        @return: gender of the person\n        \"\"\"\n        # ...\n\nI have a feeling that this code is trying to create a web page with a table of contents, but I'm", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "       return self.makeRecord(name, level, func, *args, **kwargs)\n    def set_record(self, name, level, func, *args, **kwargs):\n        # ...\n        return self.makeRecord(name, level, func, *args, **kwargs)", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "           key_func = lambda x: x[1]\n            sort_order = sort[0]\n        all_assets = course_assets.setdefault(asset_type, [])\n        if start == 0 and maxresults == -1:\n            # No limit, so return all", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "                           sead_partnn_l = findPath(nodemap, c_sead, start, stop);\n                            if (sead_partnn_l != null) {\n                                sead_l.addAll(sead_partnn_l);\n                                if", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "       if (persist)\n        {\n            // Persist the input to memento\n            final String factoryID = opiRuntimeDelegate.getFactoryID();\n            final Memento memento = createMemento();\n            memento.addChild(factoryID);\n            memento.addChild", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "   host = 'ansible-host'\n    port = 22\n    username = 'ansible_user'\n    password = 'ansible_password'\n    private_key_file = '/path/to/private_key'\n    remote_user = 'ansible_remote", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the maximum amount of mana you can gain from this stone.\");\n                            }\n                        }\n                        else\n                        m.", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "           if m.lat > max_relalt_mm:\n                self.progress(\"Takeoff failed - vehicle not ready to fly\")\n                self.context_pop()\n                raise NotAchievedException(\"Takeoff failed\")\n            self.progress(\"Takeoff successful\")\n            self.", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "               index = -1;\n            }\n            public void Dispose()\n            {\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count - 1)\n                {\n                    index++;\n                    return true;\n                }\n               ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "   bind_layers(ENIP, Ether)\n    bind_layers(ENIP, IP)\n    bind_layers(ENIP, TCP)\n    bind_layers(ENIP, UDP)\n    bind_layers(ENIP, ICMP)\n    bind_layers(EN", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "\t\t\tims.dto.Client.Wardlist.encodeNASMessage(dataString);\n\t\t\t\n\t\t\t\n\t\t}\n\t\n\tprivate void decodeNASMessageWithRepeatingGroups()\n\t{\n\t\t//TODO: implement decodeNAS", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "           if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n                // Perform action on combo box\n            }\n        }\n    }\n    private static void setComboPopupMaxSize(JList list,", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "           for field in hash_:\n                if field.startswith('_'):\n                    continue\n                fields[field] = hash_[field]\n                extra_attrs[field] = hash_[field]\n    except KeyError:\n        raise AssertionError(\n            \"", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house != null)\n                        bonus", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\t// ///////////////////////////////////////////////////////////////////////////\n\t\t// //\n\t\t// // BUSINESS RULES\n\t\t// //\n\t\t// // ///////////////////////////////////////////////////////////////////////////\n\t\t// //\n\t\t// // // //\n\t\t// // // //\n", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "   return unionrepository(ui, parentpath + path, path2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "           }\n        }\n        private void OnKeyPress(object sender, KeyPressEventArgs e)\n        {\n            if (e.KeyChar == 'A')\n            {\n                Program.keyA_G = (Program.keyA_G & (~1));\n            }\n", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "           record_add_field(rec, '520', subfields=[('p', page_count)])\n        return rec\n    def get_record_from_file(self, f_path):\n        try:\n            return self.get_record(f_path)\n", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "           return page_not_authorized(req=req, text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_init(ln, recid)\n        return page(title =", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "           arena.getMonsterManager().spawnCreature(e);\n        }\n    }\n}\n```\nThis code is a part of a larger project, and I'm not sure what it does or why it's there. Can you tell me more about it?\n\nThe", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "           tableStrengthScore.setPlayer(opponent.getKey());\n            tableStrengthScore.setScore(\n                    this.getScoreForOpponent(player, opponent.getKey()));\n            strength += tableStrengthScore.getScore().get(0);\n", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   results.write(out_list, names=out_names, header=header, comment=out_comment,\n                  extname='WEL')\n    userprint(\"\")\n    # compute the auto and cross-correlation\n    if args.z_cut:\n        z_", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n       ", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "   reader = supported_extensions()[os.path.splitext(fname)[1]]\n    return reader(fname)\n    ...\n    # Add more readers here\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\t\t\tfor(int i=0; i<length; i++){\n\t\t\t\tif(i>=tempCostList.Length){\n\t\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t\t}\n\t\t\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "           res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n\n    def test_public_mode_auth_header(self, temp_dir, common_obj):\n        web = web_obj(temp_dir", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y )\n\t\t\t{\n\t\t\t\tline =", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "   text = obj.decode(\"utf-8\") if isinstance(obj, str) else obj\n    return list(loads(text, mapping, implementation, strict))\ndef loads(\n    obj: str,\n    mapping: Optional[Dict] = None,\n    implementation: RisImplementation", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "   if __name__ == '__main__':\n        main()\n        result = fortios(module=_module)\n        print(result)\nelse:\n    main()\nif __name__ == '__main__':\n    result = fortios(module=_module", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "\t\t\t\tAddRes( index, typeof( SingingAxe ), 1032697, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "           {\n                nsClientService = mLocalBinder.getService();\n            }\n        }\n    };\n    private void resend(String reason) {\n        rxBus.send(new EventNSClientResend(reason));\n    }\n    private void addToLog(", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "       return kind != null ? kind : EOF;\n    }\n}\n\nNote: The above code is just a part of the code, you need to complete the code by adding the remaining parts of the code.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(cell.getX() * xScale + xScale * (maxWidth - cell.getWidth()));\n\t\t\t\t\t\tcgn.", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "   this.node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loading = loaded;\n  }\n  public void setNode(Node node) {\n    this.node = node;\n  }\n  public void setParent", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            }\n        }\n    }\n}\n\\end{code}\n\nI'm trying to create a new dye item, but I'm getting an error on the line `HueInfo", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "\t\tif (orig == null || !orig.exists())\n\t\t\treturn;\n\t\t// Copy it.\n\t\tFile newFile = getNewCoverFile(orig);\n\t\tif (newFile != null) {\n\t\t\t// Copy it.\n\t\t\t", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "\n    def test_prop2po(self, capsys):\n        \"\"\"tests running prop2po on a file\"\"\"\n        prop_file = \"prop.properties\"\n        output_file = \"po.properties\"\n        self.assertEqual(self.prop2po(prop_", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitle()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        #endregion\n    }\n}\n", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "       return \"ImageIcon(\" + filename + \", \" + description + \")\";\n    }\n}", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "   if build_all:\n        run_configure(configure, do_script)\n        if debug:\n            print(\"OpenSSL debug builds aren't supported.\")\n            #if arch==\"x86\":\n            #    # the do_masm script in openssl doesn't generate", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Title, () => childFactory(query.Parent, \"virtual-grouping/\", () => query.Parent.Children));\n        }\n        private void AddChildren(ContentItem parent, string title, Func<IEnumerable<", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "               gwtCertificatesService.uninstallCertificate(selected.getKeystoreName(), selected.getAlias());\n            }\n        });\n        this.applyModalButton.setText(MSGS.apply());\n        this.applyModalButton.addClickHandler(event -> {\n", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn getTraceSequence() != null && !getTraceSequence().isEmpty();\n\t\t\tcase Activitydiagram", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Implementor Implementor {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn new {0}Adapter", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin = self._bot.plugin_manager.get_plugin_by_name(plugin_name)\n", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "           query_part = '?' + urllib.quote(urllib.urlencode(query_args))\n        else:\n            query_part = ''\n        if method == 'PUT' or method == 'POST':\n            data = urllib.quote(data)\n        else:\n", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "       of log(sigmoid(x)) and will optimize it away. To avoid this\n        problem we need to compute log(sigmoid(x)) inside the scan\n        op. This is why we need the pre-sigmoid activation.\n        \"\"\"\n        cost = T.mean", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "       soaResponse = dns.message.from_wire(soa)\n        soaResponse.use_tls(self._serverCert, self._serverKey, self._serverName, self._caCert)\n        responses.append(soaResponse)\n        for _ in range", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "\t\tList<Event> events = new ArrayList<Event>();\n\t\t\n\t\t// create a new instance of the operation\n\t\tUpdateOperation op = new UpdateOperation(\n\t\t\t\timported.getId(), \n\t\t\t\tforeignSource, \n\t\t\t", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, S As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "           checksum = checksums.get(block=False)\n            if checksum == expected_checksum:\n                break\n        except Queue.Empty:\n            assert False # file uploaded doesn't match any of the expected checksums!\n    except Queue.Empty:\n", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i], left, top, right, bottom, null);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void drawPath(Canvas canvas, double localScale, boolean drawStairs) {\n\t\tfor(int", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           TripChain c = new TripChain(Person);\n            c.Trips = new List<ITrip>(Trips.Count);\n            foreach (var trip in Trips)\n            {\n                c.Trips.Add(tri.Clone());\n            }\n            c", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "   if data['vdom']:\n        vdom = data['vdom']\n        filtered_data = {'name': data['name'], 'member': data['member'], 'span': data['span'], 'span_dest_port': data['span_dest_port'], 'span_source", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\nNext line of code:\n      elements.add(new ASN1Boolean(false));\n    }\n    if (attributes != null && ! attributes.isEmpty())", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "           if os.access(os.path.join(self.dbm_dir, ext), os.F_OK):\n                list.append(os.path.join(self.dbm_dir, ext))\n        return list\n    def do_remove(self):\n        self", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "   stacker_build_map = stacker_lambda = stacker_unpack_ex = stacker_setup_loop = stacker_pop_block = stacker_label = stacker_block = stacker_jump = stacker_build_map = stacker_lambda = stack", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "           ContactFinder contactFinder = new ContactFinder(serviceProxy);\n            ContactInfo contactInfo = contactFinder.GetContactInformationByPhoneNumber(CallNumber);\n            if (contactInfo != null)\n            {\n                launchUrl(createUrl(contactInfo.Id, contactInfo", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "   if state == 'present':\n        changed = publication.__pub_add_table(tables)\n    elif state == 'absent':\n        changed = publication.__pub_drop_table(tables)\n    else:\n        module.fail_json(msg=\"Invalid state value\")", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object decoder) {\n        try {\n            return decoder.getClass().getMethod(\"clone\", (Class[])null).", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((InvasiveDeviceSearchCriteriaVo)beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "     if ( proxyCell.getUserObject() != null )\n      {\n         // Get the unit number from the proxy config element\n         int unit = getUnitFromProxyConfigElement(proxyCell.getUserObject());\n\n         // Find the appropriate port in the device cell\n         DefaultPort port", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "       // super(edge, new Rectangle(X0, Y0, 90, 20));\n        // super(edge, new Rectangle(X0, Y0, 90, 20));\n        // super(edge, new Rectangle(X0, Y", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}\n}\n```\n\nThis is a small addon for a small fishtank that has a Nujelm Honey small fishtank addon. It has a black bottom, blue shades, and", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "       } catch (SQLException e) {\n            throw (new IllegalArgumentException(\"Error parsing EXPLAIN string: \" + e));\n        }\n    }\n}", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "                   throw ex;\n                }\n            }\n        }\n    }\n}\n#endif", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "\t\t\t\tresult.append((cur.type, prog_ofs, mem_len, file_len))\n\t\t\tlen -= mem_len\n\t\t\tofs += mem_len\n\t\treturn result\n\tdef decorate_plt_name(self, name", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void OnItemAdd(object sender, ItemAddedEventArgs e)\n        {", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "\t\t\t\t_shippingService.CalculateShipping(order);\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t_orderService.UpdateOrder(order);\n\t\t\t//add a note\n\t\t\t", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tendIndex = value.length();\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, end", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "\t\t\treturn new EmptyIterator();\n\t\t}\n\t}\n}\n\nI hope you can help me with this code. \n\nNote: I have added some comments to the code to explain what each part of it does.\n\nPlease let me know if you need any more information", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "       return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crd = scpiDevice(':source:current', str_type=float)\n        self.sp = scpiDevice(':source:voltage', str_", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported: \" + contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private StreamSerializerDelegate GetResponse", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "       Dcopy.dcopy(i16, i19, 1, paramInt3, 0, paramInt3, paramArrayOfDouble1, paramInt5, paramArrayOfInt5, paramInt3, 0, paramInt3, 0, paramInt8, param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "   if (!success) {\n      // Bail out and let the user know what went wrong.\n      String message = I18n.format(\n        _(\"Failed to upload sketch to board; see {0} for help\"),\n        Base.getBoardPreferences().get(\"upload.tr", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "\t\tfor name in names['names']:\n\t\t\titem = frappe.get_doc(\"Item\", name)\n\t\t\tif item.print_qty > 0:\n\t\t\t\tprint_item(item)\n\t\t\t\titem.print_qty", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    // ...\n                } else if (constraintEntry.startsWith(\"denyAfter\")) {\n                    // ...\n                } else {\n                    throw new IllegalArgumentException(\n                            \"Invalid constraint: \" +", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "   self.add_song(TrackFile(1, \"Artist - Album\", \"Title\", \"Year\", 1, \"File Path\"))\n    self.add_song(TrackFile(2, \"Artist - Album\", \"Title\", \"Year\", 2, \"File Path\"))\n", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_HISTORY_DATUM] = Helper\n\t\t\t\t\t\t.formatDatum(new Date(itHistory.next().getT", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\tPlayer player = Main.players[e.Who];\n\t\t\t\tif (player != null)\n\t\t\t\t{\n\t\t\t\t\te.Data = player", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                ", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n        \n        // configure API call\n        ApiClient.ApiCall apiCall = ApiClient.", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "                                   + \"10^\" + (i * j));\n                                }\n                                else {\n                                    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "\t\t\t\t\tif (tempValues == null || tempDomains == null) {\n\t\t\t\t\t\tLog.info(\"Invalid values or domains, skipping plot\");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// get the", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "           cq = Workplane().box(1,1,1).faces(\"+Z\").fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        if not solidRef:\n            raise ValueError(\"No solid found to fillet\")\n        for", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "                               grapple.DockingState = \"Grappled\";\n                            }\n                            else\n                            {\n                                other.NeedsRepair = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n       ", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "               .collect(Collectors.toList()));\n        assertEquals(newBundlePushedAssets, Collections.emptyList());\n    }\n    private static List<Object> createContentTypeTestCase()\n            throws Exception {\n        final Host host = new HostDataGen().nextPersisted", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "           sleep(0.01)\n        #print('FIFO count = %s' % self.getFIFOCount())\n        #print('DMP enabled = %s' % self.getDMPEnabled())\n        #print('FIFO enabled = %s' % self.get", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\n            }\n        }\n        public virtual void AddResistanceProperties(List<string> list)\n        {\n            if (this.m_AosSkillBonuses.Any())\n            {\n                list.Add(1060435); // skill bonus ~", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tcore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "           if value:\n                self.write(cr, uid, [key], {key: value}, context=context)\n            else:\n                self.unset(cr, uid, [key], context=context)\n        else:\n            self.unset(cr, u", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "        sb.append((char) ('A' + d - 10));\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "       gq.gqgen(n, x, w);\n        * -- ALGLIB --\n         Copyright 2005-2009 by Bochkanov Sergey\n        *************************************************************************/\n        public static int gqgenlegendre(", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "           parent,\n            category=category_queue.pop(0),\n            block_id=category_queue.pop(0),\n        )\n        for _ in range(2):\n            self.create_subtree_for_deletion(node, category_queue)\n       ", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Gst.Message));\n\t\t\t\t}\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "       QuickShareLink sharedLink = new QuickShareLink();\n        sharedLink.setTitle(\"Test Shared Link\");\n        sharedLink.setDescription(\"This is a test shared link\");\n        sharedLink.setContent(content);\n        sharedLink.setPath(\"/ Alfresco\");\n", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "\n            } else {\n                // do nothing\n            }\n        }\n        return chooser.getSelectedFile();\n    }\n    protected void init() {\n        // Set up the menus\n        MenuBar menuBar = new MenuBar();\n        menuBar.setLayout(new", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "           assertTrue(\"createNumber(String) failed\", obj instanceof BigDecimal);\n            return (BigDecimal) obj;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n\n// Checked by Jenkins\n//-----------------------------------------------------------------------\n", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "           return ValidationError(\n                message=self.unique_error_message(model_class, unique_check[0]),\n                code='unique',\n                params=params\n            )\n        else:\n            return ValidationError(\n                message=self.unique_error_message", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionOnTransitionToJava(int", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "   paramtestdic[radioselect] = initialradiustep\n    #radii\n    radiustep = initialradiustep\n    for i in range(1,int(radiirange/stepsize)):\n        radiustep = radiustep + stepsize\n        if", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "       try:\n            cell_attributes = AttrDict(eval(cas_data_str))\n        except Exception as e:\n            self.main_window.statusBar().showMessage(\"Error parsing cell attributes: {}\".format(e))\n            return\n        # Check if cell attributes are", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsIdentity\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsRowVersion\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tmask_bits[y * width / 8 + x / 8] = (Byte)(pixel.R * 255 / 256);\n\t\t", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t\tu1 = q[0];\n\t\t\t\tu2 = q[1];\n\t\t\t\tu3 = q[2];\n\t\t\t\tv1 = q[3];\n\t\t\t\tv3 = q[4];\n\t\t\t}", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n}\n            }\n            return data;\n        }\n        public override void WriteUpdateFields(IObjectData writer, IObjectData existingData)\n        {\n            var data = existingData as", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "               5: SortableHeader('Pending', False, '', 'col-center'),\n                6: SortableHeader('Slide', False, '', 'col-center'),\n                7: SortableHeader('Script', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "       # enter each SNP\n        for snp in self.locsnps:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (cidx", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           result = rule.rrule_serialize()\n        else:\n            result = ''\n        return result\n    def _rrule_serialize_event(self, event_id):\n        event = self.browse(event_id)\n        result = self._rrule_", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "           string[] s121 = new string[] { \"hello\" };\n            string[] s122 = new string[] { \"world\" };\n            string[] s123 = new string[] { \"ice\" };\n            string[][] s12 = new string[][] {", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "   for line in h:\n        heads.append(line.decode('utf-8'))\n    if heads:\n        op.records.add('heads', heads)\ndef handlebundle2(op):\n    # Handle the bundle2 part\n    if op.reply is not", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "               if (tot < bytesPerRow) {\n                    return fout.ToArray();\n                }\n                dataStream.Seek(tot);\n                break;\n            }\n            dataStream.Seek(0);\n            return fout.ToArray();\n        }\n        ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight  - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        if(contentPaneStyle.getBorder() != null) {\n            prefWidth = Math.max(", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "\t\t\t\tRewardItem = null;\n\t\t\t\tRewardAttachment = null;\n\t\t\t\tRewardAction = null;\n\t\t\t\t//m_AutoReward = false;\n\t\t\t\t//m_CanSeeReward", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "\t\t\t\t//Loop through all the operatories and find open time slots.\n\t\t\t\tforeach(Operatory operatory in listWebSchedOps) {\n\t\t\t\t\t//Get the list of time slots for this operatory.\n\t\t\t\t\t", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public global::System.Collections.Generic.IEnumerator<TValue> GetEnumerator()\n\t    {\n\t        return new ReadOnlyDictionaryValueEnumerator<T", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "pMem1.z < pMem2.z ? -1 : 1;\n      }\n      else if ( pColl != null )\n      {\n        // Compare the strings using the collating function.\n        return pColl.Compare( pMem1.z, pMem", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "   _ = CStruct.from_buffer(elf, offset=0)\n\nI'm trying to create a Python script that can disassemble an ELF file, and I'm having trouble understanding the format of the ELF header.\n\nFrom what I can tell, the ELF header", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "           for (int i = 0; i < allClasses.length; i++) {\n                Index ix = allClasses[i];\n                if (ix != null && ix.cpMap.length > classRef.stringValue().length()) {\n                    return ix;\n               ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>Commands</h1>\");\n                html.WriteLine(\"      <table cellpadding=\\\"4", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 17);\n            this.quoteLabel.TabIndex = 7;\n            this.quoteLabel.Text = \"This is a quote\";\n            this.quoteLabel.Visible = false;\n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. Nc3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest MakeReadOnly() {\n      return defaultInstance;\n    }\n    \n    public static pb::MessageDescriptor Descriptor {\n      get { return global::bnet.protocol.exchange.Ex", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "   catch(Exception e)\n    {\n      // ignore\n    }\n    return null;\n  }\n  \n  private static final int[] FEATURE_STACK_BUTTON_ICONS = \n      {\n        // 0\n        new ImageIcon", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "                       AnalAttribAccess.LoadByApDocument(MainDs, rv.Row, ReadTransaction);\n                    }\n                }\n            }\n            return MainDs;\n        }\n        private static void LoadAnalysisAttributes(AccountsPayableTDS MainDS, Int", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "       # Perform the translation\n        translation = translate_document(\n            request, document_locale, parent_doc, based_on_rev,\n            discard_href=discard_href,\n            disclose_description=disclose_description)\n    except Exception as e:\n       ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "               ArgumentPanel.Name = \"ArgumentPanel\";\n                ArgumentPanel.Size = new System.Drawing.Size(200, 20);\n                ArgumentPanel.Location = new System.Drawing.Point(0, 0);\n                ArgumentPanel.BorderStyle = BorderStyle.FixedSingle", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\n            // now we can calculate the new widths\n            // first we'll calculate the width of the first column\n            // and then we'll calculate the width of the rest\n            // we'll use the calculated widths to set the table width\n            // and we'll set the", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\tvar result = new ArrayList();\n\t\t\tvar set = new HashSet<object>();\n\t\t\tforeach (var item in target)\n\t\t\t{\n\t\t\t\tif (!set.Contains(item))\n\t\t\t\t{\n\t\t\t\t\tresult", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "       return self._lists(values, key=self._key)\n    def __iadd__(self, other):\n        \"\"\"Inplace addition of values from other sorted-key list.\n        `skl.__iadd__(other)` <==> `skl += other`\n        Runtime complexity", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\t\t\t\tbuff[4] = (byte)((address & 0x000000ff)   >>  0);\n\t\t\t\tmReadDone.Reset();\n\t\t\t\tmReadBuff = new byte[size];\n\t\t\t\tWriteReport", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n        self.expunge_all()\n        self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                   min_distance = max(min_distance, abs(node.split - x[node.split_dim]))\n                else:\n                    min_distance = np.amax(side_distances, axis=0)\n                heappush(q, (min_distance,", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\n        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            ContentValues contentValues = new ContentValues();\n            content", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\n    private void SetNoLogValues(IDictionary spec, Dictionary<string, object> value)\n    {\n        // ...\n    }\n\n    private void CheckArguments(IDictionary spec, Dictionary<string, object> value)\n    {\n        // ...\n    }\n\n   ", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\t\t\t\t\t\t// Now update the map with the new sector\n\t\t\t\t\t\t\t\tmap.AddSector(newsector);\n\t\t\t\t\t\t\t\t// Update the linedefs to point to the new sector\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode PopReferenceNode( Object unityObject )\n\t\t{\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\n                    fd.delete();\n                }\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex.toString(), ex);\n            }\n        }\n    }\n    private void pruneEntries(final", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\n\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tList<P>\n\tgetPointsWithinDistance( final GenericPoint... points, double distance )\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Make sure the upgrade is actually present\n\t\t\t\t\t\t\t\tvar upgrade = Game.ModData.GetMod(\"Invulnerability", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "                   else if (this.RequiredRace == Race.Gnome)\n                        from.SendLocalizedMessage(1072204); // Only Gnomes may use this.\n                    return false;\n                }\n            }\n            return base.CanEquip(", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "                           m_From.SendGump(new HousePlacementGump(newHouse));\n                        }\n                    }\n                }\n            }\n        }\n        private readonly List<HousePlacementEntry> m_Entries = new List<HousePlacementEntry>();", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t\tplot = new Plot(imp, xfcoord, yfcoord, nf, n);\n\t\timp.setRoi(null);\n\t\tupdateNeeded = true;\n\t\tupdateSettings();\n\t}\n\tvoid getPlotValues() {\nNext line", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 220, name = \"FULLTEXT_THESAURUS_PHRASE_MAP\" },\n\t\t\t\tnew syspalvalue { @class = \"ITTY\", value = 2", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "\n    }\n    public void generate(int pos, int end) {\n        if (pos >= end) {\n            return;\n        }\n        if (debugCode) {\n            System.err.println(\"Code: \" + pos + \" - \" + end);\n        }\n", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\t\t\tMakeMaps();\n\t\t}\n\t\t\n\t\tvoid DoCompress() \n\t\t{\n\t\t\tint i;\n\t\t\tint[][] freq;\n\t\t\tint[][] len;\n\t\t\t\n\t\t\tfreq =", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "           if os.path.exists(dest):\n                # ...\n\\end{code}\n\nThe code is a mix of Python 2 and 3 syntax, and it seems to be using some Python 3-only features like `dict.get()` and `basestring`.\n\nThe", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "                       var actor = GetActor(args[1]);\n                        if (actor != null)\n                        {\n                            Push(actor.HitTest(args[2], args[3]));\n                        }\n                        else\n                        {\n                            Push", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "   if args.exclude_folders:\n        # Exclude folders\n        exclude_folders = [f for f in account.folders if f.name in args.exclude_folders]\n        account = Namespace.get_or_create(account.id, account.", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(ByVal value1 As Integer, ByVal value2 As Integer, ByRef index As Integer, ByRef count As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\", NewLine", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "       try:\n            with open(filename, \"r\") as f:\n                shared_mem = int(f.read())\n        except IOError:\n            logging.error(\"Could not read %s to get shared memory info\", filename)\n            shared_mem = None\n        return shared", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "\t\t\t\t.Append (Text)\n\t\t\t\t.Append (\")\")\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t\t\n\t}\n}\n}\n\n//\n// This code is free and open source software released under the", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinE\",\n                    Slot = SpellSlot.E,\n                    Type = SkillShotType.Skillshot", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                       self.setControl( \"widgetName\", widgetName )\n                        self.changeMade = True\n                        return\n                    else:\n                        self.setControl( \"widgetName\", widgetName )\n                        self.changeMade = True\n                        return\n               ", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "   'xNotesOffStyle': {\n        'name': 'SequentialMusic',\n        'type': 'ly:prob?',\n        'types': ('general-music', 'post-event',),\n    },\n    'yacc-grammar': 'yacc-grammar", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "   if gather:\n        merged_block = self.get_data(variables, gather, clear, annotations)\n    else:\n        merged_block = self.get_data(variables, gather, clear, annotations)\n        for p in self.populations:\n            p.record(", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "\n        return encode( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "       price_subtotal = self.price_subtotal\n        taxes = self.tax_line\n        for line in taxes:\n            tax_id = line.tax_id\n            amount = line.amount\n            if amount > 0:\n                self.tax_ids =", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "\t\t\t\t\tSelected (Menus [selected].Children [Menus [selected].Current]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic void", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "```\n  private static void layoutNode(float flexBasis, float flexDirection) {\n    // ...\n  }\n```\nPlease provide the full code for the `layoutNode()` method.", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\n        if (lastScanOffset > data.length) {\n            throw new RasterFormatException(\"Last scan offset is greater than data length\");\n        }\n    }\n}\n\n    // used to store the data offsets for each band\n    protected static final int[] DATA_OFF", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "                   \"   NEW: \" + nodeUpdate + \"\\n\");\n        }\n        return true;\n    }\n    \n    private void copyParentAssocsCached(Node node)\n    {\n        // Copy the parent associations from the old node to the new node\n        // By doing", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "   def get_enrollment_state(self):\n        # ...\n        return CourseEnrollmentState(\n            mode=self.mode,\n            is_active=self.is_active\n        )\n    def get_enrollment_state_dict(self):\n", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "\t\t\t\tswitch (c) {\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\t':\n\t\t\t\tcase '\\r':\n\t\t\t\tcase '\\n':\n\t\t\t\t\t// ignore whitespace\n\t\t\t\t\tbreak;\n\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "       self.client.system.removeCustomValues(self.session,\n                                                 system,\n                                                 keys)\n    # regenerate the cache of custom values\n    self.generate_custom_value_cache()\n    # update the SSM\n    if any(key in", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n            protected void layoutChildren() {\n                super.layoutChildren();\n                // do nothing\n            }\n        }\n        static class BoxView extends javax.swing.text.View {\n            BoxView(Element elem, int axis) {", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "               if (chr.Colliding)\n                {\n                    // If we're colliding, check if we're touching\n                    // another avatar or a prim\n                    if (chr.CollidingAvatar != null)\n                    {\n                        // If we", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   if (self.api_key and self.api_secret) and not (self.username and self.password_hash):\n        raise ValueError(\"Please provide a valid username and password or API key\")\n    if self.domain_names:\n        for domain in self.domain_names", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "   for t in ts:\n        t.start()\n    # wait for the end of the execution\n    while recs_queue.empty():\n        time.sleep(1)\n    write_message(\"Finished\")\n    return task_get_status()\ndef hepdata_", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "                       &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br /><br /><a href=\"%s/admin/websearch/websearch_external_collections_config.py", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "               return -value;\n            }\n        };\n    }\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n            @Override\n            public String getOperator() {\n                return \"NOT\";\n            }\n            @", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "   if self.disks:\n      for dev in self.disks:\n        node_uuid = self.cfg.GetNodeName(dev.node_uuid)\n        if node_uuid not in self.lu.owned_locks(locking.LEVEL_NODE):", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.Champions, CollisionObjectTypes.Minions, CollisionObjectTypes.YasuoWall };\n                });\n            #endregion\n        }\n        public SpellDatabase()\n        {\n            //Add spells", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\n    # Update the permanence values for the master cells\n    for master in range(self.numMasters):\n      masterPermanence = masterPermanence[master]\n      masterConnected = masterConnected[master]\n      masterValidPermanence = masterValidPermanence", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis.GetGridSpacing();\n\t\t\t}\n\t\t\tforeach ( YAxis yAxis in _y2AxisList )\n\t\t\t{", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "                           if (bmp_mono[n1] > 128)\n                            {\n                                hits1++;\n                            }\n                        }\n                    }\n                    side1 += hits1 * (x - x1) * (y - y1);\n", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occurred during decomposition\");\n            return ret;\n        }\n        #endregion\n        #region HYCALPER LINE START \n        private static ILArray<complex> copyUpperTri", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "       return contains;\n    }\n    public void setRippleEffect(boolean rippleEffect) {\n        this.rippleEffect = rippleEffect;\n    }\n    public void setRippleEffectColor(int color) {\n        this.rippleEffect", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "   if self.isRoot():\n        raise ParseError(\"Recipe is not a subclass of Bob\")\n    self.getSources()\n    self.getPackageName()\n    self.getMetaEnv()\n    self.isRoot()\n    self.isRelocatable()\n   ", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "       :param `event`: a `wx.Event` object.\n        \"\"\"\n        \n        self.SetToolTipString(\"\")\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.StopPreviewTimer()\n        self.", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           SaveLayout(xmlWriter, pane.HostedPane as DockablePane);\n            SaveLayout(xmlWriter, pane.Items[0]);\n            SaveLayout(xmlWriter, pane.Items[0]);\n            xmlWriter.WriteEndElement();\n        }\n        void", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\t// end of code\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t// ...\n\t//", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "           if e.nodeName == \"layout\":\n                self.layoutNode = e\n                break\n        except IOError:\n            log.log(0,\"error\",_(\"Layout ID\") + \" \" + self.layoutID + \" does not exist in file system\"))\n            self.built", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "                       output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[0], field[1], desc))\n                        output.write(\"      <field name='%s' type='%s' info='%s", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "       if vmap['name'] == 'JAVAC':\n            complt += 'case $line in\\n'\n            complt += '(JAVAC)\\n'\n            complt += '  _describe -t JAVAC options JAVAC && ret=0\\n", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeToObject\n    public static byte[] encode( byte[] bytes ) {\n        return encode( bytes", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "                   Node.TemplateText tt = (Node.TemplateText) body.get(0);\n                    if (tt.getContent() == null) {\n                        // XXX - This optimization is only valid if the\n                        // template text has no content.  If the content is\n", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "           }\n        }\n        public void OnDeath()\n        {\n            base.OnDeath();\n            if (m_ControlMaster != null)\n            {\n                m_ControlMaster.Followers.Remove(this);\n            }\n            if (m_Summon", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(7.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0] =", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "                  is_const=True, is_virtual=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase const * object, ns3::AttributeValue const & attribute) [member function", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                var method = methodGroup.Method;\n                if (method != null)\n                {\n                    // UNDONE: Consider reporting the method group as a whole, rather than just the method.\n                    // (This would require a", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "\t\tRowMetaInterface r = getRowMeta();\n\t\t\n\t\t// Check if the table exists\n\t\tif (checkTableExists(tableName))\n\t\t{\n\t\t\t// Alter table statement\n\t\t\tretval = getAlterTableStatement(tableName, fields", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverse         (bool reverse)\n        {\n            return FMOD_EventCategory_SetReverse(eventcategoryraw, (reverse ? 1 : 0));\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "           return package\n    return package\ndef _lock_module(name):\n    \"\"\"\n    Lock the module.\n    \"\"\"\n    with _ModuleLockManager(name):\n        pass\ndef _unlock_module(name):\n    \"\"\"\n    Unlock the module.\n    \"\"\"", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "   # Get the location data\n    response = requests.get(url, params=x)\n    data = response.json()\n    # ...\n\n    # If the response is a list of dictionaries, we have to unpack it\n    # and then convert it to a DataFrame\n", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "\tprotected override int RewardSetId { get { return 6; } }\n}\npublic class StewartExtLibraryKristinGlenPtjScript : StewartVarLibraryPtjBaseScript\n{\n\tprotected override bool DoShelving { get { return true; } }\n", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "           {\n                BigInteger result = new BigInteger();\n                result.data[0] = 1;\n                result.dataLength = numBits;\n                return result;\n            }\n            else\n            {\n                BigInteger result = new BigInteger();\n                result.data", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "     raise Exception(\"No headers phase found\")\n\nThis code is a generator of the project file format, which is used by Xcode to generate project files. It is based on the BSD license.\n\nThe code is written in Python and uses the Xcode project file format to generate a project file. The generator", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "       if cdata is None:\n            return\n        # Check if the subtensor is the only tensor in the fgraph\n        # that has the same shape as the input.\n        if not any(shape_feature.same_shape(shape, node.inputs[0])\n                    ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "\t\t\t\tcase Msg.WM_MOUSEMOVE:\n\t\t\t\t\tMouseMoveEventArgs e = new MouseMoveEventArgs (msg.LParam.ToInt32 (), PointToScreen(new Point (msg.LParam.ToInt32 (), 0)));\n\t", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": " #\n  python /DIRAC/Core/Utilities/Base.py --dirac-component-type web --dirac-component-name web --dirac-component-version $DIAC_COMPONENT_VERSION --dirac-component-build-number $DIAC_COMPON", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        This function initializes KD-tree with given dataset.\n          -- AL", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "       if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file {0} does not exist.'.format(md_file_path))\n        # load\n        self.load_preprocessed_scan(md_file_", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "\n            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    return true;\n                }\n            }\n            return false;", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "           search_reg_str = search_terms.replace(' ', r'[^\\w\\*]+')\n        search_list = search_terms.split()\n        found_set = self._index_dict.from_partial(search_list, case_sensitive)\n       ", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "                       diagnostics.Add(ErrorCode.WRN_ChecksumPragmaMismatch, existingDoc.Location, guid);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_ChecksumPragmaMismatch, existingDoc", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "               if self.__IsToken( \"{\"):\n                    self.__GetDefineStatements(FvImageSectionObj)\n                    self.__GetBlockStatement(FvImageSectionObj)\n                    self.__GetFvAlignment(FvImageSectionObj)\n                    self.__Get", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "           while (!successful && retryCount > 0) {\n                try {\n                    // perform the actual mounting of the data.\n                    mountDataInternal(dataFile, dataPrefix, values,\n                                        fileEditable, registerDataNames);\n                    successful = true", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                       // Process the exponent.\n                        phase = 3;\n                        affix = suffix;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n\\end{code}\n\nThis code is a part of the `java.", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "       BeginBatchUndo(self, int flags=0)\n        Begin a batch of undo operations.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "\n        }\n      }\n      }\n      return SQLITE_OK;\n    }\n#endif\n  }\n}\n}\n}\nnamespace System.Diagnostics\n{\n  public partial class Process\n  {\n    public static void Write(string value)\n    {\n     ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "```\nThis code is using the `ovirt_vm` module to manage Virtual Machines in oVirt/RHEV environment. It supports various states like `present`, `absent`, `running`, `stopped`, `next_run`, `export`, `registered`, `unregistered", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "       return {\n            'account_id': acc_src,\n            'account_id_dest': acc_dest,\n            'journal_id': journal_id,\n        }\n    def action_cancel(self, cr, uid, *args, **kwargs):\n       ", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "               this.childBranches.Clear();\n            }\n            private List<Branch> childBranches = new List<Branch>();\n            #endregion\n        }\n    }\n}\n```\n\nThis is the source code for the `TreeListView` class in the `", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       try {\n            m = ModeFactory.getMode(\"Channel_queries\", \"filter_subscriptions\");\n        } catch (Throwable t) {\n            log.error(\"Error getting mode\", t);\n            return toRet;\n        }\n        List<Map> result =", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "               dx0 = -hr;  dy0 =  0f;    dx1 =  0f;  dy1 = -vr;\n                break;\n            case 2:\n                dx0 = -hr;  dy0 =  0f;    dx1 =  0f;", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "           if paper.get('arxiv_id') and paper.get('doi'):\n                autoclaim_unsuccessful_recs.append((paper['arxiv_id'], paper['doi']))\n        if 'orcid_info' in session:\n            orcid_info", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "   def _wrapOptParseUsage(self, opt, value, parser):\n        self.logger.critical(_('Option %s not recognized') % opt)\n        self.base.usage()\n        self.exit()\n    def _wrapOptParse(self, opt, value, parser", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "\tthis.region = region;\n}\nvoid setState (int state) {\n\tif (state == 0) {\n\t\tstate = SWT.NONE;\n\t} else {\n\t\tstate = SWT.BORDER;\n\t}\n\tsetStyle (state", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "                   while self.tok[0] not in (')', ']'):\n                        if self.tok[0] == 'IDENT':\n                            param = self.Parse_expression()\n                            params.append(param)\n                        else:\n                            self.errorpos", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "   if matched_zero:\n      return False\n    # If we reach this point, it's likely that we have a function\n    # parameter that was not declared.  Check for the common cases:\n    #   int x = 0;\n    #   int y = 0;", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "       tag_id = json_d.get('tag', '').strip()\n        if tag_id:\n            tag_id = int(tag_id)\n            if tag_id in self.tag_map:\n                tag_value = self.tag_map[tag_id", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "                   tokenlist[ikey] = dictvalue\n                else:\n                    tokenlist[ikey] = _ustr(tok[0])\n    def getTokensEndLoc( self, loc ):\n        return loc\nclass RecursivelyMatchingGroup(Group):\n   ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "           corrr1dcircular(signal, m, pattern, n, ref c);\n        }\n    }\n}\n```\n```\nusing Alglib.\n```\nI have added the missing `ref` keyword for the `c` parameter in the `fftr1d` and `", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "\n    disk_units = {\n        '3': 3,\n        '2': 2,\n        '1': 1,\n        '0': 0,\n        'k': 1024,\n        'm': 1024 * 1", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "       for (int i = 0; i < ifds.length; i++) {\n            if (ifds[i] & ifdFlags) {\n                return new int[] {i};\n            }\n        }\n        return new int[] {};\n    }\n    protected static int", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\nNext line of code:\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "               if adding:\n                    raw[lhs] = rhs\n                else:\n                    raw[lhs] = os.path.join(os.path.abspath(os.path.normpath(lhs)), rhs)\n    # Convert the dictionary to a list of tu", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "   out = np.busday_offset(dates, offsets, roll='forward', weekmask='1111100', holidays=None, busdaycal=None, out=None)\n    out = np.busday_offset(dates, offsets, roll='", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "     return JavaCore.createPackageFragment(fileName, pkgEnd);\n    }\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName) {\n    return JavaCore.createPackageFragment(fileName);\n  }\n  public static IClassFileReader getClassFileReader", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "               dim_coord_subset = dim_coord_subset()\n            else:\n                dim_coord_subset = [slice(None)] * len(self)\n        else:\n            dim_coord_subset = [slice(None)] * len(self)\n        return", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "           for k in self.splitKeySet.intersection(tree2.splitKeySet):\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2DoesNot", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "   user.email_preferences = {\n        \"receive_emails\": receive_emails\n    }\n    user.save()\n    return JsonResponse({\"success\": True})\ndef get_preferences(request):\n    \"\"\"\n    Returns the user's email preferences", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "\t\t\t\tIMediaEncoderSettings mediaEncoder = (IMediaEncoderSettings)Activator.CreateInstance(mediaEncoderItems[0].Trim(), mediaEncoderItems[1].Trim());\n\t\t\t\tif (mediaEncoder != null)\n\t\t\t\t", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "       if arrayObjectMemberTypes:\n            arrayObject = CGList(CGGeneric(\"return Ok(%s::e%s(value));\" % (self.type, \"e\" + str(i))) for i, value in enumerate(arrayObjectMemberTypes))\n        else:\n            arrayObject", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "       return _uuid;\n    }\n    private void checkNotClosed()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"checkNotClosed\");\n        // Check that the connection", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "         hashes[filename] = (before, after)\n    # If we have a file that was deleted, we need to record the\n    # original file name and hash so we can upload it later.\n    for line in gitdiff:\n      if line.startswith(\"deleted\"):", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "\n                setMargins(a.getDimension(LEFT_MARGIN, UNDEFINED),\n                        a.getDimension(TOP_MARGIN, UNDEFINED),\n                        a.getDimension(RIGHT_MARGIN,", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "FLOAT10 val_real; // real component\n        }\n    }\n}\n```\nPlease let me know if you need any further assistance.", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            if url:\n                # We have a URL, let's check if it's a valid one\n                try:\n                    check_valid_url_value(url)\n                except StandardError", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "\n        public static readonly char[][] RFC3454 = new char[][] {\n            new char[] {'\\x0221', '\\x0000'}, // 221\n            new char[] {'\\x0234', '\\x0000", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int position = document.get(j).position();\n        labels[dataIndex][j] = position;\n        data[dataIndex][j] = new int[windowSize][];\n        for (int", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "                           result = concat(values, axis=self.axis)\n                    else:\n                        result = DataFrame(values, index=key_index,\n                                             columns=index)\n                    return result\n                except Exception:\n                    raise\n            else:\n               ", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "drawImage(bImg, op, x, y);\n}\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y,\n                          ImageObserver observer)  {\nNext line of code:\ndraw", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "               if end_line and end_line.isspace():\n                    # If the previous line ended with whitespace,\n                    # and the next line starts with whitespace,\n                    # then we're in the middle of a multi-line\n                    # comment, and we should skip this", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "   def record(self):\n        # type: () -> bytes\n        \"\"\"\n        Generate the string representing this UDF Logical Volume Implementation Use.\n        Parameters:\n         None.\n        Returns:\n         The string representing this UDF Logical Volume Implementation Use.\n       ", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "   def test_statFileWithStat(self):\n        \"\"\"\n        Check the output of the stat method with asked stats.\n        \"\"\"\n        fileContent = 'wobble\\n'\n        self.createFile('file.txt', fileContent)\n        d = self.shell.", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line.strip())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "           aggregator.aggregate(rolling_window_data, weights=weights)\n        else:\n            aggregator.aggregate(rolling_window_data)\n        return new_cube\n    def rolling_window(self, window, axis=0, **kwargs):\n        \"\"\"", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "       g = np.dot(N_k, f_k - u_k)\n        return g\n    #=========================================================================\n    def _computeUnnormalizedLogWeights(self, x):\n        # compute unnormalized log weights for given state x\n        #", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = (Sound)Marshal.GetObjectForIUnknown(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound = null;\n            }\n            return result;", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the compiled :class:`.Query` object after it has been\n        constructed from the original :class:`.Query` object.\n        This event is intended to allow", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "\t\t\t\t\t\t\t\tfrom.SendGump( new AdminGump( from, results.Count > 0 ? AdminGumpPage.Account : AdminGumpPage.NoAccount, results ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n            }\n        }\n        private static void GetSymbolsAndResultKind(BoundTernaryOperator ternary, out LookupResultKind resultKind, ref Immutable", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "\t\tif (gfc.mf_needed > 0) {\n\t\t\tret = lame_encode_flush(gfp, buffer[0], buffer[1], 0, 0);\n\t\t}\n\t\tbs.close_bitstream(gfp);", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "       self.parse(scanner, locals)\n    def execute(self, statement, locals=None):\n        \"\"\"Execute a Python statement.\"\"\"\n        self.invoke('beforeExecute', statement=statement, locals=locals)\n        result = self.run(statement, loc", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "           RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".PartnerKey\");\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".LocationKey\");\n            // Apply security\n            PPersonAccess.", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "           if (extensions.ToLower().Contains(\"opengles\"))\n            {\n                contextProfile = 1;\n                sizedFormats = _NON_LEGACY_FORMATS;\n            }\n            else\n            {\n                contextProfile = 0;\n               ", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "   if auth_code == 0:\n        raise InvenioWebInterfaceError, auth_message\n    else:\n        raise InvenioWebAccessError, auth_message\ndef get_magic_from_file(file_path):\n    magic_result = None\n    try", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "           default:\n                throw error(\"Unrecognized inline flag\");\n            }\n            ch = read();\n        }\n    }\n    private void error(String message) {\n        throw new PatternFormatException(message);\n    }\n    private void findSupplementary(int start,", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "\n * <code>String encoded = Base64.encode(myByteArray);</code>\n *\n * <p>Note that the above code is just an example of how to use the\n * Base64 class. You may need to modify it to suit your specific\n * requirements.</p", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "       final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final Host host = _hostDao.findById(srcHostId);\n        final Host host2 = _hostDao.findById(destHostId);\n        final DataStore", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "           return new ToolkitEventMulticaster(a, b);\n        }\n        // ... rest of implementation cloned from AWTEventMulticaster ...\n    }\n    static private class SelectiveAWTEventListener extends AWTEventListener {\n        SelectiveAWTEventListener(AWTEventListener listener", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "               tbl_ix = (data[base] & 255);\n            if (tbl_ix < 0 || tbl_ix >= dc_ix.length)\n                throw new IOException(\"Invalid Huffman Table Index: \" + tbl_ix);\n            base++;\n        }", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                   this.AddLabel(x2 + 30, 215, 55, a.Text(200233));   // \"Deathball\"\n                    this.AddButton(x2, 215, 0xFAB, ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "               if (AllSubmissionsOK == false)\n                {\n                    TLogging.LogAtLevel(9, \"TPartnerEditUIConnector.SubmitChangesPersonnelData: AVerificationResult = \" + AVerificationResult);\n                }\n            }\n            return All", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\n    def do_create(self, *args):\n        \"\"\" Create a new test file with the given name and add it to the\n            test package directory \"\"\"\n        testname = args[0]\n        test = Test.create(testname)\n        test.write_to_file", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
