{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\traspodelaTable.updateUI();\n\t\t\traspodelaTable.scrollRectToVisible(raspodelaTable.getCellRect(0,raspodelaTable.getRowCount()", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "                SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");\n              }\n              return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "plt.show()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "       sendBean(\"B\", 1, 1L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        assertFalse(listener.", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "\t\taliases.Add (\"hebrew\", \"windows_1255\");\n\t}\n}\n}\n\nNote that this code is not complete, and you will need to add more aliases for other languages. Also, keep in mind that the `GetAlias` method is not", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "\t\t\trectF.set(top_left.x, top_left.y, top_right.x, top_right.y);\n\t\t\trectF.sort();\n\t\t}\n\t}\n\t\n\tpublic void setUuid(UUID uuid) {", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "   if class_name == 'd':\n        return class_contents\n    elif class_name == 'w':\n        return class_contents\n    elif class_name == 'h':\n        return class_contents\n    elif class_name == 's':\n        return class_contents\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "           self.__repeat = (delay, interval)\n        elif delay is None and self.__repeat[1] is not None:\n            self.__repeat = (None, self.__repeat[1])\n        else:\n            self.__repeat = (delay, interval)\n        return self\n        \n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "               tree.setSelection(item);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "       Set<String> mustStatusSet = new HashSet<String>(\n            operationSetPresence1.getMustStatusSet());\n        mustStatusSet.removeAll(supportedStatusNames);\n        //if the must set is empty, then the implementation doesn't offer\n        //any status", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "   env.do_delayed_imports(logger, test_paths)\n```\n\n\n\n\n\n\n\n", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "       reload();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "                           await CheckCloseBattle();\n                        }\n                    });\n                }\n            }\n            poll.AddOptions(options);\n            return await poll.StartPoll();\n        }\n        public async Task CheckCloseBattle()\n        {\n            if (IsInGame", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "   if self.param_type == INTERFACE_FULL_NAME:\n        self.init_interface_data(self.interface)\n        self.get_interface_info()\n        if is_ethernet_port(self.interface):\n            self.get_port", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 9);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(148, 18);\n", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the measurement\n        self._wavemeterdll.Operation(self._cCtrlStop)\n        # stop the thread\n        self", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i))) return false; // $NON-NLS-1$\n    }\n    return true; // $NON-NLS-", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(400, 300);\n\t\t\tthis.Load += new System.EventHandler(this.TissueControl_Load);\n\t\t\tthis.VisibleChanged += new System.EventHandler(this.Tissue", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is a log class for the Arya Auction System. It is meant to be used with", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   observations = [\n        {\n            'loc': getLocation(o['loc']),\n            'time': o['time'],\n            'code': o['code'],\n            'translations': [t['translation'] for t in translations_dict[o['code']]]", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\t}\n\t\t\t\treturn assembly;\n\t\t\t}\n\t\t}\n\t\tclass InternalAssembly", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"Setting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Settings.Get<Setting>(strings[1]);\n\t\t\t\t\t\t\t\tsetting.Value = node", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "   def __init__(self, report, title, step):\n        \"\"\"\n        @param report        -- The instance of the main report class\n        @param title         -- The title of the page\n        @param step          -- The step number\n        \"\"\"\n        BasePage.__init__(self,", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\t// reassemble packet\n\t\t\t\tPacket p = new Packet(buf);\n\t\t\t\t// return packet\n\t\t\t\treturn p;\n", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "                           sead_partnn_l = findPath(nodemap, c_sead, maxs, hub_threshld);\n                        }\n                        if (sead_partnn_l != null) {\n                            sead_l.addAll(sead_", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "       ]\n        for name in names:\n            raw_data = Series(name[0])\n            clean_data = parse_tables.clean_name(raw_data)\n            assert clean_data == name[1]\n    def test_clean_name_raises_error(", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "       if (persist)\n        {\n            // Persist input to memento\n            final String factoryID = opiRuntimeDelegate.getFactoryID();\n            final String inputID = input.getID();\n            final String mementoStr = createMemento(factoryID, inputID);\n", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if m.lat > max_relalt_mm:\n                raise NotAchievedException(\"Takeoff initiated before ready\")\n            self.set_parameter(\"HELICOPTER_TAKEOFF_ALT\", 1000)\n            self.set_parameter(\"", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "           key_func = lambda x: x[1]\n            sort_order = sort[0]\n        all_assets = SortedAssetList(course_assets.setdefault(asset_type, []))\n        if start > 0:\n            all_assets = all_assets[", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "       return logging.makeRecord(name, level, func, lno, msg, args, exc_info, **kwargs)\n    def setLogRecordFactory(self, factory):\n        # sadly, we must subclass and override, rather than use the new\n        # setLogRecordFactory()", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "           if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n                // Perform contextual menu action\n                // ...\n            }\n        }\n    }\n}\n\nPlease modify the code to make the combo box", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "               index = -1;\n            }\n            public void Dispose()\n            {\n                list.IsReadOnly = true;\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count - 1)\n                {\n                    index++;\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "                               m.Mana -= 20;\n                            }\n                            else\n                            {\n                                m.SendMessage(\"You have reached the skill cap for that skill\");\n                            }\n                        }\n                        else\n                        m.SendMessage(\"You need ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "   host = 'localhost'\n    port = 22\n    username = 'root'\n    password = 'ansible_password'\n    private_key_file = '/home/user/.ansible/hosts_key'\n    control_path = '/home/user/.ansible/", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "   return unionrepository(ui, path, parentpath)\n\ndef main():\n    ui = util.ui()\n    path = ui.config('bundle', 'mainrepo', '')\n    create = ui.config('bundle', 'maincreate', False)\n    if create:\n        instance", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "           for field, val in hash_.items():\n                fields[field] = val\n                extra_attrs[field] = val\n            if fields:\n                model_obj = queryset.get(**fields)\n                if model_obj:\n                    extra_attrs = {", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "\t\tims.dto.Wardlist ward = new ims.dto.Wardlist();\n\t\tward.Rsno = DataCollection.get(0).Rsno;\n\t\tward.Hpcd = DataCollection.get(0).Hpcd;", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "   bind_layers(ethernet=ENIP, inet=TCP)\n\nI am trying to understand how to use the code provided to extract the information from the EtherNet/IP packets. Can someone please explain the code and how to use it?\n\nI am trying to extract the", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "           return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail)\n        recid = argd['recid']\n        body, errors, warnings = perform_request_newticket(ln, recid)", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "           record_add_field(rec, '520', subfields=[('p', page_count)])\n        if publisher:\n            record_add_field(rec, '264', subfields=[('c', publisher)])\n        if collection:\n            record", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// \n\t\t// ", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "                   if (house != null)\n                        bonus = 50.0;\n                }\n                //int range = 18 - (int)(m.Skills[SkillName.Hiding].Value / 10);\n                int range = 18 - (int", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, c));\n            }\n        }\n    }\n    public void testViewRow() {\n        IntMatrix1D row = A.viewRow(NROWS / 2);\n       ", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "           arena.getMonsterManager().addCreature(e);\n        }\n        return e;\n    }\n}\n\nPlease complete the code by implementing the spawn method for each creature.\n\nNote: The method name should be \"spawn\" and it should take an \"Aren", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "           }\n        }\n        private void pictureBox1_MouseClick(object sender, MouseEventArgs e)\n        {\n            if (e.Button == MouseButtons.Left)\n            {\n                // \n                // \n                // \n                // \n                // \n", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; ++y, line += delta )\n\t\t\t{\n\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "   reader = supported_extensions()[os.path.splitext(fname)[1]]\n    return reader(fname)\n    # raise ValueError(\"Unsupported file extension\")\n\\end{code}\n\nI have provided the code for a set of classes that represent different", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "           tableStrengthScore.setPlayer(player);\n            tableStrengthScore.setScore(calculateTableStrength(opponent.getValue()));\n            strength += tableStrengthScore.getScore().get(0);\n        }\n        tableStrengthScore.setPlayer(player);", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "   results.write(\n        [\n            np.array(out_list),\n            np.array(out_names),\n            np.array(out_comment),\n            np.array(out_units)\n        ],\n        names=['OUTPUT', 'NAMES',", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "   text = obj.decode(\"utf-8\", \"replace\")\n    return list(loads(text, mapping, implementation, strict))\ndef get_ris_implementation():\n    return RisImplementation.BASE\ndef get_wok_implementation():\n    return Wok\ndef get_mapping", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (cell.getDepth() + maxDepth));\n\t\t\t\t\t\tcgn.y = (int)(y", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "           res = c.get(\"/\")\n            res.get_data()\n            assert res.status_code == 401\n\n\n    def test_webhook_on(self, temp_dir, common_obj):\n        web = web_obj(temp_dir, common", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length){\n\t\t\t\ttowerList[index].baseStat.costs[i]=0;\n\t\t\t}\n\t\t\telse{\n\t\t", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\tif (orig == null || !orig.exists())\n\t\t\tcopyFileToCoverImageIfMissing(orig, mDbHelper.getBookUuid(newId));\n\t}\n}\n\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "           {\n                nsClientService = mLocalBinder.getService();\n                aapsLogger.debug(LTag.NSCLIENT, \"NSClientService connected\");\n            }\n        }\n    };\n    private void resend(String reason) {\n        if (nsClientService", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "\t\t\t\tAddRes( index, typeof( Moonstone ), 1032698, 1, 1044240 );\n\t\t\t\tAddRecipe( index, 34 );\n\t\t\t\tSetNeededExpansion( index, Exp", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "   try:\n        module = AnsibleModule(argument_spec=fields, supports_check_mode=False)\n        mm = Connection(module)\n        results = fortios_wireless(mm)\n        module.exit_json(**results)\n    except Exception as e:", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "   #os.environ[\"VSEXTCOMP_USECL\"] = \"MS_OPENSSL_EXT_COMP\"\n    #os.environ[\"VSEXTCOMP_USECL\"] = \"MS_OPENSSL_EXT_COMP\"\n    #os.environ[\"VSEXTCOMP", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\n    def test_prop2po_file(self, capsys):\n        \"\"\"tests running prop2po on a file\"\"\"\n        inputfile = BytesIO(b\"SAVEENTRY=Save file\\n\")\n        outputpo = self.convertprop(inputfile)", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "   this.node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setNode(Node node) {\n    this.node = node;\n  }\n  public void setPres", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "       return kind != null ? kind : EOF;\n    }\n}\n\nPlease let me know if you need any further assistance.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic \" + Name + \"Implementor Implementor {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\tget {\");\n\t\t\tsw.WriteLine (\"\\t\\t\\t\\treturn implementor;\");\n", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "           return GroupByWithMinSize(prevChildren, c => c.Title, childFactory);\n        }\n        private static ContentItem[] GroupByWithMinSize(IEnumerable<ContentItem> previousChildren, Func<ContentItem, string> groupSelector, GroupFactoryDelegate childFactory)\n       ", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        #endregion\n    }\n}", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            }\n        public static void Initialize()\n        {\n            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            foreach (DyeType type in Enum", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "           query_str = urllib.urlencode(query_args)\n            path += '?' + query_str\n        else:\n            path += '/'\n        if method == 'GET':\n            method = 'GET'\n        elif method == 'POST':\n            method = 'POST", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "       soaResponse = dns.message.make_response(query, soa)\n        soaResponse.use_edns(edns=False)\n        responses.append(soaResponse)\n        for _ in range(200):\n            response = dns.message", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "               this.gwtCertificatesService.uninstallCertificate(selected.getKeystoreId(), selected.getAlias());\n            }\n        });\n        this.applyModalButton.setText(MSGS.apply());\n        this.applyModalButton.addClickHandler(event ->", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "       return \"ImageIcon(\" + filename + \", \" + description + \")\";\n    }\n    private static final long serialVersionUID = 1L;\n}\n\n// End of ImageIcon.java\n\n// Beginning of ImageIcon.java\n\npackage javax.swing;\n\nimport", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "\t\t\t\t\"        {0}\" +\n\t\t\t\t\"        Private Sub SomeMethod(Of T, As S, New R As System.IDisposable)(){0}\" +\n\t\t\t\t\"        End Sub{0}\" +\n\t\t\t\t\"    End Class", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i].getTile(), left, top, right, bottom, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale){\n\t\tfor(GraphEdge edge : edges", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin_obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "\t\t\t\treturn originalObject != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\n\t\t\t\treturn getTraceSequence().size() > 0;\n\t\t\tcase ActivitydiagramPackage.TRAC", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "   try:\n        if data['system_switch_interface']:\n            result = fortios_system_switch_interface(data)\n            if not is_successful_status(result):\n                return False, None\n            return True, result\n    except Exception as e:\n", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "\t\tList<Event> events = new ArrayList<Event>();\n\t\tnew SnmpInterfaceUpdater(db, imported).execute(events);\n\t\tnew InterfaceUpdater(db, imported).execute(events);\n\t\tnew ServiceUpdater(db, imported).execute(", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "           if os.access(self.file + os.extsep + ext, os.F_OK):\n                list.append(self.file + os.extsep + ext)\n        return list\n    def set_value(self, key, value):\n        self.dbm =", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "   if state == 'present':\n        changed = publication.__pub_add_table(tables)\n    elif state == 'absent':\n        changed = publication.__pub_drop_table(tables)\n    else:\n        module.fail_json(msg=\"Invalid state\")\n", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "       of log(pre_sigmoid_nv)\n        which is the correct form.\n        \"\"\"\n        # compute reconstruction cost\n        cost = T.mean(T.square(pre_sigmoid_nv - self.input))\n        # increment the shared variable for", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           TripChain c = new TripChain(Person);\n            c.Trips = new List<ITrip>(Trips.Count);\n            foreach (var t in Trips)\n            {\n                c.Trips.Add(t.Clone());\n            }\n            return", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "           throw new IOException();\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object decoder) {\n        try {\n            return decoder.getClass().getMethod(\"clone\", (Class[]) null).", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "       // super(edge);\n        // this will create a new arrow head\n        // and add it to the group\n        // but we don't want that\n        // so we create a new arrow head\n        // and add it to the group\n        // and set the arrow head to the", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "           checksum, expected_checksum = checksums.get(block=False)\n            assert checksum == expected_checksum\n    except Queue.Empty:\n        pass\n    assert os.path.isfile( pjoin(cfg.webdav_backend_directory,\"foo", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "   class StackMismatch(SibilantException):\n        def __init__(self, label, label_size, jump_size):\n            self.start_size = label_size\n            self.label = label\n            self.jump_size = jump_size\n            super().", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}\n\nPlease help me complete this code. I'm not sure what the code is supposed to do or how to complete it.\n\nThank you in advance.", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "                   throw ex;\n                }\n            }\n        }\n    }\n}\n\n", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "\t\t\tresult.append((cur.magic, cur.type, cur.encoding, cur.version, cur.abi, cur.osabi, cur.entry_point, cur.section_header_count, cur.section_headers))\n\t\t\tlen -= mem_len\n\t", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "     elements.add(new ASN1Boolean(false));\n    }\n    if (! includeAuthZEntry)\n    {\nNext line of code:\n      elements.add(new ASN1Boolean(false));\n    }\n    if (attributes != null && ! attributes.isEmpty())", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((InvasiveDeviceSearchCriteriaVo)beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "\t\t\treturn new EmptyIterator();\n\t\t}\n\t}\n}\n}\n\nPlease help me complete the code.\n\nAnswer:\n\nHere is the completed code:\n\npackage com.idevicesinc.sweetblue;\n\nimport android.content.Context;", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tendIndex = value.length();\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, end", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "           ContactFinder contactFinder = new ContactFinder(serviceProxy);\n            contactFinder.Criteria = new FilterExpression();\n            contactFinder.Criteria.Add(new ColumnExpression(\"PhoneCallId\", \" equals\", CallNumber));\n            contactFinder.Find();\n           ", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "       nextToken = text.indexOf(\" estimated rows=\");\n        if (nextToken < 0) {\n            throw (new IllegalArgumentException(\"Invalid EXPLAIN result: no \\\" estimated rows=\\\"\"));\n        }\n        try {\n            estimatedRows = Long.parseLong(text", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "       Dcopy.dcopy(i16 - 1 + (1 - 1) * paramInt8 + paramInt7, paramArrayOfDouble3, i19 - 1 + (1 - 1) * paramInt8 + paramInt7, 1, paramArrayOfDouble", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                throw new NotSupportedException(\"ContentType not supported\");\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializerDelegate GetResponseSerializer(string contentType", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "     if ( proxyCell.getUserObject() instanceof ProxyInfo )\n      {\n         // Get the unit number from the proxy cell's user object\n         int unit = ((ProxyInfo)proxyCell.getUserObject()).getUnit();\n\n         // Find the appropriate port in the device cell", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterDataBound(object sender, EventArgs e)\n        {\n            this.Items.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "   self.add_tracks(tracks)\n\nI need help with the following:\n\n1. How to create a new class `TrackCollection` that inherits from `object` and has the same methods as the `TrackCollection` class in the code snippet provided.\n2. How to", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.find()) {\n                        String keySize = matcher.group(1);\n                        Set<Constraint> constraint", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "\t\t\t\tShippingService.CalculateShipping(order);\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t_orderService.UpdateOrder(order);\n\t\t\t//add a note\n\t\t\torder", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicatePkgs(Configuration cf,\n                                ", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "       return self._conf_helper('sp', options)\n    def _create_devs(self):\n        self.crdg = scpiDevice(getstr='CRDG?', str_type=float)\n        self.enabled_list = MemoryDevice(['A', 'B", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "           cq = Workplane().box(1,1,1).edges(\"+Z\").fillet(0.1)\n        \"\"\"\n        solidRef = self.findSolid()\n        for e in self.objects:\n            if not isinstance(e, Edge):\n               ", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "   if (!success) {\n      throw new RunnerException(\n        _(\"Failed to upload program to board.\"));\n    }\n    return suggestedClassName;\n  }\n  protected void prepare() {\n    // nothing to do\n  }\n  protected void reset() {\n    //", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "\t\t\t\t\t// check for invalid values\n\t\t\t\t\tfor (int i = 0; i < tempValues.length; i++) {\n\t\t\t\t\t\tString value = tempValues[i];\n\t\t\t\t\t\tif (value == null)\n\t", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\t\tfor name in names['names']:\n\t\t\tprint(name)\n\t\t\tfrappe.print_dict(get_item_info(name))\n\t\t\tfrappe.print_dict(get_variant_info(name))\n\t\t\tfrappe.print", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\n            }\n        }\n        public virtual void AddResistanceProperties(List<string> list)\n        {\n            base.AddResistanceProperties(list);\n            if (this.m_Identified)\n            {\n                list.Add(1060460,", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "\t\t\t\tdata[i][ProjektReportFac.REPORT_PROJEKT_JOURNAL_OFFENE_ID] = itHistory\n\t\t\t\t\t\t.next()\n\t\t\t\t\t\t.getX_id();\n\t\t\t", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "           sleep(0.01)\n\nimport time\n\n# Set the MPU6050 I2C address\nmpu6050 = MPU6050(address=0x68)\n\n# Set the MPU6050 register map\nmp", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\tPlayer player = Main.player[e.Who];\n\t\t\t\tstring name = player.name;\n\t\t\t\tplayer.name = String.Format(Config.Chat", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "       gqgeneraterec(alpha, beta, mu0, n, ref info, ref x, ref w)\n        * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling listOrganizationPublicTransportStops(Async)\");\n        }\n        \n        // create path and map variables\n        String localVarPath = \"/organizations/{", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "        sb.append((char) ('A' + d - 10));\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "                                   + \"10^\" + i);\n                                }\n                                else {\n                                    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                                        tick", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "       // Create a new shared link\n        QuickShareLinks quickShareLinks = new QuickShareLinks();\n        quickShareLinks.setPath(\"/path/to/file\");\n        quickShareLinks.setContent(content);\n        quickShareLinks", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "           parent,\n            category_queue.pop(0),\n            fields={'display_name': 'Subtree ' + str(len(category_queue))}\n        )\n        for _ in range(2):\n            self.create_subtree_for_deletion(node", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "               .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n    }\n    private void assertAll(Map<String, Object> config, List<Object> dependencies)\n            throws DotDataException, DotSecurityException {\n", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "                               grapple.DockUid = part.Uid;\n                            }\n                            else\n                            {\n                                other.NeedsRepair = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending(int action) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "           assertTrue(\"createNumber(String) failed\", obj instanceof BigDecimal);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n\n// End of NumberUtilsTest.java", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "           if replace:\n                self.write(cr, uid, [res['id']], {key: value})\n            else:\n                self.read(cr, uid, [res['id']], [key], context={'obj': self})\n                value = self.read", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new ImageHelper(102107, \"Images/Core/Alert.png\", -1, -", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsIdentity\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsPrimaryKey\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t\t_abi_info.Type = (GLib.AbiType) 1; // int\n\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "               5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Slide', False, '', 'col-center'),\n                8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "\n            }\n        }\n        return chooser.getSelectedFile();\n    }\n    protected void init() {\n        //#if defined(LOGGING)\n        //@#$LPS-LOGGING:Granularity:Import\n        //#endif\n        //", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tif (v3.sign < 0)\n\t\t\t\t\tbreak;\n\t\t\t\tu1 = u1.Add(v1);\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "   for line in h:\n        heads.append(line)\n    assert len(heads) == 1\n    assert heads[0].startswith('remote:')\n    assert heads[0].endswith(':')\n    assert heads[0].count(':') == 2", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\"};\nNext line of code:\n            string[][] ss12 = new string[][] { s121", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "           key = unique_check[0]\n        else:\n            key = NON_FIELD_ERRORS\n        return ValidationError(\n            message=opts.get_field(key).error_messages['unique'][0],\n            code='unique',\n            params=params", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "   paramtestdic[radioselect] = minradio\n    paramtestdic[gammaselect] = mingamma\n    #~ if minmaebyelement < nextelementsymbol:\n    #~ if nextelementsymbol == elementsymbol:\n    #~ else:\n", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "\t\t\tfor(int i=0;i<listProviderSchedules.Count;i++) {\n\t\t\t\t//Get the provider schedule for the date range passed in.\n\t\t\t\tList<Appointment> listApptsForProvider=listApptsForOps[", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "       int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight  - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        int width = Math.min(availableWidth, prefWidth);\n        int x = 0;\n", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "       try:\n            # Parse cell attributes\n            cell_attributes = AttrDict(csv.DictReader(cas_data_str.splitlines()))\n            # Shift cell attributes to top left bbox corner\n            cell_attributes = cell_attributes.for_table(model.table)", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tcursor_bits [(y * width / 8) + (x / 8)] = (Byte)(pixel.R * 0x0101010", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "           for (int i = 0; i < allClasses.length; i++) {\n                Index ix = allClasses[i];\n                if (ix == null)  continue;\n                if (ix.classRef.equals(classRef)) {\n                    return ix;\n", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "pMem1.z < pMem2.z\n);\n        return pMem1.z < pMem2.z ? -1 : 1;\n      }\n      else\n      {\n        Debug.Assert( ( combined_flags & MEM_Blob ) != 0 );", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n}\n            }\n            if (changesMask[130])\n            {\n                for (var i = 0; i < 2; ++i)\n                {\n                    if", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "       for snp in self.locsnps:\n            # in case multiple consens were merged in step 6 of this sample\n            for tup in tups:\n                cidx, coffset = tup\n                pos = snp + (self.gtrim - coffset)\n", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest MakeReadOnly() {\n      return defaultInstance;\n    }\n    \n    public static pb::MessageParser<ReportRefundRequest> Parser {\n      get { return _parser; }", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 17);\n            this.quoteLabel.TabIndex = 1;\n            this.quoteLabel.Text = \"This is a quote from a famous Doomer builder, \\r\\nwho is known", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "           if rule.byday:\n                for day in day_list:\n                    if rule.byday.startswith(day):\n                        data[day] = True\n        else:\n            data = {}\n        return data\n    def _rrule_serialize(self,", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            // Write the decoded image to the output stream\n            fout.Write(curr, 0, curr.Length);\n            return fout.ToArray();\n        }\n        \n        private", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "                       AAnalysisAttributeRow AnalAttribRow = AAnalysisAttributeAccess.LoadByApDocumentId(rv.Row[AAnalysisAttributeTable.GetApDocumentIdDBName()], ReadTransaction);\n                        AnalAttribRow.Active = true;\n                        rv.Row", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\tOwner.SendMessage(\"You have earned a reward!\", m_RewardAction);\n\t\t\t\tOwner.PlaySound(0x22E);\n\t\t\t\tRewardItem = null;\n\t\t\t\tRewardAttachment = null;", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "               ArgumentPanel.Name = \"ArgumentPanel\";\n                ArgumentPanel.Size = new System.Drawing.Size(200, NextControlVPos);\n                ArgumentPanel.Location = new System.Drawing.Point(0, 0);\n                ArgumentPanel.BorderStyle = BorderStyle.Fixed", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public global::System.Collections.Generic.KeyValuePair<TKey, TValue> this[TKey key]\n\t    {\n\t        get\n\t        {\n\t", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "   _fields = [ (\"ident\",\"16s\"),\n                (\"type\",\"u32\"),\n                (\"machine\",\"u16\"),\n                (\"version\",\"u16\"),\n                (\"entrypoint\",\"u32\"),\n                (\"phoff\",\"u32\"),\n                (\"shoff", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t#region Reduce\n\t\tpublic static T Reduce<T, TResult>(this IEnumerable<T> source, Func<T, TResult> reduce)\n\t\t{\n\t\t\tT result =", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate void OpenWiimoteDevice()\n\t\t{\n\t\t\t// open the device\n\t\t\tmHandle =", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>Commands</h1>\");\n                html.WriteLine(\"      <table cellpadding=\\\"4", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. Nc3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "   def distance(self, x, k=1):\n        return haversine_distance(x, self.tree)\n    def nearest_neighbors(self, x, k=1, eps=0, p=2):\n        return heappop(self.distance", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tif (type != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tm_arSpellDefense.Add", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "   catch(Exception e)\n    {\n      return null;\n    }\n  }\n  \n  public void setScaleFactor(int scaleFactor)\n  {\n    this.scaleFactor = scaleFactor;\n  }\n  \n  public int getScaleFactor", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "       # Perform the translation\n        translation = translate_document(\n            parent_doc, request.user, based_on_rev, discard_href,\n            disclose_description, revision_id)\n    except TranslationError as e:\n        # If there's an error,", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "\t\t\t\t\t\t\t\t// Join the new sector with the rest of the map\n\t\t\t\t\t\t\t\tTools.JoinSectorWithMap(newsector, map);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "\n            }\n            // now we have all the needed values, so we can create the new table\n            // first we'll calculate the total width of the new table\n            // and then we'll calculate the total height\n            // and then we'll create the new table\n            // and", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ), \"Behaviour\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode SearchObject( Object unityObject )\n\t\t", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "       return self._lists + values\n    def __iadd__(self, other):\n        \"\"\"Return new sorted-list instance containing all values in both\n        sequences, with the addition of the `other` sequence.\n        \"\"\"\n        return self + other\n    def __len__(self):\n", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityUpgrade@EXPERIENCE\", emptyYaml));\n\t", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n        self.expunge_all()\n        self.bind_mapper(self.engine)\n        self.bind_mapper(self.connection)\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "                   else if (this.RequiredRace == Race.Human)\n                        from.SendLocalizedMessage(1072204); // Only Humans may use this.\n                    return false;\n                }\n            }\n            return base.CanEquip(from", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\n        if (emails == null) {\n            return;\n        }\n        for (int i = 0; i < emails.length(); i++) {\n            JSONObject email = emails.getJSONObject(i);\n            ContentValues contentValues = createContentValues(Email.CONT", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"JTBL\", value = 0, name = \"JOIN_TYPE_NONE\" },\n\t\t\t\tnew syspalvalue { @class = \"JTBL\", value = 1, name = \"JOIN_TYPE", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "\n        }\n        private void ExitModule(int rc)\n        {\n            Exit(rc);\n        }\n        private void WriteLine(string line)\n        {\n            WriteLine(line);\n        }\n    }\n}\n```\n\nThis code is a part of", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tMakeMaps();\n\t\t}\n\t\t\n\t\tvoid DoCompress() \n\t\t{\n\t\t\tint i;\n\t\t\tint[] freq;\n\t\t\tint[] len;\n\t\t\t\n\t\t\tfreq = new int", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "\n\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n\tpublic static <P extends GenericPoint>\n\tList<P>\n\tgetPointsAlongPath( final R3 path )\n\t{\n\t\t", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "                       var x = args[1] + (Camera.CurrentPosition.X & 7);\n                        var y = args[2] + ScreenTop;\n                        var actor = GetActorAt(x, y);\n                        if (actor != null)\n                        {\n", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "\n                    unlockAndClose(fd, iFile);\n                }\n            }\n            catch (final Exception ex)\n            {\n                ex.printStackTrace();\n                throw new ObjectStoreException(ex);\n            }\n        }\n    }\n    private final void pruneEntries", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(ByVal value1 As Object, ByVal value2 As Object, ByRef index As Integer, ByRef count As Integer) As Integer{0}\" +\n\t\t\t\t\"End Interface{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "                           m_From.SendLocalizedMessage(1060909); // Your new house has been built!\n                            m_From.SendGump(new HousePlacementCategoryGump(m_From, newHouse));\n                        }\n                    }\n               ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "           Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinQ\",\n                    Slot = SpellSlot.Q,\n                    Type = SkillShotType.Skillshot", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "\t\tplot = new Plot(imp, plotID++, imageType, autoUpdate);\n\t\tplot.setFrameSize(800, 600);\n\t\tplot.setLimits(0, 100, 0, 100);\n\t\t", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                       widgetName = widgetName.replace(\"$\", \"\")\n                        self._set_label( listitem, widgetName )\n                        self.widgetRename = False\n                        self.changeMade = True\n                        return\n                    else:\n                        self.widgetR", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "\n    public Code(MethodSymbol meth,\n                boolean fatcode,\n                CRTable crt,\n                SymTab syms,\n                Types types,\n                Pool pool) {\n        this.meth = meth;\n        this.fatcode = fatcode;\n       ", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\t\t\t\t\tint i = Menus [selected].Children.IndexOf (c);\n\t\t\t\t\tif (i != -1)\n\t\t\t\t\t\tSelected (Menus [selected].Children [i]);\n\t\t\t\t\telse\n\t\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "\n        return encodeBytesToBytes( source, 0, source.length, NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    }   // end class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "           if os.path.exists(src):\n                # backup the original file\n                backup_src = src + \".bak\"\n                try:\n                    shutil.copy2(src, backup_src)\n                except (shutil.Error, OSError):\n                    e", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "   def save(self, *args, **kwargs):\n        # If the student is enrolled in the course, and the course is not\n        # available, then the enrollment should be dropped.\n        if self.is_active and not CourseOverview.is_course_available", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "       try:\n            with open(filename, \"r\") as f:\n                shared_mem = int(f.readline().strip())\n        except IOError:\n            logging.error(\"Could not read shared memory info from %s.\", filename)\n            return None\n        return shared_", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "   if args.exclude_folders:\n        # ...\n    if args.exclude_account:\n        # ...\n    if args.exclude_metadata:\n        # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "\n        if (lastScanOffset > data.length)\n        {\n            // integer overflow\n            throw new RasterFormatException(\"Incorrect last scan offset: \"\n                    + lastScanOffset);\n        }\n    }\n}\n\nclass ShortComponentRaster_DataBuffer extends Data", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "   'types': ('general-music', 'post-event', 'event', 'articulation-event', 'script-event',),\n}\n\nPlease complete the code by filling in the missing values.", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "               if (chr.m_collide_enabled)\n                {\n                    // Get the OdeScene's collision data\n                    sCollisionData[] collideData = new sCollisionData[1];\n                    d.GetCollisionData(chr.m_localID", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "\t\t\t\t.Append (Text)\n\t\t\t\t.Append (\")\")\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n#endregion\n\t}\n}\n\nnamespace TagLib.Id3v2 {\n\tpublic class TXXX : UserTextInformation", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "       system_id = self.get_system_id(system)\n        if not system_id:\n            continue\n        self.client.system.deleteCustomValues(self.session, system_id, *keys)\n        # regenerate the cache of systems\n        self.generate", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "       help=\"The unit price of the product or service without taxes or discounts.\")\n    discount = fields.Float(string='Discount', required=False,\n        help=\"The discount applied to the unit price of the product or service.\")\n    quantity = fields.Float(string", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "               return -value;\n            }\n        };\n    }\n    public static UnaryExpression not(Expression operand) {\n        return new UnaryExpression(operand) {\n            @Override\n            public String getOperator() {\n                return NOT;\n            }\n            @Override", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "   if gather is True:\n        merged_blocks = self.get_data(variables, gather, clear)\n    else:\n        merged_blocks = self.get_data(variables, gather, clear, allgather=True)\n    if merged_blocks is None:", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "   for t in ts:\n        t.start()\n    # wait for the workers to finish\n    while finished_queue.empty() and suspend_resume_queue.empty():\n        pass\n    # update the status\n    task_status = task_read_status()\n   ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "                   \"   NEW: \" + nodeUpdate + \"\\n\" +\n                    \"   VERSION: \" + nodeUpdate.getVersion() + \"\\n\");\n        }\n        return true;\n    }\n    \n    private void invalidateNodeCaches(Node node, boolean invalid", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( YAxis yAxis in", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "```\n  private static float boundAxisWithinMinAndMax(CSSNode node, int axis, float value) {\n    float min = CSSConstants.UNDEFINED;\n    float max = CSSConstants.UNDEFINED;\n    if (axis == CSS_FLEX_DI", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall }\n                });\n            #endregion Lucian\n            #region Nami\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Nami\",\n                ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n            protected void layoutChildren() {\n                super.layoutChildren();\n                // do nothing\n            }\n            protected void paint(Graphics g) {\n                super.paint(g);\n                // do nothing\n            }\n        }", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "   if self.isRoot():\n        raise ParseError(\"Root recipe without a package\")\n    if self.isMultiPackage():\n        raise ParseError(\"Multi package recipe without a package\")\n    if self.isRecipe():\n        raise ParseError(\"Recipe without a package\")", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "\t\t\t\tswitch (c) {\n\t\t\t\tcase ' ':\n\t\t\t\tcase '\\t':\n\t\t\t\t\t//\n\t\t\t\t\t// Handle spaces and tabs\n\t\t\t\t\t//\n\t\t\t\t\tif (ref_line ==", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "           if (info < 0)\n                throw new ILArgumentException(\"qr: an error occurred during decomposition\");\n            return ret; \n        }\n        #endregion\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "   return self.network.get_search_results(q, type, page, per_page)\n```\nI'm trying to understand the code for the `pylast` library, specifically the `Track` class.\n\nHere is the code for the `Track` class:\n```\n", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "                       &nbsp;(<span class=\"warning\">missing: %(diff)s</span>)<br />\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n                        <br", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "           if (result != RESULT.OK)\n            {\n                return result;\n            }\n            if (sound == null)\n            {\n                soundnew = new Sound();\n                soundnew.setRaw(soundraw);\n                sound = soundnew;\n            }\n           ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "           SaveLayout(xmlWriter, pane.Items[0]);\n        }\n        void SaveLayout(XmlWriter xmlWriter, ContentControl content)\n        {\n            if (content is DocumentContent)\n            {\n                SaveLayout(xmlWriter, (DocumentContent)content);\n            }", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "\n    # Update the permanence values of the master cells\n    masterPotential = (\n        masterPotential + rfActiveInput * rfPermChanges)\n    masterPermanence = (\n        masterPermanence + rfActiveInput * rfPermChanges)\n   ", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "                           output.write(\"      <field name='%s' type='%s' info='%s'/>\\n\" % (field[1], field[0], desc))\n                        output.write(\"    </struct>\\n\")\n                    return\n                except:\n                   ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "       if vmap['name'] in ['-X', '-XX']:\n            complt += r\"{0}{1}={2}\\n\".format(optionPrefix, vmap['name'], vmap['value'])\n        elif vmap['name'] in ['-G', '-g']", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "   if self.disks:\n      for disk in self.disks:\n        disk_info = self.lu.GetDiskInfo(disk)\n        disk_name = disk_info.name\n        disk_size = disk_info.size\n        disk_type = disk_", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(7.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0] =", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "           }\n        }\n        public override void OnDeath()\n        {\n            base.OnDeath();\n            if (m_ControlMaster != null)\n            {\n                m_ControlMaster.Followers -= ControlSlots;\n            }\n            if (m_Sum", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       return contains;\n    }\n    public void setRippleEffect(boolean rippleEffect) {\n        this.rippleEffect = rippleEffect;\n    }\n    public boolean isRippleEffect() {\n        return rippleEffect;\n    }\n", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           if (bmp_mono[n1] > 128) hits1++;\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width) + x;\n", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setReverse         (bool reverse)\n        {\n            return FMOD_EventCategory_SetReverse(eventcategoryraw, (reverse ? 1 : 0));\n       ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "\t\t\t}\n\t\t\telse if (clas.equals(\"WARLORD\")) {\n\t\t\t\thitDie = 10;\n\t\t\t\tbaseAttackBonus = 1.25f;\n\t\t\t\tgoodFort = true;", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "\t\tList<ValueMetaInterface> fieldsInTable = new ArrayList<ValueMetaInterface>();\n\t\tfor (int i=0;i<fields.size();i++)\n\t\t{\n\t\t\tValueMetaInterface v=fields.getValueMeta(i);\n\t\t\tfieldsInTable", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "       :param `event`: a `wx.Event` event object.\n        \"\"\"\n        \n        self.DoIdleUpdate()\n        self.SetHoverItem(None)\n        self.SetPressedItem(None)\n        self.RefreshOverflowState()\n        self.StartPre", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeToObject\n}   // end class EncogUtil", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "           {\n                BigInteger result = new BigInteger();\n                result.data[0] = 1;\n                result.dataLength = 1;\n                return result;\n            }\n            else\n            {\n                BigInteger result = new BigInteger();\n                result.data[", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "\tprotected override int QuestId { get { return 519436; } }\n\tprotected override string LQuestDescription { get { return L(\"Walter from the general store and Austeyn from the bank haven't returned their [Borrowed Book from the Library]. Can", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "               if e.nodeName == 'layout':\n                    self.layoutNode = e\n                    break\n            if not self.layoutNode:\n                log.log(0,\"error\",_(\"Unable to find layout node in XLF file\"))\n                self.builtWithNoX", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "                  is_const=True, is_pure_virtual=True)\n    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Set(ns3::ObjectBase const * object, ns3::AttributeValue const & attribute) const [member function]\n    cls", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "\t\t\t\tcase Msg.WM_KEYUP:\n\t\t\t\t\tPreviewKeyUpEventArgs e = new PreviewKeyUpEventArgs ((Keys)msg.WParam.ToInt32 () | XplatUI.State.ModifierKeys);\n\t\t\t\t\tOnPre", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "                   Node.TemplateText t = (Node.TemplateText) body.get(0);\n                    if (t.getBody() == null) {\n                        // XXX - This optimization is only valid if the\n                        // template text has no body.  If it does, we need", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "       if cdata is None:\n            return\n        # Check if the tensor is broadcastable to the shape of the input\n        # If it is, then we can remove the Subtensor\n        if all(T.is_compatible_shape(cdata, shape) for shape in shape_of", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "           return package\n    else:\n        return package\ndef _load_module(name, package=None, level=0):\n    \"\"\"Load a module.\"\"\"\n    _sanity_check(name, package, level)\n    if level > 0:\n        name = _resolve", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "           search_reg_str = search_terms.replace(' ', r'[^\\w\\*]+')\n        search_list = search_terms.split()\n        found_set = self._index_dict.value_intersection(\n                self._words_from_partial(", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                var method = methodGroup.Method;\n                if (method.IsStatic)\n                {\n                    // UNDONE: Generate error for static method group conversion\n                    //          (e.g. \"void f(int", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "       if os.path.exists(md_file_path) is False:\n            return False, 'Pre-processed file {0} does not exist.'\n        # load\n        self.load_raw_data(md_file_path, exp_number, scan_number, output", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "     raise Exception(\"No headers phase found\")\n  def GetBuildSettings(self):\n    settings = {}\n    for key in self.GetBuildSettingKeys():\n      value = self.GetBuildSetting(key)\n      settings[key] = value\n    return settings\n  def GetBuild", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "                       // Handle the exponent\n                        if (exponent.length() > 0) {\n                            // If the exponent is not optional, it must be\n                            // followed by a digit.\n                            if (!isOptionalExponent(exponent)) {\n                                throw new Il", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "   response = requests.get(url, params=urllib.parse.urlencode(GET_data))\n    data = response.json()\n    return data\ndef get_neuron_by_id(id, remote_instance=None):\n    \"\"\"Retrieve a Catmaid", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "               if self.__IsToken( \"{\"):\n                    FvImageSectionObj = FvImageSection.FvImageSection()\n                    self.__GetDefineStatements(FvImageSectionObj)\n                    self.__GetBlockStatement(FvImageSectionObj)\n                   ", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": " #\n  python /opt/dirac/DIRAC/Core/scripts/dirac-httpd.py --config /opt/dirac/etc/dirac.conf\n  #\n  exec python /opt/dirac/DIRAC/Core/scripts/dirac-paster", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "```\n    if state in ('absent', 'registered'):\n        module.params['cluster'] = None\n        module.params['allow_partial_import'] = False\n        module.params['allow_partial_export'] = False\n        module.params['export_domain'] = None", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "       BeginBatchUndo(self)\n        Begin a batch undo operation.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\nNext line of code:\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "\n            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    // Load the native library.\n                    if (lib.is", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "               dx0 = -hr;  dy0 =  0f;    dx1 =  0f;  dy1 = -vr;\n                break;\n            case 2:\n                dx0 = -hr;  dy0 =  0f;    dx1 =  0f;", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        This function generates random number in range [0, 2^31-", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "       try {\n            m = ModeFactory.getMode(\"Channel_queries\", \"filter_subscriptions\");\n        } catch (LookupException e) {\n            log.error(\"Error looking up mode\", e);\n            throw new InternalError(\"Error looking up mode\");\n       ", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "                   while self.tok[0] not in (')', ','):\n                        params.append(self.Parse_expression())\n                        self.NextToken()\n                    self.NextToken()  # Close paren\n                    ret[name] = params\n                else:", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "           while (retryCount-- > 0) {\n                try {\n                    // perform the actual mounting of the data.\n                    mountDataInternal(dataFile, dataPrefix, values,\n                                        defaultData, fileEditable,\n                                        registerDataNames);\n", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                       diagnostics.Add(ErrorCode.WRN_ChecksumPragmaMismatch, guid, existingDoc.FilePath, checkSumText);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.WRN_ChecksumPragmaM", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "   def _addYumBasicOptions(self):\n        self.add_option_group(self.yum_basic_group)\n        self.yum_basic_group.conflict_handler = \"resolve\"\n        self.yum_basic_group.add_option(\"", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "\n    diskspec.device.backing.thinProvisioned = expected_disk_spec.get('type', 'false').lower() == 'true'\n                if disk_modified:\n                    self.change_log.append(diskspec)\n            else:\n", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\n        pMem.n = sqlite3Strlen30( z );\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        pMem.z = z;\n        pMem.n = z.Length;\n        p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicode_to_utf8(json_data)\n        try:\n            orcid = json_data['orcid']\n            pid = json_data['pid']\n", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               }\n            }\n            #endregion\n            #region Events\n            //------------------------------------------------------------------------------------------\n            // Events\n            public event EventHandler Collapsing;\n            public event EventHandler Collapsed;\n            public event EventHandler Expanding;\n            public event EventHandler Exp", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       tag_value = json_d.get('tag', '')\n        if not isinstance(tag_value, basestring):\n            tag_value = ''\n        return (comment_value, tag_value)\n    def _render_html(self, student_answers):\n", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "   out = busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None)\n    An array with the same shape as `dates`, containing the adjusted dates\n    after applying the offsets", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "       return {\n            'account_id': acc_src,\n            'journal_id': journal_id,\n            'account_dest_id': acc_dest,\n            'amount': move.qty * move.product_uom.price_get(cr, uid", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\nNext line of code:\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "   user.email_preferences.course_emails.setdefault(course_key, {})[receive_emails] = True\n    user.email_preferences.save()\n    return JsonResponse({\"success\": True})\n    # ...\n    # ...\n    #", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "\tthis.region = region;\n}\nvoid setState (int state) {\n\tthis.state = state;\n}\nvoid setText (String text) {\n\tcheckWidget ();\n\tif (text == null) error (SWT.ERROR_INVALID_ARGUMENT", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "           if paper.status == 'ar':\n                arxiv_data = WebInterfaceBibAuthorIDClaimPages._arxiv_box(req, login_info, person_id, paper.id)\n                if arxiv_data:\n                    content = WebInterfaceBibAuthorID", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "               dim_coord_subset = dim_coord_subset()\n            else:\n                dim_coord_subset = [slice(None)] * len(self)\n        else:\n            dim_coord_subset = [slice(None)] * len(self)\n        return", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "         if after == NULL_HASH:\n            after = None\n          self.hashes[filename] = (before, after)\n    return svndiff\n  def GetStatus(self, filename):\n    # If the file exists in the working directory, we can use git status to\n", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "                   tokenlist[ikey] = dictvalue\n    def ignore( self, other ):\n        if self.resultsName and other.resultsName:\n            return False\n        return super(Dict,self).ignore(other)\nclass ParseBaseException(Exception):\n    \"\"\"Base class", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "   if matched_zero:\n      return False\n    # Don't warn on function pointers with no arguments.\n    if Match(r'^\\s*(\\S+)\\s*;', remainder):\n      return False\n    # Don't warn on function pointers with a single argument.\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "       if arrayObjectMemberTypes:\n            arrayObject = CGList(CGGeneric(\n                \"    Ok(Some(%s::e%s(value))) => return Ok(value),\\n\"\n                % (self.type, name)\n                for name, memberType in zip(names", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "\n        public static readonly char[][] A_1 = new char[][] {\n            new char[] {'\\x0001', '\\x0001'},\n            new char[] {'\\x0002', '\\x0002'},\n            new char[] {'\\", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "       for (int i = 0; i < ifds.length; i++) {\n            if (ifds[i] & ifdFlags) {\n                return new Integer[] { i };\n            }\n        }\n        return null;\n    }\n    protected static int getFlags", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "           corrr1dcircular(signal, m, b, n, ref c);\n        }\n    }\n}\n\nPlease complete the code.\n\nNote: The input parameters n, m, and pattern are real numbers, while the output parameter c is a complex number.", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "               logical.append(text)\n                if end:\n                    logical.append(end)\n            previous = (token_type, text)\n        return \"\".join(logical)\n    def __getIndent(self, line):\n        \"\"\"\n        Private method to get the", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "     return JavaCore.createPackageFragment(fileName, pkgEnd);\n    }\n  }\n  public static char[] getPackageName(char[][] packageName) {\n    return packageName[0];\n  }\n  public static char[] getPackageName(IPackageFragment packageFragment", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            # We have to check if the url is already in the list of documents\n            # If it is, we have to update the version number\n            # otherwise, we have to add it to the list\n           ", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "               if lhs in raw:\n                    raw[lhs] = rhs\n                else:\n                    raw[lhs] = None\n                if adding:\n                    line = line[:assstart] + rhs\n                else:\n                    line = line[assend:] + rhs", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "           aggregator.aggregate(rolling_window_data)\n        else:\n            aggregator.aggregate(self.data)\n        return new_cube\n    def _as_list_of_cubes(self):\n        \"\"\"\n        Returns a list of cubes,", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "drawImage(bImg, op, x, y, null, null);\n}\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y,\n                          ImageObserver observer)  {\nNext line of", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"GallerySetting.RetrieveGallerySettingsFromDataStore cannot parse the media", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "           for k in self.splitKeySet:\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            for k in selfHasButTree2DoesNot:\n                theSum += self.splitKey", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line.strip())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "               return new SynthesizedIntrinsicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n            }\n        }\n        private static void GetSymbolsAndResultKind(BoundMethodBase method, out bool isDynamic, ref LookupResultKind resultKind, ref Im", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "\n                marginLeft = a.getDimension(LEFT_MARGIN, UNDEFINED);\n                marginTop = a.getDimension(TOP_MARGIN, UNDEFINED);\n                marginRight = a.getDimension(RIGHT_MARG", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       return _uuid;\n    }\n    private void checkNotClosed()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())\n            SibTr.entry(tc, \"checkNotClosed\");\n        if (_closed)\n", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "           if (extensions.IndexOf(\"GL_OES_texture_float\") != -1)\n            {\n                supportsSwizzle = true;\n            }\n            else if (extensions.IndexOf(\"GL_EXT_texture_float\") != -1)\n            {\n", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "                   return fn(*arg, **kw)\n        return fn(*arg, **kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int position = document.get(j).getPosition();\n        labels[dataIndex][j] = position - windowSize + 1;\n        data[dataIndex][j] = new int[windowSize", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "FLOAT10 f10;\n        }\n        internal byte Data_0;\n        internal byte Data_1;\n        internal byte Data_2;\n        internal byte Data_3;\n        internal byte Data_4;\n        internal byte Data_5;\n        internal byte", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "   self._initialized = True\n    def record(self):\n        # type: () -> bytes\n        \"\"\"\n        Generate the string representing this UDF Logical Volume Implementation Use.\n        Parameters:\n         None.\n        Returns:\n         A string representing this UDF Log", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "           default:\n                throw error(\"Unrecognized inline modifier\");\n            }\n            ch = peek();\n            if (ch == ')')\n                break;\n        }\n    }\n    private void unread() {\n        if (cursor > 0)\n            read();", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "       self.parse(scanner, locals)\n    def execute(self, statement, locals=None):\n        \"\"\"Execute a statement.\"\"\"\n        self.invoke('beforeExecute', statement=statement, locals=locals)\n        result = statement()\n        self.invoke('", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "   result = self._concat_objects(keys, values, not_indexed_same=not_indexed_same)\n    ^\n\n    raise AbstractMethodError(self)\n\n    def _concat_objects(self, keys, values, not_indexed_same=False):", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "       g = np.zeros((K-1, 1))\n        H = np.zeros((K-1, K-1))\n        for i in range(1, K):\n            g[i-1] = N_k[i] - N_k[i", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "\nif( b >= 0 ) {\ndest[ off + i ] = (byte)b;\n} else {\nbreak; // out of for loop\n}\n}   // end for: each byte to read\n\nreturn i; // number of bytes read\n}   // end read\n", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "   if auth_code == 1:\n        raise InvenioWebSubmitFileError, auth_message\n    else:\n        return auth_code, auth_message\ndef get_recid(doc):\n    return doc.get_recid()\ndef get_doc_version(", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "   def test_statNotExistingFile(self):\n        \"\"\"\n        Try to stat a file that doesn't exist.\n        \"\"\"\n        d = self.shell.stat(('ned',))\n        return self.assertFailure(d, ftp.FileNotFoundError)\n\n", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "               tbl_ix = (data[base] & 255);\n            if (tbl_ix < 0 || tbl_ix >= dc_ix.length)\n                throw new IOException(\"Invalid Huffman Table Index\");\n            base++;\n        } while (base < result);", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "\t\t\t\t\t\t\t\tnotice = String.Format( \"{0} : {1} accounts found.\", match, results.Count );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AccountSearchGump( from, results,", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "       final VirtualMachine vm = _vmDao.findByUuid(vmUuid);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final List", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = (Sound)Marshal.GetObjectForIUnknown(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound = null;\n            }\n            return result;", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "           RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".PartnerKey\");\n            RequiredColumns.Add(PPersonTable.GetTableName() + \".FamilyPartnerKey\");\n            // Apply security\n            PPerson", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "               #region Partner Interests\n                if (AInspectDS.Tables.Contains(PPartnerInterestTable.GetTableName()))\n                {\n                    foreach (PPartnerInterestRow row in AInspectDS.PPartnerInterest)\n                    {\n                ", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "           return new ToolkitEventMulticaster(a, b);\n        }\n        static void remove(AWTEventListener a,\n                            AWTEventListener b) {\n            if (a == null)  return;\nNext line of code:\n            super.remove(a, b);", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\t\tif (gfp.internal_flags.low_pass_band != -1) {\n\t\t\tret = lame_free_low_pass_band(gfp);\n\t\t}\n\t\tbs.free_bitstream(gfp);\n\t\treturn ret;", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "                   // add the see kills checkbox\n                    this.AddLabel(x1 + 30, 165, 55, a.Text(200233));  // \"See kills\"\n                    this.AddButton(x1, 1", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "\n    def makefile(self):\n        \"\"\" Generate a basic Makefile for the test \"\"\"\n        global skeleton\n        global test\n        global options\n        global program\n        global __doc__\n        global __version__\n        global __license__\n        global __author__\n", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
