{"pred": "\t\t\traspodelaTableModel.addPrimerak(primerak);\n\t\t\traspodelaTable.updateUI();\n\t\t\tJOptionPane.showMessageDialog(this,\"Prerak dodan uspe≈°no!\");\n\t\t} catch (Raspodela", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "                SubCriteria.Add(\"GroupID\", new SearchCondition<String>(GroupID));\n                  }\n                  return GroupID;\n            }\n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"StudyInstanceUID\")]\n        public I", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t\t\trect.set(top_left.x, top_left.y, top_right.x, top_right.y);\n\t\t\trect.set(bottom_left.x, bottom_left.y, bottom_right.x, bottom_right.y);\n", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "       sendBean(\"B\", 1, 1L);\n        assertFalse(listener.isInvoked());\n        sendBean(\"A\", null, null);\n        assertFalse(listener.isInvoked());\n        sendBean(\"B\", null, null);\n        assertFalse(listener.", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "       Set<String> mustSupportedStatusSet = new HashSet<String>(\n            operationSet.getMustSupportedStatusSet());\n        mustSupportedStatusSet.removeAll(supportedStatusNames);\n        //if the MUST set is empty, then the implementation is buggy.\n", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "\t\taliases.Add (\"iso8859-1\", \"windows-1252\");\n\t\taliases.Add (\"iso8859-1\", \"iso8859_1\");\n\t\taliases.Add (\"iso8859_1\",", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "           self.__repeat = (delay, interval)\n        elif delay is None and self.__repeat[1] is not None:\n            self.__repeat = (None, self.__repeat[1])\n        else:\n            self.__repeat = (delay, interval)\n        return self\n    def", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "   if self.param_type == INTERFACE_FULL_NAME:\n        self.init_interface_data(self.interface)\n        self.get_interface_info()\n        if is_ethernet_type(self.interface):\n            self.get_port", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "   if class_name == source:\n        return class_contents\n    return None\n# Test code to exercise the above functions:\nsource = \"d-10\"\nprint(parse_regex(source))\n# Output:\n#     ['d', '1', '0']\nsource", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "       reload();\n    }\n}\n\nPlease complete the code by adding the `reload()` method.", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "               tree.setSelection(item);\n                break;\n            }\n        }\n    }\n    private void saveSettings() {\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the settings\n        // ...\n        // Save the", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "\t\t\tthis.Size = new System.Drawing.Size(300, 200);\n\t\t\tthis.ResumeLayout(false);\n\t\t}\n\t\t#endregion\n\t\tprivate System.Windows.Forms.CheckBox _visibleCheckBox;\n\t\tprivate", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "                           await CheckPoll();\n                        }\n                    });\n                }\n            }\n            poll.AddOptions(options);\n            return await CheckPoll();\n        }\n        private async Task CheckPoll()\n        {\n            if (poll.IsClosed)", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "       if self.getState() != 'running':\n            self.log.error('Wavemeter not running')\n            return -1\n        # stop the measurement\n        self._wavemeter.handle.stop()\n        # kill the thread\n        self._wavemeter", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "   env = os.environ.copy()\n    env[\"WPT_RUNNER\"] = \"local\"\n    env[\"WPT_RUNNER_ARGS\"] = json.dumps(kwargs)\n    env[\"WPT_RUNNER_LOG\"] = logger\n    env", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\t\tif (strings[0] == \"Setting\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar setting = Game.Mods.GetMod<SettingMod>();\n\t\t\t\t\t\t\t\tsetting.SetValue(strings", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "   for (int i = 0; i < s.length(); i++) {\n      if (!Character.isDigit(s.charAt(i))) return false; // $NON-NLS-1$\n    }\n    return true; // $NON-NLS-", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "\t\t\t\tif (assembly == null && throwOnMissing) {\n\t\t\t\t\tthrow new Exception (\"Assembly not found: \" + name);\n\t\t\t\t}\n\t\t\t\treturn assembly;\n\t\t\t}\n\t\t\t\n\t\t\tpublic override string", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "\t\t\tthis.label1.Location = new System.Drawing.Point(6, 6);\n\t\t\tthis.label1.Name = \"label1\";\n\t\t\tthis.label1.Size = new System.Drawing.Size(64, 17);\n\t", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "       ]\n        for name in names:\n            assert parse_name(name[0]) == name[1]\n    def test_parse_name_empty(self):\n        assert parse_name(\"\") == \"\"\n    def test_parse_name_special_chars(self):", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "   observations_dict = {o['code']: translations_dict[o['code']] for o in observations}\n    \n    # join together observations with translations\n    behavior_dict = {o['code']: observations_dict[o['code']] for o in observations}\n", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "\t\t\t\t\t( m.Account as Server.Account.Account ).Username );\n\t\t\t}\n\t\t\tcatch ( Exception e ) { }\n\t\t}\n\t}\n}", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                           sead_partnn_l = findPath(nodemap, c_sead, maxs, patth_ll, negated_utilized_sead_l, utilized_sead_l, blo                                                                                                                                                                                                                                                ", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\t\t\t\tSystem.arraycopy(src, srcOffset, buf, 0, byteCount);\n\t\t\t\t// reassembled packet\n\t\t\t\tPacket packet = new Packet(buf);\n\t\t\t\t// packet received\n\t\t\t\tPacket received", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "       return logging.makeLogRecord(name, level, format, args, **kwargs)\n    # end of makeRecord\n    def format(self, record):\n        # python 2.7 doesn't support record.extra\n        # so we have to check for it here\n        if", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "   self.write_page_footer()\n\\end{code}\n\nThis code is a subclass of the `WebPage` class from the `gram.webenv` module, and it is intended to generate a page that displays various statistics about the genealogy database.\n\nThe code defines", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "           if m.lat > max_relalt_mm:\n                ex = \"Takeoff detected, disarming vehicle\"\n                self.mav.send(type='SET_ mode', value='Disarmed')\n                self.mav.send(type='ARM_DISABLE", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "           key_func = itemgetter(*sort)\n            sort_order = sort_order if sort_order else ModuleStoreEnum.SortOrder.ascending\n        all_assets = SortedListWithKey(course_assets.setdefault(asset_type, []))\n        if start >", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "   ini:\n        - {name: ANSIBLE_SSH_USE_TTY, type: bool, default: 'yes'}\n        - {name: ANSIBLE_SSH_PIPE_BUFFER, type: int, default: 8192}", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "       if (persist)\n        {\n            // Save input to memento\n            // ...\n        }\n        // Execute OPI runtime\n        opiRuntimeDelegate.execute();\n    }\n    protected void execute()\n    {\n        if (opiRuntimeDelegate != null)", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "           if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n                // handle context menu\n            }\n        }\n    }\n}\n\nPlease help me complete the code by adding the missing lines of code in the `", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "                               m.Mana += 20;\n                                m.ManaMax += 20;\n                                m.SendLocalizedMessage(1042001); // You have increased your spellweaving skill.\n                            }\n                            else\n                            {", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "   bind_layers(ethernet, TCP)\n\nExplanation:\n\nThe code is defining a class `ENIPSendUnitData` and `ENIPSendRRData` that inherits from `BaseSendPacket` and `BaseSendPacket` respectively. These classes are used", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "               index = -1;\n            }\n            public void Dispose()\n            {\n                list.IsDirty = true;\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count - 1)\n                {\n                    index++;\n", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "   return scmutil.Repository(ui, path, parentpath)\n\ndef main():\n    ui = util.ui()\n    path = ui.config('phases', 'path', '')\n    create = ui.config('phases', 'create', False)\n    if create:", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "                   if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y - 1, 127), m.Map, 16);\n                    if (house == null)\n                        house", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "\t\tWardList wardList = new WardList();\n\t\twardList.Rs = new Rs();\n\t\twardList.Rs.Count = DataCollection.count();\n\t\twardList.Rs.Message = encodeNASMessageWithRepeatingGroups(Data", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "           for field, val in hash_.items():\n                if field in fields:\n                    fields[field] = val\n                else:\n                    fields[field] = None\n                extra_attrs[field] = val\n            model_obj = queryset.get(**fields)", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "           return page_not_authorized(req, 'runbibedit')\n        recid = argd['recid']\n        body, errors = perform_edit(req, ln, recid)\n        if errors:\n            return render_json_error(req, body, errors", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "           }\n        }\n    }\n}\n\nprivate void SetImage(string imageName)\n{\n    // ...\n}\n\nprivate void SetKeyImage(string imageName, int keyCode)\n{\n    // ...\n}\n\nprivate void OnKeyDown(object sender,", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "\t\t// Creating a new MetocElement\n\t\tMetocElementType metocElement = new MetocElementType();\n\t\tmetocElement.setName(coverageName);\n\t\tmetocElement.setDescription(coverageDescription);\n\t\tmetocElement.setFormat(", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "           record_add_field(rec, '500', subfields=[('p', page_count)])\n        if publisher:\n            record_add_field(rec, '264', subfields=[('p', publisher)])\n        if collection:\n            record", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "               assertEquals(A.getQuick(r, c), B.getQuick(r, NCOLUMNS - c - 1));\n            }\n        }\n    }\n    protected void setUp() {\n        super.setUp();\n        DLENGTH = 3;", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "           arena.spawn((Creature) e);\n        }\n        return e;\n    }\n}\n\nPlease complete the code by filling in the missing variables and methods.", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "\t\t\t\t\t\tConsole.WriteLine(\"  {0}\", displaySet.Name);\n\t\t\t\t}\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tDispose(displaySets);\n\t\t\t", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "           tableStrength.add(new PlayerScore(opponent.getKey(),\n                    calculateTableStrength(opponent.getValue())));\n        }\n        tableStrength.add(tableStrength.size() - 1,\n                new PlayerScore(player.getId", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "\t\t\tushort* line = (ushort*)bd.Scan0;\n\t\t\tint delta = bd.Stride >> 1;\n\t\t\tfor( int y = 0; y < height; y++, line += delta )\n\t\t\t{\n\t\t\t", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "   reader = supported_extensions()[os.path.splitext(fname)[1]]\n    return reader(fname)\n    # raise ValueError(\"Unsupported file type\")\n    # return None\n    # raise IOError(\"File not found\")\n    # return None", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "   out_list += [weights_dmat_all[index]]\n    out_comment += ['Weighted distortion matrix']\n    out_units += ['']\n    out_names += ['']\n    out_list += [r_dmat_all[index]]\n", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "\t\tfor(int i=0; i<length; i++){\n\t\t\tif(i>=tempCostList.Length) towerList[index].baseStat.costs[i]=0;\n\t\t\telse towerList[index].baseStat.costs[i]=tempCost", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphCell.getNode(cell);\n\t\t\t\t\t\tif(cgn == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcgn = new GraphNode(graphCell, cell);\n\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "   if obj.startswith(b'\\ufeff'):\n        obj = obj[2:]\n    return list(loads(obj, mapping=mapping, implementation=implementation, strict=strict))\ndef parse_line(line):\n    \"\"\"\n    Parse a single line of RIS data.", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "\t\tif (orig != null) {\n\t\t\tcopyFileToCover(orig, newId);\n\t\t}\n\t}\n\t\n\tprivate void copyFileToCover(File orig, long newId) throws IOException {\n\t\t// Nothing to copy?\n\t\t", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "   try:\n        module = AnsibleModule(argument_spec=fields, supports_check_mode=True)\n        if module.check_mode:\n            return forwards_wire_cmd(module)\n        else:\n            return wireless_config(module)\n    except Exception as", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "           res = c.get(\"/\")\n            assert res.status_code == 401\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "           {\n                nsClientService = mLocalBinder.getService();\n                aapsLogger.setLogLevel(LogLevel.VERBOSE);\n                aapsLogger.setLogTag(LTag.NSCLIENT);\n                aapsLogger.setLogOutput(new File(get", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "       return kind != null ? kind : EOF;\n    }\n}\n\nPlease let me know if you need any further assistance.", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "   #    fix_makefile64(makefile)\n\nI have a problem with the line `fix_makefile64(makefile)`. The makefile is generated by the `run_configure` function and it has some issues with the `CFLAGS` variable. The `fix_", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "\t\t\t\tAddRes( index, 1044036, 15, 1044037 );\n\t\t\t\tAddRes( index, 1044036, 18, 1044037 );\n", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "\n    def test_prop2po_file(self, capsys):\n        \"\"\"tests running prop2po on a file\"\"\"\n        inputfile = \"test.properties\"\n        outputfile = \"test_output.po\"\n        super().test_prop2po_file(input", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "HueInfo = new Dictionary<DyeType, Tuple<int, int>>();\n            }\n        public static void AddHue(DyeType type, int hue)\n        {\n            if (HueInfo.ContainsKey(type))\n            {\n                HueInfo", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "\t\t\tsw.WriteLine (\"\\t\\tpublic event GLib.SignalHandler<\" + Name + \"> SignalHandler;\");\n\t\t\t\nEnd of code:\n\t\t\tsw.WriteLine (\"\\t\\tpublic event GLib.SignalHandler<\" + Name", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "   this.node.setLeaf(leaf);\n  }\n  public void setLoaded(boolean loaded) {\n    this.loaded = loaded;\n  }\n  public void setPresentation(String presentation) {\n    this.presentation = presentation;\n  }\n  public void set", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "           return GroupChildren(prevChildren, query.AsParameters(), child => child.Children.Count > 0);\n        }\n        private static ContentItem[] GroupChildren(ContentItem[] children, Parameter[] parameters, Func<ContentItem, bool> filter)\n        {\n            var groupedChildren", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "       return \"ImageIcon(\" + filename + \", \" + imageObserver + \")\";\n    }\n    private static final long serialVersionUID = 1L;\n    private String filename;\n    private Image image;\n    private ImageObserver imageObserver;\n    private int width;\n    private int", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "       soaResponse = self.tls_sock.send(soa.to_wire())\n        responses.append(soaResponse)\n        for i in range(1, 20):\n            content = b''.join([b' '.join(rr.to_wire())", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "           return this.FindControlRecursive(PercentageControlID) as Label;\n        }\n        public Control GetLabelForTitleControl()\n        {\n            return this.FindControlRecursive(TitleControlID) as Label;\n        }\n        public Control GetLabelForPercentageControl()", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "           query_str = urllib.urlencode(query_args)\n            path += '?' + query_str\n        else:\n            path += '/'\n        if method == 'GET_BUCKET_ACL':\n            path += 'acl'\n        elif method == '", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "\t\t\t\treturn getOriginalObject() != null;\n\t\t\tcase ActivitydiagramPackage.TRACED_ACTIVITY__TRACED_ACTIVITY__ORIGINAL_OBJECT:\n\t\t\t\treturn isSetOriginalObject();\n\t\t\tcase Activitydi", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "\t\t\t\tcanvas.drawBitmap(tiles[i], left, top, right, bottom, null);\n\t\t\t}\n\t\t}\n\t}\n\tprivate void drawPath(Canvas canvas, double localScale, LatLonPos lb, LatLonPos rb, float", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "               this.gwtCertificatesService.uninstall(selected.getKeystoreId());\n            }\n            this.certificatesGrid.setVisible(false);\n        });\n        this.apply.setText(MSGS.apply());\n        this.apply.addClickHandler(", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    CodeTypeParameter typeParamS = new CodeTypeParameter (typeParamS.Name, typeParamS.Constraints);\" +\n\t\t\t\t\"    method.TypeParameters.Add (typeParamS);\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "       of log(pre_sigmoid_nv)\n        Therefore we need to pass pre_sigmoid_nv as input\n        to the reconstruction cost function.\n        \"\"\"\n        # end of explanation\n        # start of code\n        cost = T.mean(T.", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "           if os.access(self.file + os.extsep + ext, os.F_OK):\n                list.append(self.file + os.extsep + ext)\n        return list\n    \n    def file_synchronizer(self, *args, **kwargs):\n", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "           all_plugins = self._bot.plugin_manager.get_all_plugin_names()\n        plugin_list = []\n        for plugin_name in all_plugins:\n            plugin_obj = self._bot.plugin_manager.get_plugin_obj_by_name(plugin", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "   try:\n        # login\n        fos = connect(data=data, username=username, password=password, host=host)\n        if not fos:\n            raise FossError(fos.error_message)\n        # system\n        system = fos.system\n        # system", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "           checksum,name = checksums.get(block=False)\n            assert name == \"file001\" or name == \"file002\" or name == \"file003\"\n            assert checksum == \"abcdefg\" or checksum == \"hijkl", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "           throw new IOException(\"Stream has not been marked\");\n        }\n        fileDecoder = savedDecoder;\n        savedDecoder = null;\n    }\n    private static Object clone(Object decoder) {\n        try {\n            return decoder.getClass().getMethod(\"clone", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "\t\tList<Event> events = new LinkedList<Event>();\n\t\tnew UpdateOperation(db, imported).doPersist();\n\t\treturn events;\n\t}\n\tpublic void doPersist() {\n\t\tOnmsNode imported = getNode();\n\t\tOnmsNode", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "   if state == 'present':\n        changed = publication.__set_state(state)\n    elif state == 'absent':\n        changed = publication.__drop_state()\n    else:\n        module.fail_json(msg=\"Invalid state\")\n    if changed:\n       ", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t\t\tint version = reader.ReadInt();\n\t\t}\n\t}\n}\n\nPlease help me complete the code. I'm not sure what to do after the \"Next line of code:\" statement.\n\nThank you in advance!", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "     elements.add(new ASN1Element(TYPE_INCLUDE_AUTHN_ENTRY,\n                                    ASN1Boolean.FALSE));\n    }\n    if (! includeAuthZEntry)\n    {\nNext line of code:\n      elements.add(new", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "           var c = new TripChain(Person);\n            c.Trips = new List<ITrip>(Trips);\n            return c;\n        }\n        #endregion ITripChain Members\n    }\n}\n\n", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "                   throw new TargetException(\"Failed to create PerformanceCounter\", ex);\n                }\n            }\n        }\n    }\n}\n\nPlease help me complete the code by filling in the missing parts.", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "       // super(edge);\n        // super(edge.getOwner());\n        // super(edge.getTarget());\n        // super(edge.getTarget().getOwner());\n        // super(edge.getTarget().getOwner().getDiagram());\n        // super(edge.get", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "           ContactFinder contactFinder = new ContactFinder();\n            contactFinder.CrmService = service;\n            contactFinder.CallNumber = CallNumber;\n            contactFinder.CreateIfNotExist = true;\n            contactFinder.ShowDialog();\n        }\n", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "   class Stack(type):\n        def __init__(self, *args, **kwargs):\n            super().__init__()\n            self.stack = []\n            self.stack_count = 0\n            self.labels = {}\n            self.labels_count = 0\n           ", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\t\t\tint endIndex = value.indexOf(\"}\", startIndex);\n\t\t\tif (endIndex == -1) {\n\t\t\t\tendIndex = value.length();\n\t\t\t}\n\t\t\tString macroName = value.substring(startIndex + 2, end", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "\t\t\tresult.append((cur.magic, cur.crc, cur.checksum, cur.data))\n\t\t\tlen -= mem_len\n\t\t\tofs += mem_len\n\t\t\tcontinue\n\t\treturn result\n\tdef get_section_info(", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "     if ( proxyCell.getUserObject() instanceof ProxyInfo )\n      {\n         ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();\n         int unit = proxy_info.getUnit();\n         if ( unit >= 0 )\n         {\n           ", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "           var serializer = GetResponseSerializer(contentType);\n            serializer(requestContext, response, httpResponse);\n        }\n        private ResponseSerializer GetResponseSerializer(string contentType)\n        {\n            return this.ContentTypeSerializers[contentType];\n        }\n        private Response", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "       nextToken = text.indexOf('}');\n        }\n    }\n}\n\nPlease complete the code by parsing the text and setting the appropriate fields.", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "\t\t\treturn new EmptyIterator();\n\t\t}\n\t}\n}\n\nPlease help me complete the code.\n\nAnswer:\n\nHere is the completed code:\n\npackage com.example.sweetblue.utils;\n\nimport android.content.Context;\nimport android", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "               if (constraintEntry.startsWith(\"keySize\")) {\n                    Matcher matcher = keySizePattern.matcher(constraintEntry);\n                    if (matcher.find()) {\n                        String keySize = matcher.group(1);\n                        Set<Constraint> constraint", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "\t\t\t\tShipOrder(order);\n\t\t\t}\n\t\t\torder.OrderStatusId = (int)OrderStatus.Complete;\n\t\t\t_order = order;\n\t\t\t_shoppingCart = null;\n\t\t\t_payment = null;\n", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "               object value = this.ViewState[\"SubmitText\"] as bool;\n                return value;\n            }\n            set\n            {\nNext line of code:\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        public virtual void OnItemSelect(object", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "       Dlasd(n, &i16, &i19, &i18, &i15, &i17, &i13, &i14, &i11, &i10, &i9, &i8, &i7,", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "       SecurityManager sm = System.getSecurityManager();\n        if (sm != null)\n            sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n    }\n    private static void checkForDuplicateParent(Configuration cf) {\n        Set<", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "       return self._conf_helper(dev_obj, options)\n    def _fetch_helper(self, ch=None):\n        if ch == None:\n            ch = self.enabled_list.getcache()\n        return ch\n    def _fetch_getformat(self, ch", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "   self.collection[artist][album].sort(key=lambda x: x.final.track)\n\nI want to write a function that takes the track number as an argument and returns a list of all the tracks in the album with that track number.\n\nCan someone please help me with this", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "       AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "\t\t\t\t\t// create plot\n\t\t\t\t\tPlot p = new Plot(name, tempValues, tempDomains,\n\t\t\t\t\t\t\tpc.getStyle(), pc.getTitle());\n\t\t\t\t\t// add to list\n\t\t\t\t\tplots", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "\t\tfor name in names['names']:\n\t\t\tprint(name)\n\t\t\tfrappe.print_dict(frappe.get_all(\"Item\", filters={\"name\": name}, fields=[\"name\", \"description\"]))\n\t\t\tprint(\"---\")\n\t", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\t\t\tvar source = Read<int> ();\n\t\t\tAssert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\tpublic void SingleOrDefault_SourceWithOneElement_ReturnsThatElement ()\n\t", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "\t\t\tif (type == PacketTypes.PlayerInfo)\n\t\t\t{\n\t\t\t\tPlayerInfo ply = (PlayerInfo)e.Data;\n\t\t\t\t// Update the player's position and rotation.\n\t\t\t\tTShock.Players[", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "   if (!success) {\n      throw new RunnerException(\n        _(\"Couldn't upload program to board.\"));\n    }\n    return suggestedClassName;\n  }\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "           sleep(0.1)\n\nPlease complete the code by filling in the missing variables and functions, and running the code to see if it works as expected.\n\nNote: The code is written in Python and uses the MPU6050 library to communicate with the MPU6050", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "           cq = self.fillet(0.1)\n            self.saveAs(\"unit_cube_filleted.FCStd\")\n        \"\"\"\n        solid = self.find_solid()\n        if not solid:\n            raise ValueError(\"No solid found to fillet", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "                                   + \"10^\" + i);\n                                } else {\n                                    //not \"log10\"-type label\n                                    if (this.expTickLabelsFlag) {\n                                        //if flag then\n                                        tickLabel = (", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "        sb.append((char) ('A' + d - 10));\n      }\n      d = (c >> 6) & 0xf;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "\t\t\t\tdata[i][ProjektReport_REPORT_FLR_HISTORY_ID] = itHistory\n\t\t\t\t\t\t.next()\n\t\t\t\t\t\t.get(ProjektFac\n\t\t\t\t\t\t\t\t.getFlr", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "\n            }\n            else\n            {\n                this.m_SetEquipped = true;\n            }\n        }\n\n        public override void OnDoubleClick(Mobile from)\n        {\n            if (this.IsSetItem)\n            {\n                from.SendLocalizedMessage", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "                               grapple.DockUid = part.Uid;\n                            }\n                            else\n                            {\n                                other.AttachedPart = part;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "       if (organizationId == null) {\n            throw new ApiException(\"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportationAgency(Async)\");\n        }\n        \n        // create call metadata\n        CallMetadata callMetadata = new CallMetadata();\n", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "           parent,\n            BlockLocation(parent.location, category_queue[0]),\n            category_queue[0],\n            DisplayInfo(category_queue[0], 'problem', 'problem', 'problem')\n        )\n        category_queue.popleft()\n        self.create_", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "       gausslegendre(N,x,w)\n        * -4    an  error  was  detected  when  calculating  weights/nodes.\n        * -3    internal eigenproblem solver hasn't converged\n        * -2    Beta[i] <= 0", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new ImageHelper(102100, \"Images/Core/Forms/Alert.png\", -1,", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "               .collect(Collectors.toList());\n        assertEquals(1, newBundlePushedAssets.size());\n    }\n    private void createPushAsset(\n            final long modDate,\n            final String structureInode,\n            final String assetType,\n            final Environment environment", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "           assertTrue(\"createNumber(String) failed\", obj instanceof BigDecimal);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n}\n//-----------------------------------------------------------------------\n```\nThis test class tests the `NumberUtils`", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "       // Create a new shared link\n        MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n        form.add(\"name\", \"My Shared Link\");\n        form.add(\"description\", \"This is a shared link created with the 'include' parameter\");\n        form.", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "\t\t\t\tif (_abi_info == null) {\n\t\t\t\t\t_abi_info = new GLib.AbiStruct (typeof (Message));\n\t\t\t\t}\n\t\t\t\treturn _abi_info;\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "           if replace:\n                cr.execute('update ir_values set value=%s where model=%s and key=%s and name=%s', (value, model, key, name))\n            else:\n                cr.execute('insert into ir_values (model, key, name, value)", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "\t\t\tlong size = lgetxattr (path, name, value, 0);\n\t\t\tif (size <= 0)\n\t\t\t\treturn size;\n\t\t\tvalue = new byte [size];\n\t\t\treturn lgetxattr (path, name,", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "           return actionTL.getVolatile() == SYNCHRONIZE_CODE;\n        }\n        @Uninterruptible(reason = \"Called from uninterruptible code.\", mayBeInlined = true)\n        public static void setActionPending(int action) {", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "\n        return encodeBytes( source, off, len, options );\n    }\n}\n\nPlease complete the code given above.", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "           key = unique_check[0]\n        else:\n            key = NON_FIELD_ERROR\n        return ValidationError(\n            message=opts.error_messages['unique_field'],\n            code='unique_field',\n            params=params\n        )\n    def", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "\t\t\t\tnew ColumnInfo (\"IsFixedLength\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsIdentity\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsNullable\", typeof(bool)),\n\t\t\t\tnew ColumnInfo (\"IsPrimaryKey\", typeof(", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "\t\t\t\tu3 = q[0];\n\t\t\t\tv3 = q[1];\n\t\t\t\tif (v3.sign < 0)\n\t\t\t\t\tbreak;\n\t\t\t\tu1 = u1.Add(v1);\n\t", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "       try:\n            # Parse cell attributes\n            cell_attributes = eval(cas_data_str)\n            # Shift cell attributes to the correct position\n            for row, (row_start, row_end), (col, col_end) in \\\n                    zip(range(", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "\n            }\n        }\n        return theFile;\n    }\n    // End of method getNewFile\n\n    // Method getNewFile\n    protected void actionPerformed(ActionEvent e) {\n        // Line 100:\n        // Line 101:\n", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "           string[][] ss11 = new string[][] { s111, s112 };\n            string[] s121 = new string[] { \"hello\" };\n            string[][] ss12 = new string[][] { s121 };\n            CallbackPr", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "               5: SortableHeader('Outline', False, '', 'col-center'),\n                6: SortableHeader('Script', False, '', 'col-center'),\n                7: SortableHeader('Outline', False, '', 'col-center'),\n                8: SortableHeader('Script", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "data.Power[i] = packet.ReadInt32(\"Power\", indexes, i);\n}\n\n            }\n        }\n\n        public override void Read(Packet packet, ClientPlayer client)\n        {\n            base.Read(packet, client);\n            var data =", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "   paramout.write(\"%-3s %10.3f\\n\" % (key, value))\n\n    #~ print \"key\", key, \"value\", value\n    #~ print \"mintotalerror\", mintotalerror\n    #~ print \"ncycle\", ncycle", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "       int availableHeight = Display.getInstance().getDisplayHeight() - menuHeight - title.getPreferredH();\n        int availableWidth = Display.getInstance().getDisplayWidth();\n        int x = 0;\n        int y = 0;\n        if(contentPaneStyle.getBorder", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "   for line in h:\n        heads.append(line)\n    assert len(heads) == 1\n    assert heads[0] == op.head\n    op.head = heads[0]\n    op.head_size = len(heads[0])\n    op", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "           byday = [day_list[i] for i in range(len(rule._byday))]\n            bymonthday = [month_list[i] for i in range(len(rule._bymonthday))]\n            byweekday = [week_list[i]", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);\n\t\t\t\t\tcursor_bits [(y * width / 8) + (x / 8)] = (Byte) pixel.Color.ToArgb();\n\t\t\t\t\tp", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "\t\t\t//Loop through all the time slots for the date range passed in.\n\t\t\tfor(DateTime date=dateStart;date<=dateEnd;date=date.AddHours(1)) {\n\t\t\t\t//If the date is within the date range passed in, then", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "pMem1.z = pMem1.zBlob;\npMem2.z = pMem2.zBlob;\nif( pMem1.z == null )\nreturn -1;\nif( pMem2.z == null )\nreturn 1;\nreturn sqlite", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "\t\t\t\tRewardAction = null;\n\t\t\t\tRewardItem = null;\n\t\t\t\tRewardAttachment = null;\n\t\t\t\tOwner.SendLocalizedMessage(1042001, this); // You have received your reward", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "       for snp in self.locs:\n            # in case multiple consensus were generated for this locus\n            # grab the first one (or last one)\n            # [0] post-trim chrom:start-end of locus\n            # [1:] how far ahead of start", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "           for (int i = 0; i < allClasses.size(); i++) {\n                Index ix = allClasses.get(i);\n                if (ix.cpRefs == null)\n                    continue;\n                for (int j = 0; j < ix.", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "           this.quoteLabel.Size = new System.Drawing.Size(640, 17);\n            this.quoteLabel.TabIndex = 10;\n            this.quoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n            // \n           ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "   _ = CStruct.from_buffer(ehdr, :e_ident)\n\nI'm trying to understand how to use the code to disassemble an ELF file, specifically a 64-bit one, using the `cstruct` module in Python. The code is quite complex", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "               prior[0] = curr[0];\n                prior[1] = curr[1];\n                prior[2] = curr[2];\n                prior[3] = curr[3];\n                curr[0] = data[0];\n                curr[1] = data[1", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "     get { return defaultInstance; }\n    }\n    \n    protected override ReportRefundRequest MakeReadOnly() {\n      return new ReportRefundRequest(defaultInstance);\n    }\n    \n    public static pb::MessageParser<ReportRefundRequest> Parser {\n      get", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                       AAnalysisAttributeRow Row2 = AAnalysisAttributeAccess.LoadByKey(rv[AAnalysisAttributeTable.GetApDocumentIdDBName()],\n                                                                                    ReadTransaction);\n                        Row2.AnalysisAttribute = rv[AAnalysisAttributeTable", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));\n\t}\n\t@Test\n\tpublic void knightSecond()\n\t{\n\t\tString acn = \"1. Nc3\";\n\t\tGame game = game(null", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "\t            return lastItemIndex - firstItemIndex + 1;\n\t        }\n\t    }\n\t    public global::System.Collections.Generic.KeyValuePair<TKey, TValue> this[TKey key]\n\t    {\n\t        get\n\t        {\nNext", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "               ArgumentPanel.Name = \"ArgumentPanel\";\n                ArgumentPanel.Size = new System.Drawing.Size(200, NextControlVPos);\n                ArgumentPanel.Location = new System.Drawing.Point(0, 0);\n                ArgumentPanel.BorderStyle = BorderStyle.Fixed", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "\t\t\treturn Unique(target, null);\n\t\t}\n\t\t#region Reduction\n\t\t//TODO: implement reduction\n\t\t#endregion\n\t\t#region Utilities\n\t\t//TODO: implement utilities\n\t\t#endregion\n\t}", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "       # Perform the translation\n        translation = translate_document(\n            parent_doc, based_on_rev, request.user, discard_href,\n            disclose_description, revision_id)\n    except ValidationError as e:\n        # If the translation failed validation, return", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "\n                html.WriteLine(\"      </style>\");\n                html.WriteLine(\"   </head>\");\n                html.WriteLine(\"   <body>\");\n                html.WriteLine(\"      <h1>RunUO Documentation</h1>\");\n                html.WriteLine(\"      <h2", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmSize = size;\n\t\t\treturn buff;\n\t\t}\n\t\tprivate byte GetRumbleBit()\n\t\t{\n\t\t\treturn (byte)(irrumble ? 0x01 : 0x0", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "                   min_distance = max(min_distance, abs(node.split - x[node.split_dim]))\n                else:\n                    min_distance = max(min_distance, abs(node.split - x[node.split_dim]) ** p)\n                heapp", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "       return self.from_sequence(values, key=self.key)\n    def __iadd__(self, other):\n        \"\"\"Return new sorted-key list containing all values in self and other.\n        \"\"\"\n        return self.from_sequence(self + other, key=self.", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "   catch(Exception e)\n    {\n      return null;\n    }\n  }\n  \n  public void setVisibleFeatures(final StringVector visibleFeatures)\n  {\n    this.visibleFeatures = visibleFeatures;\n  }\n  \n  public void setFeature", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "\t\t\t\t\tstring str = reader.ReadString();\n\t\t\t\t\tType type = Type.GetType(str);\n\t\t\t\t\tm_arSpellDefense.Add(type);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "\n        if (emails != null) {\n            for (int i = 0; i < emails.length(); i++) {\n                JSONObject email = emails.getJSONObject(i);\n                ContentValues contentValues = createContentValues(email);\n                newContactValues.add(", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "\t\t\t\t\t\t\t\t// Join the new sector to the old one\n\t\t\t\t\t\t\t\tTools.JoinSector(newsector, oldlines);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "\t\t\t\t\t\treferenceNode.AddChild( GetReferenceNode( script ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn referenceNode;\n\t\t}\n\t\tprivate ReferenceNode GetReferenceNode( MonoScript script )", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "\n            }\n            // now we'll calculate the new widths\n            // first we'll calculate the new widths for the added columns\n            // we'll use the widths of the last column as a base\n            // and then we'll adjust them for the added rows\n           ", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\n                    unlock();\n                }\n            }\n            catch (final ObjectStoreException ex)\n            {\n                throw ex;\n            }\n            catch (final Exception ex)\n            {\n                throw new ObjectStoreException(ex);\n            }\n        }\n    }\n", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "\t\t\t\t\t\tif (trait != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar upgrade = trait.Value.Nodes.FirstOrDefault(n => n.Key == \"Upgrade\");\n\t\t\t\t\t\t\tif (upgrade", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "                   else if (this.RequiredRace == Race.Human)\n                        from.SendLocalizedMessage(1072204); // Only Humans may use this.\n                    return false;\n                }\n            }\n            return base.CanEquip(from", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "       self.identity_map = self._identity_map\n        self.new = self._new\n        self.deleted = self._deleted\n        self.changed = self._changed\n        self.expunge_all()\n        self.flush()\n        self.identity_map =", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\tnew syspalvalue { @class = \"KCC\", value = 0, name = \"KCC_ID\" },\n\t\t\t\tnew syspalvalue { @class = \"KCC\", value = 1, name = \"KCC_CATALOG_ID", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "                           m_From.SendLocalizedMessage(1042001); // Your new house has been built!\n                            m_From.PlaySound(0x22E);\n                            m_From.AddToBackpack(newHouse);\n                            m_", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\n        }\n\n        private void Exit(int status)\n        {\n            ExitHandler(status);\n        }\n\n        private void WriteLine(string line)\n        {\n            WriteLineHandler(line);\n        }\n\n        private void FailJson(string message)\n       ", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "\t\t\tMakeMaps();\n\t\t}\n\t\t\n\t\tvoid BZBlock() \n\t\t{\n\t\t\tint i;\n\t\t\tushort[] block;\n\t\t\t\n\t\t\tif (last) {\n\t\t\t\tDoRevers", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                       var x = args[1];\n                        var y = args[2];\n                        var actor = GetActorAt(x, y);\n                        if (actor != 0)\n                        {\n                            Push(actor);\n                            return;\n                       ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "\n    public void generate(Method m, Label l) {\n        // generate code for the method\n    }\n}\n\n    public void generate(Method m, Label l) {\n        // generate code for the method\n    }\n}\n\n    public void generate(Method m, Label", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "\n\t\t\ttrackError += trackSegmentError ;\n\t\t}\n\t\n\t\treturn trackError ;\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\t\t\t\t\"    {0}\" +\n\t\t\t\t\"    Function Something(value As Integer) As Integer{0}\" +\n\t\t\t\t\"        Return value + 10000000000000000000000", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "           EarlyEvade = true,\n            EarlyEvadeDamage = 0,\n            EarlyEvadeType = DamageType.Physical,\n            EarlyEvadeDamageType = DamageType.Physical,\n        });\n            #endregion\n       ", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "       try:\n            f = open(filename, \"r\")\n            shared_mem = int(f.readline().split()[1])\n            f.close()\n            return shared_mem\n        except IOError:\n            logging.error(\"Could not read shared memory file: %", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "\t\tplot = new Plot(imp, xcoord, ycoord, xTitle, yTitle, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                       widgetName = widgetName.replace(\"$\", \"\")\n                        self.widgetRename = False\n                        self.setControlLabel(3000, 1000, widgetName)\n                        self.setControlLabel(3000, 110", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "\n        return encodeBytesToBytes( source, 0, source.length );\n    }\n\n    public static byte[] encodeBytesToBytes( byte[] source, int offset, int length ) {\n        // As of v2.3.7, we're using the US-ASCII", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "   '    xNotesOff = xNotesOff or xNotesOff.parent'\n}\n\nPlease complete the code by filling in the missing values.", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "\t\t\t\t\tint current = Menus [selected].Current;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (Menus [selected].Children [current].Title.ToUpper ().StartsWith (c.ToString (), StringComparison.Ordinal))\n", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "           if os.path.islink(dest):\n                # if the destination is a symbolic link, follow it\n                dest = os.readlink(dest)\n                if self.check_mode:\n                    self.fail_json(msg='Link target (%s) is not", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\n        if (lastScanOffset > data.length)\n        {\n            // integer overflow\n            throw new RasterFormatException(\"Incorrect last scan offset: \"\n                    + lastScanOffset);\n        }\n    }\n}", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "       help=\"The unit price of the product or service without taxes or discounts.\")\n    discount = fields.Float(string='Discount', digits_compute='product',\n        help=\"The discount applied to the unit price of the product or service.\")\n    tax_id = fields", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "   def __str__(self):\n        return f\"{self.user.username} enrolled in {self.course.name}\"\n    def get_state(self):\n        # We'll cache the state of the enrollment for this user and course\n        # in the request cache", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "   if args.exclude_account:\n        # ...\n    if args.exclude_folders:\n        # ...\n    if args.exclude_metadata:\n        # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "       system_id = self.ssm.get(system)\n        if system_id:\n            self.client.delete_custom_values(system_id, keys)\n            print('Deleted custom values for %s' % system)\n\nThe code is quite long, but I", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "                   \"   NEW: \" + nodeUpdate + \"\\n\" +\n                    \"   VERSION: \" + nodeUpdate.getVersion() + \"\\n\");\n        }\n        return true;\n    }\n    \n    private NodeUpdateEntity updateNode(Node node, NodeUpdateEntity", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "\t\t\t\t.Append (Text [0])\n\t\t\t\t.Append (Text.Length > 1 ? \"...\" : string.Empty)\n\t\t\t\t.Append (\")\")\n\t\t\t\t.ToString ();\n\t\t}\n\t\t\n\t\t\n\t\t", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "               if (chr.m_collide)\n                {\n                    // Check for collisions with other avatars\n                    // and update the collision values\n                    // if we collide\n                    CheckCollide(chr);\n                }\n            }\n        }\n        private", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "   for t in ts:\n        t.start()\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "               super.setPropertiesFromAttributes();\n            }\n            protected void layoutChildren() {\n                super.layoutChildren();\n                // do nothing\n            }\n            protected void paint(Graphics g) {\n                super.paint(g);\n                // do nothing\n            }\n            protected", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "                   CanBeCrit = true,\n                });\n            #endregion\n        }\n    }\n}\n", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "   if gather:\n        for p in self:\n            p.write_data(io, variables, gather, clear)\n    else:\n        for p in self:\n            p.write_data(io, variables, gather, clear)\n        # write_data() will raise an", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "               return -value;\n            }\n        };\n    }\n    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"[\" + getOperator() + \"]\";\n    }\n}\n\npublic static void main(String[] args) {", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "                       &nbsp;(<span class=\"warning\">added: %(number_diff)s</span> collections)\n                        &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch.py\\\" has %(number_file)s collections\n                        <br /><br />\n", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "           if (info < 0) throw new ILMathException(\"LAPACK error in qr decomposition\");\n            return ret;\n        }\n        #endregion\n        #region \"LAPACK_zgeqrf\"\n        private static void Lapack_zgeqrf(int m,", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "```\n      if (mainAxis == Axis.main) {\n        // STEP 7: DETERMINE CROSS-AXIS DIMENSION\n        crossDim = boundAxisWithinDim(mainDim, crossAxis, crossDim);\n        // STEP", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );\n\t\t\t\tshiftPos += yAxis._tmpSpace;\n\t\t\t}\n\t\t\tshiftPos = 0.0f;\n\t\t\tforeach ( Y2Axis y2", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "\n    # Make changes to the master's permanence\n    masterPermanence = masterPermanence.toDense()\n    masterPermanence = (\n        masterPermanence @\n        (self.adjustMasterPermanence(masterPermanence, masterValidPerman", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "           SaveLayout(xmlWriter, pane.Items);\n        }\n        void SaveLayout(XmlWriter xmlWriter, List<DockableContent> items)\n        {\n            foreach (DockableContent content in items)\n            {\n                SaveLayout(xmlWriter, content);\n", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "   if self.provideDeps:\n        for pattern in self.provideDeps:\n            for dep in self.findDependencies(depEnv, depTools, depSandbox):\n                results.append((dep, dep.getReason()))\n                if dep.isIndirect", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "\t\t\t\tswitch (c) {\n\t\t\t\tcase '\\\\':\n\t\t\t\t\t// Handle escaped characters\n\t\t\t\t\tc = escape (c, out d);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '/':\n\t\t\t\t", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "       return contains;\n    }\n    public void setFocus() {\n        super.setFocus();\n        if (getUI() != null) {\n            getUI().requestFocus(this);\n        }\n    }\n    public void setFocusable(boolean focusable) {\n       ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                           output.write(\"      <field name='%s' type='%s'/>\\n\" % (field[0], field[1]))\n                        output.write(\"    </struct>\\n\");\n                except:\n                    pass\n            else:\n                output.write(\"", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "           if (result != RESULT.OK)\n            {\n                throw new Exception(\"Error creating sound or stream\");\n            }\n            return RESULT.OK;\n        }\n        public RESULT createSound(string name, MODE mode, out Sound sound)\n        {", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "   return _declaration(text)\ndef _declaration(text):\n    global _network\n    _network = Network()\n    return _network\nclass Network(_object):\n    def __init__(self):\n        self.username = None\n        self.password = None\n", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "\t\t\t}\n\t\t\telse if (clas == \"PSION\") {\n\t\t\t\t// psion stuff\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// default stuff\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e)", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "           }\n        }\n        public override void OnDeath()\n        {\n            base.OnDeath();\n            if (m_ControlMaster != null)\n            {\n                m_ControlMaster.OnDeath();\n            }\n            if (m_SummonMaster != null", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "       if vmap['name'] == \"graal\":\n            complt += \"noglob _graal_{{opt}}\".format(optionPrefix + vmap['name'])\n        elif vmap['name'] == \"hotspot\":\n            complt += \"noglob _hotspot_{{", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "   self.Log.info(\"Checking disks on nodes %s and %s\",\n                   check_nodes[0], check_nodes[1])\n    for disk in self.disks:\n      self.Log.info(\"Disk %s on node %s\", disk, node", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "           try{ ois.close(); } catch( Exception e ){EncogLogging.log(e);}\n        }   // end finally\n        return obj;\n    }   // end decodeObject\n}   // end class Base64\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "\t\tRowMetaAndData rmad=databaseMeta.getAllFields(tableName, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t\t\t z = new double[1];\n\t\t\t z[0] = Math.sqrt(7.0) - 2.0;\n\t\t\t break;\n\t\t default:\n\t\t\t z = new double[1];\n\t\t\t z[0] =", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "                           if (bmp[n1] != bmp[n1 - 1]) hits1++;\n                        }\n                    }\n                    side1 = hits1 / (search_radius * search_radius);\n                    hits1 = 0;\n                }\n            }", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "\tprotected override int RewardSetId { get { return 8; } }\n}\npublic class StewartPtj : StewartVarLibraryPtjBaseScript\n{\n\tprotected override bool DoShelving { get { return false; } }\n\tprotected override int RewardSet", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "                  is_const=True, is_virtual=True)\n    cls.add_method('Set', \n                   'void', \n                   [param('ns3::ObjectBase const *', 'object'), param('ns3::AttributeValue const &', 'attribute')],", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "           mute = (m != 0);\n            return result;\n        }\n        public RESULT setDry          (float dry)\n        {\n            return FMOD_EventCategory_SetDry(eventcategoryraw, dry);\n        }\n        public RESULT", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "       self.DoLeaveWindow(event)\n        \"\"\"\n        self.DoLeaveWindow(event)\n    def DoLeaveWindow(self, event):\n        \"\"\"\n        Handles the LAF-defined event for when the user leaves the window.\n        :param event: the", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "       if cdata is None:\n            # Optimize the tensor slice\n            ret = node.op.optimize_tensor_slice(node.inputs, shape_of)\n            if ret is not None:\n                node.op = ret\n    elif isinstance(node.op", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "           package = globals['__file__']\n        else:\n            package = None\n    return package\ndef _import_module(name, package=None, level=0):\n    \"\"\"Import a module.\n    This function is the core of the import machinery.\n    It", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "           {\n                BigInteger result = new BigInteger(maxLength);\n                result.data = new byte[maxLength];\n                result.data[0] = (byte)((numBits >> 1) & 0xFF);\n                result.data[1] = (byte", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "           if e.nodeName == 'layout':\n                self.layoutNode = e\n                break\n        except IOError:\n            log.log(log.WARNING,\"XIB_LAYOUT\",_(\"Layout ID\") + \" \" + self.layoutID + \" not found in file\")", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "       if not fourcircle_utility.file_exists(md_file_path):\n            return False, 'Pre-processed file does not exist.'\n        # load\n        # 1. read_nxs_file\n        # 2. read_nxs_file_with", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "     raise Exception(\"No headers phase found\")\n  def GetBuildSettings(self):\n    settings = {}\n    for key in self.PBXProjectAncestor().buildSettings:\n      settings[key] = self.PBXProjectAncestor().buildSettings[key", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "\t\t\t\tcase Msg.WM_NCDESTROY:\n\t\t\t\t\tOnControlDestroyed (new EventArgs ());\n\t\t\t\t\treturn PreProcessControlState.MessageHandled;\n\t\t\t}\n\t\t\treturn PreProcessControlState.MessageHand", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "                   Node.TemplateText t = (Node.TemplateText) body.get(0);\n                    if (t.getBody() == null) {\n                        // XXX - should we generate an extra call to\n                        // pushBody here?  It would simplify the\n                        //", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": " #\n  python $DIRAC/scripts/dirac/WebServer.py --http-server --http-server-port 8080\n  \"\"\" % {'bashrc': os.path.join( self.localRoot, 'bashrc' ), } )\n        f", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "               if self.CurrentLineNumber == 1:\n                    self.CurrentLineNumber = 2\n                else:\n                    self.CurrentLineNumber += 1\n                self.CurrentFdName = None\n                self.CurrentFd = None\n                self.CurrentFdSection", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "           search_reg_str = search_terms.replace(' ', r'[^\\w\\*]+')\n        # Now build the regular expression.\n        search_reg_str = re.compile(search_reg_str, flags)\n        # Now search for the phrase.\n       ", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "               var methodGroup = (MethodGroup)expression;\n                var method = methodGroup.Method;\n                if (method.IsStatic)\n                {\n                    Error(diagnostics, ErrorCode.ERR_NonStaticMethodCantBeNull, syntax, method);\n                    return;\n", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "\n            for (int i = 0; i < libs.size(); i++) {\n                NativeLibrary lib = libs.elementAt(i);\n                if (lib.name.equals(name)) {\n                    // We found the native library\n                    if (loader != null", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "       BeginBatchUndo(self)\n        Begin a batch undo operation.\n        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\nNext line of code:\n", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "                   } else {\n                        throw new IllegalArgumentException(\"Illegal character in pattern at index \" +\n                            pos);\n                    }\n                    break;\n            }\n        }\n    }\n}\n\nNote: This is just an example implementation, and the actual implementation", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "   response = requests.get(url, params=utils.build_node_location_params(x))\n    data = utils.parse_json_response(response.content)\n    return data\ndef get_volume(x, remote_instance=None):\n    \"\"\"Retrieves", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "           while (retryCount-- > 0) {\n                try {\n                    // perform the mount operation\n                    // ...\n                    successful = true;\n                    break;\n                } catch (Throwable t) {\n                    // retry the mount operation\n                    //", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "       try {\n            m = ModeFactory.getMode(Task.class);\n            m.setParameters(params);\n            m.setSelectMode(new SelectMode(subCids));\n            m.setSubscriptionMode(new SubscriptionMode(unsubCids));\n            m", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "```\n    if state == 'present':\n        module.main()\n    elif state == 'absent':\n        module.main(state='absent')\n```\nExplanation:\n\nThe `module.main()` function is called with the `state` parameter set to `'present'`", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "   if (tractor.getY() - target.getY() == -2) {\n      my = -1;\n    }\n    if (tractor.getY() - target.getY() == 2) {\n      my = 1;\n    }\n    if", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "\n        pMem.n = sqlite3Strlen30( pMem.z );\n        pMem.type = SQLITE_TEXT;\n        pMem.enc = SQLITE_UTF8;\n        pMem.z = pMem.z;\n        pMem.n = p", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "   self.add_option_group(group)\n\ndef sigquit():\n    global _\n    _ = OptionParser\n    sys.exit(1)\n\ndef sig_help():\n    global _\n    _ = OptionParser\n    print _(\"yum options\")\n    print", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "               dx0 = -hr;  dy0 =  0f;    dx1 =  0f;  dy1 = -vr;\n                break;\n            case 2:\n                dx0 = -hr;  dy0 =  0f;    dx1 =  0f;", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "           state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /************************************************************************/\n        public static int hqrndrandom()\n        {\n            hq", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "               }\n            }\n            #endregion\n            #region HitTest\n            //------------------------------------------------------------------------------------------\n            // HitTest\n            public virtual HitTestResult HitTest(Point p) {\n                // Calculate the hit test rectangle\n                Rectangle hitTestRectangle = this.", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "       tag_value = json_d.get('tag', '')\n        if not isinstance(tag_value, basestring):\n            tag_value = ''\n        return (comment_value, tag_value)\n    def evaluate(self, student_response):\n        \"\"\"Evalu", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "                   while self.tok[0] not in (',', '}', 'EOF'):\n                        params.append(self.Parse_expression())\n                        self.NextToken()\n                    self.NextToken()\n                    # Add to globals\n                    ret[name", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "                       diagnostics.Add(Error(ERRID.ERR_ChecksumMismatch, guid, path));\n                    }\n                    else\n                    {\n                        diagnostics.Add(Error(ERRID.ERR_ChecksumMismatch, guid, path));\n                   ", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "\tthis.region = region;\n}\nvoid setState (int state) {\n\tcheckWidget ();\n\tif (state != 0) error (SWT.ERROR_INVALID_ARGUMENT);\n\tthis.state = state;\n}\nvoid setText (String text", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "\n    # if it is thin, we need to check if the disk is already thin\n    # if it is, we need to update the disk spec with the correct type\n    # if it is not, we need to create a new thin disk\n    if diskspec.device.backing.", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "\t\t\treturn GetName (ot);\n\t\t}\n\t\tpublic static string GetMetadataName (string metadata_name)\n\t\t{\nNext line of code:\n\t\t\tfor (int i = 0; i < names.Length; ++i) {\n\t\t\t", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "       json_data = json.loads(str(form['jsondata']))\n        json_data = json_unicodetostring(json_data)\n        pid = json_data['pid']\n        if pid is None:\n            return self._fail(req, apache.HTTP", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "               # Derive the subset for the dimension coordinate\n                dim_coord_subset = dim_coord_subset()\n                if dim_coord_subset:\n                    # Add the dimension coordinate subset to the list\n                    # of subsets\n                    subsets.append(dim_co", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "                   tokenlist[ikey] = dictvalue\n    def postAction(self,tokenlist):\n        for i,tok in enumerate(tokenlist):\n            if len(tok)==0:\n                continue\n            ikey = tok[0]\n            if isinstance(i", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "   out = dates + offsets\n    An array with the same shape as `dates` containing the adjusted\n    dates.\n    See Also\n    --------\n    busdaycal : A class to specify custom valid days.\n    busdayoff : A function to adjust dates based on a given", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "       return acc_src, acc_dest, acc_valuation, journal_id\n    def _get_move_line_accounts(self, cr, uid, move, context=None):\n        \"\"\"\n        Return the accounts to use for posting the move line entries.\n        \"\"\"", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "       if len(arrayObjectMemberTypes) > 0:\n            def get_array_object_name(memberType):\n                return \"/* %s */\" % memberType.name\n            arrayObjectNames = [get_array_object_name(memberType) for memberType in array", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "       for (int i = 0; i < ifds.length; i++) {\n            if (ifds[i] & ifdFlags) {\n                return new Integer[] { i };\n            }\n        }\n        return null;\n    }\n    protected static int getFlags", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "   user.set_preference(\n        \"receive_emails\",\n        receive_emails\n    )\n    user.save()\n    return HttpResponseRedirect(reverse(\"dashboard\"))\n\ndef set_preference(request, preference_name, preference_value):\n   ", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "           if paper['doi'] in arXiv_papers:\n                arXiv_papers.remove(paper['doi'])\n                break\n        if arXiv_papers:\n            push_arXiv_papers = set(papers_to_autoc", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "           url = _get_subfield_value(fft, 'u', '')\n            # We have to check if the url is already in the list of documents\n            # if it is, we have to update the docname and the docformat\n            # otherwise, we have to add it to", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "     return JavaCore.createPackageFragment(fileName, null);\n    }\n  }\n  public static IPackageFragment getPackageFragment(char[] fileName) {\n    return getPackageFragment(fileName, -1, -1);\n  }\n  public static char[][] getPackageName(", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "         self.hashes[filename] = (before, after)\n    return svndiff.join(svndiff_fmt.join(svndiff, line) for line in gitdiff)\n    # The above code is a bit of a hack, as it relies on the fact that", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "\t\t\t\tif (mediaEncoderItems.Length != 3)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Invalid media encoder string\", property.Name);\n\t\t\t\t}\n\t\t\t\tstring mediaType = mediaEncoderItems[0", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "drawImage(bImg, op, x, y, null, null);\n}\n    public void drawImage(BufferedImage bImg,\n                          BufferedImageOp op,\n                          int x,\n                          int y,\n                          ImageObserver observer)  {\nNext line of", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "   if matched_zero:\n      return False\n    # Don't warn on function pointer assignments to function pointers.\n    # Note that this pattern will also pass on assignments of \"0\" to\n    # function pointers, but the preferred values for those would be\n    # \"nullptr", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "\n        }\n    }\n}\n\nPlease complete the code by filling in the missing characters and symbols.\n\nNote: The code is written in a specific format, with each line containing a single character or symbol, followed by a space, and then the next character or symbol on the next line. This", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "           corrr1dcircular(signal, m, b, n, ref c);\n        }\n    }\n}\n\n", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "\n                marginLeft = a.getDimensionPixelSize(LEFT_MARGIN, UNDEFINED);\n                marginRight = a.getDimensionPixelSize(RIGHT_MARGIN, UNDEFINED);\n                marginTop = a.getDimensionPixelSize(", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "       with open(filename, \"r\") as f:\n            for line in f:\n                if re_warning.match(line):\n                    self.logger.warning(line.strip())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "               logical.append(text)\n                if end:\n                    logical.append(end)\n            previous = (token_type, text)\n        return \"\".join(logical)\n    \n    def __getIndent(self, line):\n        # from pep8.", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "               if lhs in overrides:\n                    value = overrides[lhs]\n                    if adding:\n                        line = lhs + \"=\" + value\n                    else:\n                        line = lhs + \"=\" + value + \"+\"\n                    break\n                else", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "     for (int j = 0; j < dsize; j++) {\n        int position = document.get(j).getPosition();\n        labels[dataIndex][j] = position - windowSize + 1;\n        data[dataIndex][j] = new int[windowSize", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def _accept_mapper(self, mapper):\n        if not self.is_valid():\n            return\n        self.listeners.append(mapper)\n        return self\n    def _accept_select", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           aggregator.aggregate(new_cube)\n            return new_cube\n        else:\n            aggregator.aggregate(self)\n            return aggregator.cube\n    def rolling_window(self, window, axis=0, **kwargs):\n        \"\"\"\n       ", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "           for k in self.splitKeySet:\n                theSum += abs(self.splitKeyHash[k].br.len - tree2.splitKeyHash[k].br.len)\n            return theSum\n            for k in selfHasButNotTree:\n                theSum += self", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "   self._initialized = True\n    def record(self, impl_id):\n        # type: (int) -> None\n        pass\n    def __init__(self, impl_id):\n        # type: (int) -> None\n        self.impl_id = impl_id", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "       self.parse(scanner, locals)\n    def execute(self, statement, locals=None):\n        \"\"\"Execute a statement.\"\"\"\n        self.invoke('atStatement', statement=statement, locals=locals)\n        self.statement(statement, locals)\n", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "               return new SynthesizedIntrinsicOperator(op, leftType, rightType, returnType, isChecked);\n            }\n        }\n        private static Symbol GetIntrinsicOperator(BinaryOperatorKind op, TypeSymbol leftType, TypeSymbol rightType, TypeSymbol returnType)\n       ", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "       g = np.zeros((K, 1))\n        for k in range(K):\n            g[k] = self._objectiveF(f_k)\n        return g\n    #====================================================================\n    def _computeUnnormalizedLogWeights(self", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "       return _uuid;\n    }\n    private void checkNotClosed()\n    {\n        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled())\n        {\n            SibTr.debug(tc, \"checkNotClosed\", \"Connection is not", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "   if not user_info:\n        return (1, 'User not found')\n    else:\n        return (0, 'User found')\ndef get_user_info(status):\n    global CFG_SITE_URL\n    user_info = None\n    if status ==", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "           if (extensions.IndexOf(\"GL_OES_texture_float\") != -1)\n            {\n                majorVersion = 2;\n                minorVersion = 0;\n            }\n            else if (extensions.IndexOf(\"GL_EXT_texture_float\") !=", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "\t\t\t\t\t\t\t\tnotice = String.Format( \"Search results: {0}\", results.Count );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AccountGump( from, results, notice ) );\n\t\t", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "FloatingPoint fp = new FloatingPoint();\nFloatingPoint fp2 = new FloatingPoint();\nFloatingPoint fp3 = new FloatingPoint();\nFloatingPoint fp4 = new FloatingPoint();\nFloatingPoint fp5 = new", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "       final VirtualMachine vm = _vmOrchestrator.getVirtualMachine(vmUuid);\n        final Host srcHost = _hostDao.findById(srcHostId);\n        final Host destHost = _hostDao.findById(destHostId);\n        final List<", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "           default:\n                throw error(\"Unrecognized inline flag\");\n            }\n            ch = peek();\n            if (ch == ')')\n                break;\n        }\n    }\n    private void unread(char ch) {\n        if (ch == '(') {\n", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "           RequiredColumns = new StringCollection();\n            RequiredColumns.Add(\"PartnerKey\");\n            RequiredColumns.Add(\"FamilyKey\");\n            // todo: Add other columns as required\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n           ", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "                           result = concat(values, axis=0)\n                        return result\n                    else:\n                        # GH 8468\n                        # If the axis is not consistent, then we need to\n                        # create a new axis\n                        axis = self.", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "           return new ToolkitEventMulticaster(a, b);\n        }\n        static AWTEventListener remove(AWTEventListener a,\n                                        AWTEventListener b) {\n            if (a == null)  return b;\nNext line of code:\n            return new Toolkit", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "\nif( b >= 0 ) {\ndest[ off + i ] = (byte) b;\n}\nelse {\nbreak;\n}\n\n// ...\n\nreturn i;\n}   // end read\n}   // end class Base64", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "   def test_listFile(self):\n        \"\"\"\n        Check the output of the list method on a file.\n        \"\"\"\n        self.createFile('file.txt')\n        d = self.shell.list(('file.txt',))\n        def cb(res):\n           ", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                   // add the see kills button\n                    this.AddButton(x1, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                }\n                else\n                {\n                ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "               tbl_ix = (data[base] & 255);\n            if (tbl_ix < 0 || tbl_ix >= ac_ix.length)\n                throw new IOException(\"Invalid AC Huffman table index\");\n            base += 1;\n            result += 1", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "           if (result == RESULT.OK)\n            {\n                soundnew = (Sound)Marshal.GetObjectForIUnknown(soundraw);\n                sound = soundnew;\n            }\n            else\n            {\n                sound = null;\n            }\n            return result;", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "\n    def makeSkeleton(self, test):\n        \"\"\" Create a new test skeleton based on the given test \"\"\"\n        skeleton = self.skeleton()\n        skeleton.testname = test.name\n        skeleton.test = test\n        skeleton.bugs =", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
{"pred": "               #region Partner Interests\n                // PartnerInterests are done seperately in SubmitChangesPartnerInterests!\n                #endregion\n            }\n            return AllSubmissionsOK;\n        }\n        #endregion\n        #region SubmitChangesAddresses\n       ", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "\t\tif (gfp.internal_buffer != null) {\n\t\t\tbs.free(gfp.internal_buffer);\n\t\t\tgfp.internal_buffer = null;\n\t\t}\n\t\tif (bs.get_buffer_size() > 0) {", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
